/*
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class UserDefinedFieldDefinitionModel : IEquatable<UserDefinedFieldDefinitionModel>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="createDate")]
        public DateTime? CreateDate { get; set; }

        /// <summary>
        /// Gets or Sets CrmToProjectUdfId
        /// </summary>
        [DataMember(Name="crmToProjectUdfId")]
        public long? CrmToProjectUdfId { get; set; }

        /// <summary>
        /// Gets or Sets DataType
        /// </summary>
        [DataMember(Name="dataType")]
        public int? DataType { get; set; }

        /// <summary>
        /// Gets or Sets DefaultValue
        /// </summary>
        [DataMember(Name="defaultValue")]
        public Object DefaultValue { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DisplayFormat
        /// </summary>
        [DataMember(Name="displayFormat")]
        public int? DisplayFormat { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="isActive")]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets IsEncrypted
        /// </summary>
        [DataMember(Name="isEncrypted")]
        public bool? IsEncrypted { get; set; }

        /// <summary>
        /// Gets or Sets IsFieldMapping
        /// </summary>
        [DataMember(Name="isFieldMapping")]
        public bool? IsFieldMapping { get; set; }

        /// <summary>
        /// Gets or Sets IsPrivate
        /// </summary>
        [DataMember(Name="isPrivate")]
        public bool? IsPrivate { get; set; }

        /// <summary>
        /// Gets or Sets IsProtected
        /// </summary>
        [DataMember(Name="isProtected")]
        public bool? IsProtected { get; set; }

        /// <summary>
        /// Gets or Sets IsRequired
        /// </summary>
        [DataMember(Name="isRequired")]
        public bool? IsRequired { get; set; }

        /// <summary>
        /// Gets or Sets IsVisibleToClientPortal
        /// </summary>
        [DataMember(Name="isVisibleToClientPortal")]
        public bool? IsVisibleToClientPortal { get; set; }

        /// <summary>
        /// Gets or Sets MergeVariableName
        /// </summary>
        [DataMember(Name="mergeVariableName")]
        public string MergeVariableName { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfDecimalPlaces
        /// </summary>
        [DataMember(Name="numberOfDecimalPlaces")]
        public int? NumberOfDecimalPlaces { get; set; }

        /// <summary>
        /// Gets or Sets SortOrder
        /// </summary>
        [DataMember(Name="sortOrder")]
        public int? SortOrder { get; set; }

        /// <summary>
        /// Gets or Sets UdfType
        /// </summary>
        [DataMember(Name="udfType")]
        public int? UdfType { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields")]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserDefinedFieldDefinitionModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  CrmToProjectUdfId: ").Append(CrmToProjectUdfId).Append("\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayFormat: ").Append(DisplayFormat).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsEncrypted: ").Append(IsEncrypted).Append("\n");
            sb.Append("  IsFieldMapping: ").Append(IsFieldMapping).Append("\n");
            sb.Append("  IsPrivate: ").Append(IsPrivate).Append("\n");
            sb.Append("  IsProtected: ").Append(IsProtected).Append("\n");
            sb.Append("  IsRequired: ").Append(IsRequired).Append("\n");
            sb.Append("  IsVisibleToClientPortal: ").Append(IsVisibleToClientPortal).Append("\n");
            sb.Append("  MergeVariableName: ").Append(MergeVariableName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NumberOfDecimalPlaces: ").Append(NumberOfDecimalPlaces).Append("\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("  UdfType: ").Append(UdfType).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UserDefinedFieldDefinitionModel)obj);
        }

        /// <summary>
        /// Returns true if UserDefinedFieldDefinitionModel instances are equal
        /// </summary>
        /// <param name="other">Instance of UserDefinedFieldDefinitionModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserDefinedFieldDefinitionModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    CreateDate == other.CreateDate ||
                    CreateDate != null &&
                    CreateDate.Equals(other.CreateDate)
                ) && 
                (
                    CrmToProjectUdfId == other.CrmToProjectUdfId ||
                    CrmToProjectUdfId != null &&
                    CrmToProjectUdfId.Equals(other.CrmToProjectUdfId)
                ) && 
                (
                    DataType == other.DataType ||
                    DataType != null &&
                    DataType.Equals(other.DataType)
                ) && 
                (
                    DefaultValue == other.DefaultValue ||
                    DefaultValue != null &&
                    DefaultValue.Equals(other.DefaultValue)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    DisplayFormat == other.DisplayFormat ||
                    DisplayFormat != null &&
                    DisplayFormat.Equals(other.DisplayFormat)
                ) && 
                (
                    IsActive == other.IsActive ||
                    IsActive != null &&
                    IsActive.Equals(other.IsActive)
                ) && 
                (
                    IsEncrypted == other.IsEncrypted ||
                    IsEncrypted != null &&
                    IsEncrypted.Equals(other.IsEncrypted)
                ) && 
                (
                    IsFieldMapping == other.IsFieldMapping ||
                    IsFieldMapping != null &&
                    IsFieldMapping.Equals(other.IsFieldMapping)
                ) && 
                (
                    IsPrivate == other.IsPrivate ||
                    IsPrivate != null &&
                    IsPrivate.Equals(other.IsPrivate)
                ) && 
                (
                    IsProtected == other.IsProtected ||
                    IsProtected != null &&
                    IsProtected.Equals(other.IsProtected)
                ) && 
                (
                    IsRequired == other.IsRequired ||
                    IsRequired != null &&
                    IsRequired.Equals(other.IsRequired)
                ) && 
                (
                    IsVisibleToClientPortal == other.IsVisibleToClientPortal ||
                    IsVisibleToClientPortal != null &&
                    IsVisibleToClientPortal.Equals(other.IsVisibleToClientPortal)
                ) && 
                (
                    MergeVariableName == other.MergeVariableName ||
                    MergeVariableName != null &&
                    MergeVariableName.Equals(other.MergeVariableName)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    NumberOfDecimalPlaces == other.NumberOfDecimalPlaces ||
                    NumberOfDecimalPlaces != null &&
                    NumberOfDecimalPlaces.Equals(other.NumberOfDecimalPlaces)
                ) && 
                (
                    SortOrder == other.SortOrder ||
                    SortOrder != null &&
                    SortOrder.Equals(other.SortOrder)
                ) && 
                (
                    UdfType == other.UdfType ||
                    UdfType != null &&
                    UdfType.Equals(other.UdfType)
                ) && 
                (
                    UserDefinedFields == other.UserDefinedFields ||
                    UserDefinedFields != null &&
                    UserDefinedFields.SequenceEqual(other.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (CreateDate != null)
                    hashCode = hashCode * 59 + CreateDate.GetHashCode();
                    if (CrmToProjectUdfId != null)
                    hashCode = hashCode * 59 + CrmToProjectUdfId.GetHashCode();
                    if (DataType != null)
                    hashCode = hashCode * 59 + DataType.GetHashCode();
                    if (DefaultValue != null)
                    hashCode = hashCode * 59 + DefaultValue.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (DisplayFormat != null)
                    hashCode = hashCode * 59 + DisplayFormat.GetHashCode();
                    if (IsActive != null)
                    hashCode = hashCode * 59 + IsActive.GetHashCode();
                    if (IsEncrypted != null)
                    hashCode = hashCode * 59 + IsEncrypted.GetHashCode();
                    if (IsFieldMapping != null)
                    hashCode = hashCode * 59 + IsFieldMapping.GetHashCode();
                    if (IsPrivate != null)
                    hashCode = hashCode * 59 + IsPrivate.GetHashCode();
                    if (IsProtected != null)
                    hashCode = hashCode * 59 + IsProtected.GetHashCode();
                    if (IsRequired != null)
                    hashCode = hashCode * 59 + IsRequired.GetHashCode();
                    if (IsVisibleToClientPortal != null)
                    hashCode = hashCode * 59 + IsVisibleToClientPortal.GetHashCode();
                    if (MergeVariableName != null)
                    hashCode = hashCode * 59 + MergeVariableName.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (NumberOfDecimalPlaces != null)
                    hashCode = hashCode * 59 + NumberOfDecimalPlaces.GetHashCode();
                    if (SortOrder != null)
                    hashCode = hashCode * 59 + SortOrder.GetHashCode();
                    if (UdfType != null)
                    hashCode = hashCode * 59 + UdfType.GetHashCode();
                    if (UserDefinedFields != null)
                    hashCode = hashCode * 59 + UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UserDefinedFieldDefinitionModel left, UserDefinedFieldDefinitionModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UserDefinedFieldDefinitionModel left, UserDefinedFieldDefinitionModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
