/*
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ContactWebhookModel : IEquatable<ContactWebhookModel>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets DeactivationUrl
        /// </summary>
        [DataMember(Name="deactivationUrl")]
        public string DeactivationUrl { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="isActive")]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets IsReady
        /// </summary>
        [DataMember(Name="isReady")]
        public bool? IsReady { get; set; }

        /// <summary>
        /// Gets or Sets IsSubscribedToCreateEvents
        /// </summary>
        [DataMember(Name="isSubscribedToCreateEvents")]
        public bool? IsSubscribedToCreateEvents { get; set; }

        /// <summary>
        /// Gets or Sets IsSubscribedToDeleteEvents
        /// </summary>
        [DataMember(Name="isSubscribedToDeleteEvents")]
        public bool? IsSubscribedToDeleteEvents { get; set; }

        /// <summary>
        /// Gets or Sets IsSubscribedToUpdateEvents
        /// </summary>
        [DataMember(Name="isSubscribedToUpdateEvents")]
        public bool? IsSubscribedToUpdateEvents { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets NotificationEmailAddress
        /// </summary>
        [DataMember(Name="notificationEmailAddress")]
        public string NotificationEmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets OwnerResourceID
        /// </summary>
        [DataMember(Name="ownerResourceID")]
        public int? OwnerResourceID { get; set; }

        /// <summary>
        /// Gets or Sets SecretKey
        /// </summary>
        [DataMember(Name="secretKey")]
        public string SecretKey { get; set; }

        /// <summary>
        /// Gets or Sets SendThresholdExceededNotification
        /// </summary>
        [DataMember(Name="sendThresholdExceededNotification")]
        public bool? SendThresholdExceededNotification { get; set; }

        /// <summary>
        /// Gets or Sets WebhookGUID
        /// </summary>
        [DataMember(Name="webhookGUID")]
        public string WebhookGUID { get; set; }

        /// <summary>
        /// Gets or Sets WebhookUrl
        /// </summary>
        [DataMember(Name="webhookUrl")]
        public string WebhookUrl { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields")]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContactWebhookModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DeactivationUrl: ").Append(DeactivationUrl).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsReady: ").Append(IsReady).Append("\n");
            sb.Append("  IsSubscribedToCreateEvents: ").Append(IsSubscribedToCreateEvents).Append("\n");
            sb.Append("  IsSubscribedToDeleteEvents: ").Append(IsSubscribedToDeleteEvents).Append("\n");
            sb.Append("  IsSubscribedToUpdateEvents: ").Append(IsSubscribedToUpdateEvents).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NotificationEmailAddress: ").Append(NotificationEmailAddress).Append("\n");
            sb.Append("  OwnerResourceID: ").Append(OwnerResourceID).Append("\n");
            sb.Append("  SecretKey: ").Append(SecretKey).Append("\n");
            sb.Append("  SendThresholdExceededNotification: ").Append(SendThresholdExceededNotification).Append("\n");
            sb.Append("  WebhookGUID: ").Append(WebhookGUID).Append("\n");
            sb.Append("  WebhookUrl: ").Append(WebhookUrl).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ContactWebhookModel)obj);
        }

        /// <summary>
        /// Returns true if ContactWebhookModel instances are equal
        /// </summary>
        /// <param name="other">Instance of ContactWebhookModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContactWebhookModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    DeactivationUrl == other.DeactivationUrl ||
                    DeactivationUrl != null &&
                    DeactivationUrl.Equals(other.DeactivationUrl)
                ) && 
                (
                    IsActive == other.IsActive ||
                    IsActive != null &&
                    IsActive.Equals(other.IsActive)
                ) && 
                (
                    IsReady == other.IsReady ||
                    IsReady != null &&
                    IsReady.Equals(other.IsReady)
                ) && 
                (
                    IsSubscribedToCreateEvents == other.IsSubscribedToCreateEvents ||
                    IsSubscribedToCreateEvents != null &&
                    IsSubscribedToCreateEvents.Equals(other.IsSubscribedToCreateEvents)
                ) && 
                (
                    IsSubscribedToDeleteEvents == other.IsSubscribedToDeleteEvents ||
                    IsSubscribedToDeleteEvents != null &&
                    IsSubscribedToDeleteEvents.Equals(other.IsSubscribedToDeleteEvents)
                ) && 
                (
                    IsSubscribedToUpdateEvents == other.IsSubscribedToUpdateEvents ||
                    IsSubscribedToUpdateEvents != null &&
                    IsSubscribedToUpdateEvents.Equals(other.IsSubscribedToUpdateEvents)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    NotificationEmailAddress == other.NotificationEmailAddress ||
                    NotificationEmailAddress != null &&
                    NotificationEmailAddress.Equals(other.NotificationEmailAddress)
                ) && 
                (
                    OwnerResourceID == other.OwnerResourceID ||
                    OwnerResourceID != null &&
                    OwnerResourceID.Equals(other.OwnerResourceID)
                ) && 
                (
                    SecretKey == other.SecretKey ||
                    SecretKey != null &&
                    SecretKey.Equals(other.SecretKey)
                ) && 
                (
                    SendThresholdExceededNotification == other.SendThresholdExceededNotification ||
                    SendThresholdExceededNotification != null &&
                    SendThresholdExceededNotification.Equals(other.SendThresholdExceededNotification)
                ) && 
                (
                    WebhookGUID == other.WebhookGUID ||
                    WebhookGUID != null &&
                    WebhookGUID.Equals(other.WebhookGUID)
                ) && 
                (
                    WebhookUrl == other.WebhookUrl ||
                    WebhookUrl != null &&
                    WebhookUrl.Equals(other.WebhookUrl)
                ) && 
                (
                    UserDefinedFields == other.UserDefinedFields ||
                    UserDefinedFields != null &&
                    UserDefinedFields.SequenceEqual(other.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (DeactivationUrl != null)
                    hashCode = hashCode * 59 + DeactivationUrl.GetHashCode();
                    if (IsActive != null)
                    hashCode = hashCode * 59 + IsActive.GetHashCode();
                    if (IsReady != null)
                    hashCode = hashCode * 59 + IsReady.GetHashCode();
                    if (IsSubscribedToCreateEvents != null)
                    hashCode = hashCode * 59 + IsSubscribedToCreateEvents.GetHashCode();
                    if (IsSubscribedToDeleteEvents != null)
                    hashCode = hashCode * 59 + IsSubscribedToDeleteEvents.GetHashCode();
                    if (IsSubscribedToUpdateEvents != null)
                    hashCode = hashCode * 59 + IsSubscribedToUpdateEvents.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (NotificationEmailAddress != null)
                    hashCode = hashCode * 59 + NotificationEmailAddress.GetHashCode();
                    if (OwnerResourceID != null)
                    hashCode = hashCode * 59 + OwnerResourceID.GetHashCode();
                    if (SecretKey != null)
                    hashCode = hashCode * 59 + SecretKey.GetHashCode();
                    if (SendThresholdExceededNotification != null)
                    hashCode = hashCode * 59 + SendThresholdExceededNotification.GetHashCode();
                    if (WebhookGUID != null)
                    hashCode = hashCode * 59 + WebhookGUID.GetHashCode();
                    if (WebhookUrl != null)
                    hashCode = hashCode * 59 + WebhookUrl.GetHashCode();
                    if (UserDefinedFields != null)
                    hashCode = hashCode * 59 + UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ContactWebhookModel left, ContactWebhookModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ContactWebhookModel left, ContactWebhookModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
