/*
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CurrencyModel : IEquatable<CurrencyModel>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyNegativeFormat
        /// </summary>
        [DataMember(Name="currencyNegativeFormat")]
        public string CurrencyNegativeFormat { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyPositiveFormat
        /// </summary>
        [DataMember(Name="currencyPositiveFormat")]
        public string CurrencyPositiveFormat { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DisplaySymbol
        /// </summary>
        [DataMember(Name="displaySymbol")]
        public int? DisplaySymbol { get; set; }

        /// <summary>
        /// Gets or Sets ExchangeRate
        /// </summary>
        [DataMember(Name="exchangeRate")]
        public double? ExchangeRate { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="isActive")]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets IsInternalCurrency
        /// </summary>
        [DataMember(Name="isInternalCurrency")]
        public bool? IsInternalCurrency { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedDateTime
        /// </summary>
        [DataMember(Name="lastModifiedDateTime")]
        public DateTime? LastModifiedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets UpdateResourceId
        /// </summary>
        [DataMember(Name="updateResourceId")]
        public int? UpdateResourceId { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields")]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CurrencyModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CurrencyNegativeFormat: ").Append(CurrencyNegativeFormat).Append("\n");
            sb.Append("  CurrencyPositiveFormat: ").Append(CurrencyPositiveFormat).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplaySymbol: ").Append(DisplaySymbol).Append("\n");
            sb.Append("  ExchangeRate: ").Append(ExchangeRate).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsInternalCurrency: ").Append(IsInternalCurrency).Append("\n");
            sb.Append("  LastModifiedDateTime: ").Append(LastModifiedDateTime).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  UpdateResourceId: ").Append(UpdateResourceId).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CurrencyModel)obj);
        }

        /// <summary>
        /// Returns true if CurrencyModel instances are equal
        /// </summary>
        /// <param name="other">Instance of CurrencyModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CurrencyModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    CurrencyNegativeFormat == other.CurrencyNegativeFormat ||
                    CurrencyNegativeFormat != null &&
                    CurrencyNegativeFormat.Equals(other.CurrencyNegativeFormat)
                ) && 
                (
                    CurrencyPositiveFormat == other.CurrencyPositiveFormat ||
                    CurrencyPositiveFormat != null &&
                    CurrencyPositiveFormat.Equals(other.CurrencyPositiveFormat)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    DisplaySymbol == other.DisplaySymbol ||
                    DisplaySymbol != null &&
                    DisplaySymbol.Equals(other.DisplaySymbol)
                ) && 
                (
                    ExchangeRate == other.ExchangeRate ||
                    ExchangeRate != null &&
                    ExchangeRate.Equals(other.ExchangeRate)
                ) && 
                (
                    IsActive == other.IsActive ||
                    IsActive != null &&
                    IsActive.Equals(other.IsActive)
                ) && 
                (
                    IsInternalCurrency == other.IsInternalCurrency ||
                    IsInternalCurrency != null &&
                    IsInternalCurrency.Equals(other.IsInternalCurrency)
                ) && 
                (
                    LastModifiedDateTime == other.LastModifiedDateTime ||
                    LastModifiedDateTime != null &&
                    LastModifiedDateTime.Equals(other.LastModifiedDateTime)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    UpdateResourceId == other.UpdateResourceId ||
                    UpdateResourceId != null &&
                    UpdateResourceId.Equals(other.UpdateResourceId)
                ) && 
                (
                    UserDefinedFields == other.UserDefinedFields ||
                    UserDefinedFields != null &&
                    UserDefinedFields.SequenceEqual(other.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (CurrencyNegativeFormat != null)
                    hashCode = hashCode * 59 + CurrencyNegativeFormat.GetHashCode();
                    if (CurrencyPositiveFormat != null)
                    hashCode = hashCode * 59 + CurrencyPositiveFormat.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (DisplaySymbol != null)
                    hashCode = hashCode * 59 + DisplaySymbol.GetHashCode();
                    if (ExchangeRate != null)
                    hashCode = hashCode * 59 + ExchangeRate.GetHashCode();
                    if (IsActive != null)
                    hashCode = hashCode * 59 + IsActive.GetHashCode();
                    if (IsInternalCurrency != null)
                    hashCode = hashCode * 59 + IsInternalCurrency.GetHashCode();
                    if (LastModifiedDateTime != null)
                    hashCode = hashCode * 59 + LastModifiedDateTime.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (UpdateResourceId != null)
                    hashCode = hashCode * 59 + UpdateResourceId.GetHashCode();
                    if (UserDefinedFields != null)
                    hashCode = hashCode * 59 + UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CurrencyModel left, CurrencyModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CurrencyModel left, CurrencyModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
