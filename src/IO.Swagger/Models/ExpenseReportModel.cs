/*
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ExpenseReportModel : IEquatable<ExpenseReportModel>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets AmountDue
        /// </summary>
        [DataMember(Name="amountDue")]
        public double? AmountDue { get; set; }

        /// <summary>
        /// Gets or Sets ApprovedDate
        /// </summary>
        [DataMember(Name="approvedDate")]
        public DateTime? ApprovedDate { get; set; }

        /// <summary>
        /// Gets or Sets ApproverID
        /// </summary>
        [DataMember(Name="approverID")]
        public int? ApproverID { get; set; }

        /// <summary>
        /// Gets or Sets DepartmentNumber
        /// </summary>
        [DataMember(Name="departmentNumber")]
        public string DepartmentNumber { get; set; }

        /// <summary>
        /// Gets or Sets InternalCurrencyCashAdvanceAmount
        /// </summary>
        [DataMember(Name="internalCurrencyCashAdvanceAmount")]
        public double? InternalCurrencyCashAdvanceAmount { get; set; }

        /// <summary>
        /// Gets or Sets InternalCurrencyExpenseTotal
        /// </summary>
        [DataMember(Name="internalCurrencyExpenseTotal")]
        public double? InternalCurrencyExpenseTotal { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationalLevelAssociationID
        /// </summary>
        [DataMember(Name="organizationalLevelAssociationID")]
        public int? OrganizationalLevelAssociationID { get; set; }

        /// <summary>
        /// Gets or Sets QuickBooksReferenceNumber
        /// </summary>
        [DataMember(Name="quickBooksReferenceNumber")]
        public string QuickBooksReferenceNumber { get; set; }

        /// <summary>
        /// Gets or Sets ReimbursementCurrencyAmountDue
        /// </summary>
        [DataMember(Name="reimbursementCurrencyAmountDue")]
        public double? ReimbursementCurrencyAmountDue { get; set; }

        /// <summary>
        /// Gets or Sets ReimbursementCurrencyCashAdvanceAmount
        /// </summary>
        [DataMember(Name="reimbursementCurrencyCashAdvanceAmount")]
        public double? ReimbursementCurrencyCashAdvanceAmount { get; set; }

        /// <summary>
        /// Gets or Sets ReimbursementCurrencyID
        /// </summary>
        [DataMember(Name="reimbursementCurrencyID")]
        public int? ReimbursementCurrencyID { get; set; }

        /// <summary>
        /// Gets or Sets RejectionReason
        /// </summary>
        [DataMember(Name="rejectionReason")]
        public string RejectionReason { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status")]
        public int? Status { get; set; }

        /// <summary>
        /// Gets or Sets Submit
        /// </summary>
        [DataMember(Name="submit")]
        public bool? Submit { get; set; }

        /// <summary>
        /// Gets or Sets SubmitDate
        /// </summary>
        [DataMember(Name="submitDate")]
        public DateTime? SubmitDate { get; set; }

        /// <summary>
        /// Gets or Sets SubmitterID
        /// </summary>
        [DataMember(Name="submitterID")]
        public int? SubmitterID { get; set; }

        /// <summary>
        /// Gets or Sets WeekEnding
        /// </summary>
        [DataMember(Name="weekEnding")]
        public DateTime? WeekEnding { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields")]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExpenseReportModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AmountDue: ").Append(AmountDue).Append("\n");
            sb.Append("  ApprovedDate: ").Append(ApprovedDate).Append("\n");
            sb.Append("  ApproverID: ").Append(ApproverID).Append("\n");
            sb.Append("  DepartmentNumber: ").Append(DepartmentNumber).Append("\n");
            sb.Append("  InternalCurrencyCashAdvanceAmount: ").Append(InternalCurrencyCashAdvanceAmount).Append("\n");
            sb.Append("  InternalCurrencyExpenseTotal: ").Append(InternalCurrencyExpenseTotal).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OrganizationalLevelAssociationID: ").Append(OrganizationalLevelAssociationID).Append("\n");
            sb.Append("  QuickBooksReferenceNumber: ").Append(QuickBooksReferenceNumber).Append("\n");
            sb.Append("  ReimbursementCurrencyAmountDue: ").Append(ReimbursementCurrencyAmountDue).Append("\n");
            sb.Append("  ReimbursementCurrencyCashAdvanceAmount: ").Append(ReimbursementCurrencyCashAdvanceAmount).Append("\n");
            sb.Append("  ReimbursementCurrencyID: ").Append(ReimbursementCurrencyID).Append("\n");
            sb.Append("  RejectionReason: ").Append(RejectionReason).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Submit: ").Append(Submit).Append("\n");
            sb.Append("  SubmitDate: ").Append(SubmitDate).Append("\n");
            sb.Append("  SubmitterID: ").Append(SubmitterID).Append("\n");
            sb.Append("  WeekEnding: ").Append(WeekEnding).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ExpenseReportModel)obj);
        }

        /// <summary>
        /// Returns true if ExpenseReportModel instances are equal
        /// </summary>
        /// <param name="other">Instance of ExpenseReportModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExpenseReportModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    AmountDue == other.AmountDue ||
                    AmountDue != null &&
                    AmountDue.Equals(other.AmountDue)
                ) && 
                (
                    ApprovedDate == other.ApprovedDate ||
                    ApprovedDate != null &&
                    ApprovedDate.Equals(other.ApprovedDate)
                ) && 
                (
                    ApproverID == other.ApproverID ||
                    ApproverID != null &&
                    ApproverID.Equals(other.ApproverID)
                ) && 
                (
                    DepartmentNumber == other.DepartmentNumber ||
                    DepartmentNumber != null &&
                    DepartmentNumber.Equals(other.DepartmentNumber)
                ) && 
                (
                    InternalCurrencyCashAdvanceAmount == other.InternalCurrencyCashAdvanceAmount ||
                    InternalCurrencyCashAdvanceAmount != null &&
                    InternalCurrencyCashAdvanceAmount.Equals(other.InternalCurrencyCashAdvanceAmount)
                ) && 
                (
                    InternalCurrencyExpenseTotal == other.InternalCurrencyExpenseTotal ||
                    InternalCurrencyExpenseTotal != null &&
                    InternalCurrencyExpenseTotal.Equals(other.InternalCurrencyExpenseTotal)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    OrganizationalLevelAssociationID == other.OrganizationalLevelAssociationID ||
                    OrganizationalLevelAssociationID != null &&
                    OrganizationalLevelAssociationID.Equals(other.OrganizationalLevelAssociationID)
                ) && 
                (
                    QuickBooksReferenceNumber == other.QuickBooksReferenceNumber ||
                    QuickBooksReferenceNumber != null &&
                    QuickBooksReferenceNumber.Equals(other.QuickBooksReferenceNumber)
                ) && 
                (
                    ReimbursementCurrencyAmountDue == other.ReimbursementCurrencyAmountDue ||
                    ReimbursementCurrencyAmountDue != null &&
                    ReimbursementCurrencyAmountDue.Equals(other.ReimbursementCurrencyAmountDue)
                ) && 
                (
                    ReimbursementCurrencyCashAdvanceAmount == other.ReimbursementCurrencyCashAdvanceAmount ||
                    ReimbursementCurrencyCashAdvanceAmount != null &&
                    ReimbursementCurrencyCashAdvanceAmount.Equals(other.ReimbursementCurrencyCashAdvanceAmount)
                ) && 
                (
                    ReimbursementCurrencyID == other.ReimbursementCurrencyID ||
                    ReimbursementCurrencyID != null &&
                    ReimbursementCurrencyID.Equals(other.ReimbursementCurrencyID)
                ) && 
                (
                    RejectionReason == other.RejectionReason ||
                    RejectionReason != null &&
                    RejectionReason.Equals(other.RejectionReason)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    Submit == other.Submit ||
                    Submit != null &&
                    Submit.Equals(other.Submit)
                ) && 
                (
                    SubmitDate == other.SubmitDate ||
                    SubmitDate != null &&
                    SubmitDate.Equals(other.SubmitDate)
                ) && 
                (
                    SubmitterID == other.SubmitterID ||
                    SubmitterID != null &&
                    SubmitterID.Equals(other.SubmitterID)
                ) && 
                (
                    WeekEnding == other.WeekEnding ||
                    WeekEnding != null &&
                    WeekEnding.Equals(other.WeekEnding)
                ) && 
                (
                    UserDefinedFields == other.UserDefinedFields ||
                    UserDefinedFields != null &&
                    UserDefinedFields.SequenceEqual(other.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (AmountDue != null)
                    hashCode = hashCode * 59 + AmountDue.GetHashCode();
                    if (ApprovedDate != null)
                    hashCode = hashCode * 59 + ApprovedDate.GetHashCode();
                    if (ApproverID != null)
                    hashCode = hashCode * 59 + ApproverID.GetHashCode();
                    if (DepartmentNumber != null)
                    hashCode = hashCode * 59 + DepartmentNumber.GetHashCode();
                    if (InternalCurrencyCashAdvanceAmount != null)
                    hashCode = hashCode * 59 + InternalCurrencyCashAdvanceAmount.GetHashCode();
                    if (InternalCurrencyExpenseTotal != null)
                    hashCode = hashCode * 59 + InternalCurrencyExpenseTotal.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (OrganizationalLevelAssociationID != null)
                    hashCode = hashCode * 59 + OrganizationalLevelAssociationID.GetHashCode();
                    if (QuickBooksReferenceNumber != null)
                    hashCode = hashCode * 59 + QuickBooksReferenceNumber.GetHashCode();
                    if (ReimbursementCurrencyAmountDue != null)
                    hashCode = hashCode * 59 + ReimbursementCurrencyAmountDue.GetHashCode();
                    if (ReimbursementCurrencyCashAdvanceAmount != null)
                    hashCode = hashCode * 59 + ReimbursementCurrencyCashAdvanceAmount.GetHashCode();
                    if (ReimbursementCurrencyID != null)
                    hashCode = hashCode * 59 + ReimbursementCurrencyID.GetHashCode();
                    if (RejectionReason != null)
                    hashCode = hashCode * 59 + RejectionReason.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Submit != null)
                    hashCode = hashCode * 59 + Submit.GetHashCode();
                    if (SubmitDate != null)
                    hashCode = hashCode * 59 + SubmitDate.GetHashCode();
                    if (SubmitterID != null)
                    hashCode = hashCode * 59 + SubmitterID.GetHashCode();
                    if (WeekEnding != null)
                    hashCode = hashCode * 59 + WeekEnding.GetHashCode();
                    if (UserDefinedFields != null)
                    hashCode = hashCode * 59 + UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ExpenseReportModel left, ExpenseReportModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ExpenseReportModel left, ExpenseReportModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
