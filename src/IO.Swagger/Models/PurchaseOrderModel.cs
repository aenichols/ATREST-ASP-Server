/*
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PurchaseOrderModel : IEquatable<PurchaseOrderModel>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets CancelDateTime
        /// </summary>
        [DataMember(Name="cancelDateTime")]
        public DateTime? CancelDateTime { get; set; }

        /// <summary>
        /// Gets or Sets CreateDateTime
        /// </summary>
        [DataMember(Name="createDateTime")]
        public DateTime? CreateDateTime { get; set; }

        /// <summary>
        /// Gets or Sets CreatorResourceID
        /// </summary>
        [DataMember(Name="creatorResourceID")]
        public int? CreatorResourceID { get; set; }

        /// <summary>
        /// Gets or Sets ExternalPONumber
        /// </summary>
        [DataMember(Name="externalPONumber")]
        public string ExternalPONumber { get; set; }

        /// <summary>
        /// Gets or Sets Fax
        /// </summary>
        [DataMember(Name="fax")]
        public string Fax { get; set; }

        /// <summary>
        /// Gets or Sets Freight
        /// </summary>
        [DataMember(Name="freight")]
        public double? Freight { get; set; }

        /// <summary>
        /// Gets or Sets GeneralMemo
        /// </summary>
        [DataMember(Name="generalMemo")]
        public string GeneralMemo { get; set; }

        /// <summary>
        /// Gets or Sets ImpersonatorCreatorResourceID
        /// </summary>
        [DataMember(Name="impersonatorCreatorResourceID")]
        public int? ImpersonatorCreatorResourceID { get; set; }

        /// <summary>
        /// Gets or Sets InternalCurrencyFreight
        /// </summary>
        [DataMember(Name="internalCurrencyFreight")]
        public double? InternalCurrencyFreight { get; set; }

        /// <summary>
        /// Gets or Sets LatestEstimatedArrivalDate
        /// </summary>
        [DataMember(Name="latestEstimatedArrivalDate")]
        public DateTime? LatestEstimatedArrivalDate { get; set; }

        /// <summary>
        /// Gets or Sets PaymentTerm
        /// </summary>
        [DataMember(Name="paymentTerm")]
        public int? PaymentTerm { get; set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name="phone")]
        public string Phone { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseForCompanyID
        /// </summary>
        [DataMember(Name="purchaseForCompanyID")]
        public int? PurchaseForCompanyID { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseOrderNumber
        /// </summary>
        [DataMember(Name="purchaseOrderNumber")]
        public string PurchaseOrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseOrderTemplateID
        /// </summary>
        [DataMember(Name="purchaseOrderTemplateID")]
        public int? PurchaseOrderTemplateID { get; set; }

        /// <summary>
        /// Gets or Sets ShippingDate
        /// </summary>
        [DataMember(Name="shippingDate")]
        public DateTime? ShippingDate { get; set; }

        /// <summary>
        /// Gets or Sets ShippingType
        /// </summary>
        [DataMember(Name="shippingType")]
        public int? ShippingType { get; set; }

        /// <summary>
        /// Gets or Sets ShipToAddress1
        /// </summary>
        [DataMember(Name="shipToAddress1")]
        public string ShipToAddress1 { get; set; }

        /// <summary>
        /// Gets or Sets ShipToAddress2
        /// </summary>
        [DataMember(Name="shipToAddress2")]
        public string ShipToAddress2 { get; set; }

        /// <summary>
        /// Gets or Sets ShipToCity
        /// </summary>
        [DataMember(Name="shipToCity")]
        public string ShipToCity { get; set; }

        /// <summary>
        /// Gets or Sets ShipToName
        /// </summary>
        [DataMember(Name="shipToName")]
        public string ShipToName { get; set; }

        /// <summary>
        /// Gets or Sets ShipToPostalCode
        /// </summary>
        [DataMember(Name="shipToPostalCode")]
        public string ShipToPostalCode { get; set; }

        /// <summary>
        /// Gets or Sets ShipToState
        /// </summary>
        [DataMember(Name="shipToState")]
        public string ShipToState { get; set; }

        /// <summary>
        /// Gets or Sets ShowEachTaxInGroup
        /// </summary>
        [DataMember(Name="showEachTaxInGroup")]
        public bool? ShowEachTaxInGroup { get; set; }

        /// <summary>
        /// Gets or Sets ShowTaxCategory
        /// </summary>
        [DataMember(Name="showTaxCategory")]
        public bool? ShowTaxCategory { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status")]
        public int? Status { get; set; }

        /// <summary>
        /// Gets or Sets SubmitDateTime
        /// </summary>
        [DataMember(Name="submitDateTime")]
        public DateTime? SubmitDateTime { get; set; }

        /// <summary>
        /// Gets or Sets TaxRegionID
        /// </summary>
        [DataMember(Name="taxRegionID")]
        public int? TaxRegionID { get; set; }

        /// <summary>
        /// Gets or Sets UseItemDescriptionsFrom
        /// </summary>
        [DataMember(Name="useItemDescriptionsFrom")]
        public int? UseItemDescriptionsFrom { get; set; }

        /// <summary>
        /// Gets or Sets VendorID
        /// </summary>
        [DataMember(Name="vendorID")]
        public int? VendorID { get; set; }

        /// <summary>
        /// Gets or Sets VendorInvoiceNumber
        /// </summary>
        [DataMember(Name="vendorInvoiceNumber")]
        public string VendorInvoiceNumber { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields")]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PurchaseOrderModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CancelDateTime: ").Append(CancelDateTime).Append("\n");
            sb.Append("  CreateDateTime: ").Append(CreateDateTime).Append("\n");
            sb.Append("  CreatorResourceID: ").Append(CreatorResourceID).Append("\n");
            sb.Append("  ExternalPONumber: ").Append(ExternalPONumber).Append("\n");
            sb.Append("  Fax: ").Append(Fax).Append("\n");
            sb.Append("  Freight: ").Append(Freight).Append("\n");
            sb.Append("  GeneralMemo: ").Append(GeneralMemo).Append("\n");
            sb.Append("  ImpersonatorCreatorResourceID: ").Append(ImpersonatorCreatorResourceID).Append("\n");
            sb.Append("  InternalCurrencyFreight: ").Append(InternalCurrencyFreight).Append("\n");
            sb.Append("  LatestEstimatedArrivalDate: ").Append(LatestEstimatedArrivalDate).Append("\n");
            sb.Append("  PaymentTerm: ").Append(PaymentTerm).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  PurchaseForCompanyID: ").Append(PurchaseForCompanyID).Append("\n");
            sb.Append("  PurchaseOrderNumber: ").Append(PurchaseOrderNumber).Append("\n");
            sb.Append("  PurchaseOrderTemplateID: ").Append(PurchaseOrderTemplateID).Append("\n");
            sb.Append("  ShippingDate: ").Append(ShippingDate).Append("\n");
            sb.Append("  ShippingType: ").Append(ShippingType).Append("\n");
            sb.Append("  ShipToAddress1: ").Append(ShipToAddress1).Append("\n");
            sb.Append("  ShipToAddress2: ").Append(ShipToAddress2).Append("\n");
            sb.Append("  ShipToCity: ").Append(ShipToCity).Append("\n");
            sb.Append("  ShipToName: ").Append(ShipToName).Append("\n");
            sb.Append("  ShipToPostalCode: ").Append(ShipToPostalCode).Append("\n");
            sb.Append("  ShipToState: ").Append(ShipToState).Append("\n");
            sb.Append("  ShowEachTaxInGroup: ").Append(ShowEachTaxInGroup).Append("\n");
            sb.Append("  ShowTaxCategory: ").Append(ShowTaxCategory).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SubmitDateTime: ").Append(SubmitDateTime).Append("\n");
            sb.Append("  TaxRegionID: ").Append(TaxRegionID).Append("\n");
            sb.Append("  UseItemDescriptionsFrom: ").Append(UseItemDescriptionsFrom).Append("\n");
            sb.Append("  VendorID: ").Append(VendorID).Append("\n");
            sb.Append("  VendorInvoiceNumber: ").Append(VendorInvoiceNumber).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PurchaseOrderModel)obj);
        }

        /// <summary>
        /// Returns true if PurchaseOrderModel instances are equal
        /// </summary>
        /// <param name="other">Instance of PurchaseOrderModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PurchaseOrderModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    CancelDateTime == other.CancelDateTime ||
                    CancelDateTime != null &&
                    CancelDateTime.Equals(other.CancelDateTime)
                ) && 
                (
                    CreateDateTime == other.CreateDateTime ||
                    CreateDateTime != null &&
                    CreateDateTime.Equals(other.CreateDateTime)
                ) && 
                (
                    CreatorResourceID == other.CreatorResourceID ||
                    CreatorResourceID != null &&
                    CreatorResourceID.Equals(other.CreatorResourceID)
                ) && 
                (
                    ExternalPONumber == other.ExternalPONumber ||
                    ExternalPONumber != null &&
                    ExternalPONumber.Equals(other.ExternalPONumber)
                ) && 
                (
                    Fax == other.Fax ||
                    Fax != null &&
                    Fax.Equals(other.Fax)
                ) && 
                (
                    Freight == other.Freight ||
                    Freight != null &&
                    Freight.Equals(other.Freight)
                ) && 
                (
                    GeneralMemo == other.GeneralMemo ||
                    GeneralMemo != null &&
                    GeneralMemo.Equals(other.GeneralMemo)
                ) && 
                (
                    ImpersonatorCreatorResourceID == other.ImpersonatorCreatorResourceID ||
                    ImpersonatorCreatorResourceID != null &&
                    ImpersonatorCreatorResourceID.Equals(other.ImpersonatorCreatorResourceID)
                ) && 
                (
                    InternalCurrencyFreight == other.InternalCurrencyFreight ||
                    InternalCurrencyFreight != null &&
                    InternalCurrencyFreight.Equals(other.InternalCurrencyFreight)
                ) && 
                (
                    LatestEstimatedArrivalDate == other.LatestEstimatedArrivalDate ||
                    LatestEstimatedArrivalDate != null &&
                    LatestEstimatedArrivalDate.Equals(other.LatestEstimatedArrivalDate)
                ) && 
                (
                    PaymentTerm == other.PaymentTerm ||
                    PaymentTerm != null &&
                    PaymentTerm.Equals(other.PaymentTerm)
                ) && 
                (
                    Phone == other.Phone ||
                    Phone != null &&
                    Phone.Equals(other.Phone)
                ) && 
                (
                    PurchaseForCompanyID == other.PurchaseForCompanyID ||
                    PurchaseForCompanyID != null &&
                    PurchaseForCompanyID.Equals(other.PurchaseForCompanyID)
                ) && 
                (
                    PurchaseOrderNumber == other.PurchaseOrderNumber ||
                    PurchaseOrderNumber != null &&
                    PurchaseOrderNumber.Equals(other.PurchaseOrderNumber)
                ) && 
                (
                    PurchaseOrderTemplateID == other.PurchaseOrderTemplateID ||
                    PurchaseOrderTemplateID != null &&
                    PurchaseOrderTemplateID.Equals(other.PurchaseOrderTemplateID)
                ) && 
                (
                    ShippingDate == other.ShippingDate ||
                    ShippingDate != null &&
                    ShippingDate.Equals(other.ShippingDate)
                ) && 
                (
                    ShippingType == other.ShippingType ||
                    ShippingType != null &&
                    ShippingType.Equals(other.ShippingType)
                ) && 
                (
                    ShipToAddress1 == other.ShipToAddress1 ||
                    ShipToAddress1 != null &&
                    ShipToAddress1.Equals(other.ShipToAddress1)
                ) && 
                (
                    ShipToAddress2 == other.ShipToAddress2 ||
                    ShipToAddress2 != null &&
                    ShipToAddress2.Equals(other.ShipToAddress2)
                ) && 
                (
                    ShipToCity == other.ShipToCity ||
                    ShipToCity != null &&
                    ShipToCity.Equals(other.ShipToCity)
                ) && 
                (
                    ShipToName == other.ShipToName ||
                    ShipToName != null &&
                    ShipToName.Equals(other.ShipToName)
                ) && 
                (
                    ShipToPostalCode == other.ShipToPostalCode ||
                    ShipToPostalCode != null &&
                    ShipToPostalCode.Equals(other.ShipToPostalCode)
                ) && 
                (
                    ShipToState == other.ShipToState ||
                    ShipToState != null &&
                    ShipToState.Equals(other.ShipToState)
                ) && 
                (
                    ShowEachTaxInGroup == other.ShowEachTaxInGroup ||
                    ShowEachTaxInGroup != null &&
                    ShowEachTaxInGroup.Equals(other.ShowEachTaxInGroup)
                ) && 
                (
                    ShowTaxCategory == other.ShowTaxCategory ||
                    ShowTaxCategory != null &&
                    ShowTaxCategory.Equals(other.ShowTaxCategory)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    SubmitDateTime == other.SubmitDateTime ||
                    SubmitDateTime != null &&
                    SubmitDateTime.Equals(other.SubmitDateTime)
                ) && 
                (
                    TaxRegionID == other.TaxRegionID ||
                    TaxRegionID != null &&
                    TaxRegionID.Equals(other.TaxRegionID)
                ) && 
                (
                    UseItemDescriptionsFrom == other.UseItemDescriptionsFrom ||
                    UseItemDescriptionsFrom != null &&
                    UseItemDescriptionsFrom.Equals(other.UseItemDescriptionsFrom)
                ) && 
                (
                    VendorID == other.VendorID ||
                    VendorID != null &&
                    VendorID.Equals(other.VendorID)
                ) && 
                (
                    VendorInvoiceNumber == other.VendorInvoiceNumber ||
                    VendorInvoiceNumber != null &&
                    VendorInvoiceNumber.Equals(other.VendorInvoiceNumber)
                ) && 
                (
                    UserDefinedFields == other.UserDefinedFields ||
                    UserDefinedFields != null &&
                    UserDefinedFields.SequenceEqual(other.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (CancelDateTime != null)
                    hashCode = hashCode * 59 + CancelDateTime.GetHashCode();
                    if (CreateDateTime != null)
                    hashCode = hashCode * 59 + CreateDateTime.GetHashCode();
                    if (CreatorResourceID != null)
                    hashCode = hashCode * 59 + CreatorResourceID.GetHashCode();
                    if (ExternalPONumber != null)
                    hashCode = hashCode * 59 + ExternalPONumber.GetHashCode();
                    if (Fax != null)
                    hashCode = hashCode * 59 + Fax.GetHashCode();
                    if (Freight != null)
                    hashCode = hashCode * 59 + Freight.GetHashCode();
                    if (GeneralMemo != null)
                    hashCode = hashCode * 59 + GeneralMemo.GetHashCode();
                    if (ImpersonatorCreatorResourceID != null)
                    hashCode = hashCode * 59 + ImpersonatorCreatorResourceID.GetHashCode();
                    if (InternalCurrencyFreight != null)
                    hashCode = hashCode * 59 + InternalCurrencyFreight.GetHashCode();
                    if (LatestEstimatedArrivalDate != null)
                    hashCode = hashCode * 59 + LatestEstimatedArrivalDate.GetHashCode();
                    if (PaymentTerm != null)
                    hashCode = hashCode * 59 + PaymentTerm.GetHashCode();
                    if (Phone != null)
                    hashCode = hashCode * 59 + Phone.GetHashCode();
                    if (PurchaseForCompanyID != null)
                    hashCode = hashCode * 59 + PurchaseForCompanyID.GetHashCode();
                    if (PurchaseOrderNumber != null)
                    hashCode = hashCode * 59 + PurchaseOrderNumber.GetHashCode();
                    if (PurchaseOrderTemplateID != null)
                    hashCode = hashCode * 59 + PurchaseOrderTemplateID.GetHashCode();
                    if (ShippingDate != null)
                    hashCode = hashCode * 59 + ShippingDate.GetHashCode();
                    if (ShippingType != null)
                    hashCode = hashCode * 59 + ShippingType.GetHashCode();
                    if (ShipToAddress1 != null)
                    hashCode = hashCode * 59 + ShipToAddress1.GetHashCode();
                    if (ShipToAddress2 != null)
                    hashCode = hashCode * 59 + ShipToAddress2.GetHashCode();
                    if (ShipToCity != null)
                    hashCode = hashCode * 59 + ShipToCity.GetHashCode();
                    if (ShipToName != null)
                    hashCode = hashCode * 59 + ShipToName.GetHashCode();
                    if (ShipToPostalCode != null)
                    hashCode = hashCode * 59 + ShipToPostalCode.GetHashCode();
                    if (ShipToState != null)
                    hashCode = hashCode * 59 + ShipToState.GetHashCode();
                    if (ShowEachTaxInGroup != null)
                    hashCode = hashCode * 59 + ShowEachTaxInGroup.GetHashCode();
                    if (ShowTaxCategory != null)
                    hashCode = hashCode * 59 + ShowTaxCategory.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (SubmitDateTime != null)
                    hashCode = hashCode * 59 + SubmitDateTime.GetHashCode();
                    if (TaxRegionID != null)
                    hashCode = hashCode * 59 + TaxRegionID.GetHashCode();
                    if (UseItemDescriptionsFrom != null)
                    hashCode = hashCode * 59 + UseItemDescriptionsFrom.GetHashCode();
                    if (VendorID != null)
                    hashCode = hashCode * 59 + VendorID.GetHashCode();
                    if (VendorInvoiceNumber != null)
                    hashCode = hashCode * 59 + VendorInvoiceNumber.GetHashCode();
                    if (UserDefinedFields != null)
                    hashCode = hashCode * 59 + UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PurchaseOrderModel left, PurchaseOrderModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PurchaseOrderModel left, PurchaseOrderModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
