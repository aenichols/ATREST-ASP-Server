/*
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InventoryItemModel : IEquatable<InventoryItemModel>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets BackOrderQuantity
        /// </summary>
        [DataMember(Name="backOrderQuantity")]
        public int? BackOrderQuantity { get; set; }

        /// <summary>
        /// Gets or Sets Bin
        /// </summary>
        [DataMember(Name="bin")]
        public string Bin { get; set; }

        /// <summary>
        /// Gets or Sets ImpersonatorCreatorResourceID
        /// </summary>
        [DataMember(Name="impersonatorCreatorResourceID")]
        public int? ImpersonatorCreatorResourceID { get; set; }

        /// <summary>
        /// Gets or Sets InventoryLocationID
        /// </summary>
        [DataMember(Name="inventoryLocationID")]
        public int? InventoryLocationID { get; set; }

        /// <summary>
        /// Gets or Sets ProductID
        /// </summary>
        [DataMember(Name="productID")]
        public int? ProductID { get; set; }

        /// <summary>
        /// Gets or Sets QuantityMaximum
        /// </summary>
        [DataMember(Name="quantityMaximum")]
        public int? QuantityMaximum { get; set; }

        /// <summary>
        /// Gets or Sets QuantityMinimum
        /// </summary>
        [DataMember(Name="quantityMinimum")]
        public int? QuantityMinimum { get; set; }

        /// <summary>
        /// Gets or Sets QuantityOnHand
        /// </summary>
        [DataMember(Name="quantityOnHand")]
        public int? QuantityOnHand { get; set; }

        /// <summary>
        /// Gets or Sets QuantityOnOrder
        /// </summary>
        [DataMember(Name="quantityOnOrder")]
        public int? QuantityOnOrder { get; set; }

        /// <summary>
        /// Gets or Sets QuantityPicked
        /// </summary>
        [DataMember(Name="quantityPicked")]
        public int? QuantityPicked { get; set; }

        /// <summary>
        /// Gets or Sets QuantityReserved
        /// </summary>
        [DataMember(Name="quantityReserved")]
        public int? QuantityReserved { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceNumber
        /// </summary>
        [DataMember(Name="referenceNumber")]
        public string ReferenceNumber { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields")]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InventoryItemModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BackOrderQuantity: ").Append(BackOrderQuantity).Append("\n");
            sb.Append("  Bin: ").Append(Bin).Append("\n");
            sb.Append("  ImpersonatorCreatorResourceID: ").Append(ImpersonatorCreatorResourceID).Append("\n");
            sb.Append("  InventoryLocationID: ").Append(InventoryLocationID).Append("\n");
            sb.Append("  ProductID: ").Append(ProductID).Append("\n");
            sb.Append("  QuantityMaximum: ").Append(QuantityMaximum).Append("\n");
            sb.Append("  QuantityMinimum: ").Append(QuantityMinimum).Append("\n");
            sb.Append("  QuantityOnHand: ").Append(QuantityOnHand).Append("\n");
            sb.Append("  QuantityOnOrder: ").Append(QuantityOnOrder).Append("\n");
            sb.Append("  QuantityPicked: ").Append(QuantityPicked).Append("\n");
            sb.Append("  QuantityReserved: ").Append(QuantityReserved).Append("\n");
            sb.Append("  ReferenceNumber: ").Append(ReferenceNumber).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InventoryItemModel)obj);
        }

        /// <summary>
        /// Returns true if InventoryItemModel instances are equal
        /// </summary>
        /// <param name="other">Instance of InventoryItemModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InventoryItemModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    BackOrderQuantity == other.BackOrderQuantity ||
                    BackOrderQuantity != null &&
                    BackOrderQuantity.Equals(other.BackOrderQuantity)
                ) && 
                (
                    Bin == other.Bin ||
                    Bin != null &&
                    Bin.Equals(other.Bin)
                ) && 
                (
                    ImpersonatorCreatorResourceID == other.ImpersonatorCreatorResourceID ||
                    ImpersonatorCreatorResourceID != null &&
                    ImpersonatorCreatorResourceID.Equals(other.ImpersonatorCreatorResourceID)
                ) && 
                (
                    InventoryLocationID == other.InventoryLocationID ||
                    InventoryLocationID != null &&
                    InventoryLocationID.Equals(other.InventoryLocationID)
                ) && 
                (
                    ProductID == other.ProductID ||
                    ProductID != null &&
                    ProductID.Equals(other.ProductID)
                ) && 
                (
                    QuantityMaximum == other.QuantityMaximum ||
                    QuantityMaximum != null &&
                    QuantityMaximum.Equals(other.QuantityMaximum)
                ) && 
                (
                    QuantityMinimum == other.QuantityMinimum ||
                    QuantityMinimum != null &&
                    QuantityMinimum.Equals(other.QuantityMinimum)
                ) && 
                (
                    QuantityOnHand == other.QuantityOnHand ||
                    QuantityOnHand != null &&
                    QuantityOnHand.Equals(other.QuantityOnHand)
                ) && 
                (
                    QuantityOnOrder == other.QuantityOnOrder ||
                    QuantityOnOrder != null &&
                    QuantityOnOrder.Equals(other.QuantityOnOrder)
                ) && 
                (
                    QuantityPicked == other.QuantityPicked ||
                    QuantityPicked != null &&
                    QuantityPicked.Equals(other.QuantityPicked)
                ) && 
                (
                    QuantityReserved == other.QuantityReserved ||
                    QuantityReserved != null &&
                    QuantityReserved.Equals(other.QuantityReserved)
                ) && 
                (
                    ReferenceNumber == other.ReferenceNumber ||
                    ReferenceNumber != null &&
                    ReferenceNumber.Equals(other.ReferenceNumber)
                ) && 
                (
                    UserDefinedFields == other.UserDefinedFields ||
                    UserDefinedFields != null &&
                    UserDefinedFields.SequenceEqual(other.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (BackOrderQuantity != null)
                    hashCode = hashCode * 59 + BackOrderQuantity.GetHashCode();
                    if (Bin != null)
                    hashCode = hashCode * 59 + Bin.GetHashCode();
                    if (ImpersonatorCreatorResourceID != null)
                    hashCode = hashCode * 59 + ImpersonatorCreatorResourceID.GetHashCode();
                    if (InventoryLocationID != null)
                    hashCode = hashCode * 59 + InventoryLocationID.GetHashCode();
                    if (ProductID != null)
                    hashCode = hashCode * 59 + ProductID.GetHashCode();
                    if (QuantityMaximum != null)
                    hashCode = hashCode * 59 + QuantityMaximum.GetHashCode();
                    if (QuantityMinimum != null)
                    hashCode = hashCode * 59 + QuantityMinimum.GetHashCode();
                    if (QuantityOnHand != null)
                    hashCode = hashCode * 59 + QuantityOnHand.GetHashCode();
                    if (QuantityOnOrder != null)
                    hashCode = hashCode * 59 + QuantityOnOrder.GetHashCode();
                    if (QuantityPicked != null)
                    hashCode = hashCode * 59 + QuantityPicked.GetHashCode();
                    if (QuantityReserved != null)
                    hashCode = hashCode * 59 + QuantityReserved.GetHashCode();
                    if (ReferenceNumber != null)
                    hashCode = hashCode * 59 + ReferenceNumber.GetHashCode();
                    if (UserDefinedFields != null)
                    hashCode = hashCode * 59 + UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InventoryItemModel left, InventoryItemModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InventoryItemModel left, InventoryItemModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
