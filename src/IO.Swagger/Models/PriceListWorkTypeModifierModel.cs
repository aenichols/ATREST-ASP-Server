/*
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PriceListWorkTypeModifierModel : IEquatable<PriceListWorkTypeModifierModel>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyID
        /// </summary>
        [DataMember(Name="currencyID")]
        public int? CurrencyID { get; set; }

        /// <summary>
        /// Gets or Sets ModifierType
        /// </summary>
        [DataMember(Name="modifierType")]
        public int? ModifierType { get; set; }

        /// <summary>
        /// Gets or Sets ModifierValue
        /// </summary>
        [DataMember(Name="modifierValue")]
        public double? ModifierValue { get; set; }

        /// <summary>
        /// Gets or Sets UsesInternalCurrencyPrice
        /// </summary>
        [DataMember(Name="usesInternalCurrencyPrice")]
        public bool? UsesInternalCurrencyPrice { get; set; }

        /// <summary>
        /// Gets or Sets WorkTypeModifierID
        /// </summary>
        [DataMember(Name="workTypeModifierID")]
        public int? WorkTypeModifierID { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields")]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PriceListWorkTypeModifierModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CurrencyID: ").Append(CurrencyID).Append("\n");
            sb.Append("  ModifierType: ").Append(ModifierType).Append("\n");
            sb.Append("  ModifierValue: ").Append(ModifierValue).Append("\n");
            sb.Append("  UsesInternalCurrencyPrice: ").Append(UsesInternalCurrencyPrice).Append("\n");
            sb.Append("  WorkTypeModifierID: ").Append(WorkTypeModifierID).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PriceListWorkTypeModifierModel)obj);
        }

        /// <summary>
        /// Returns true if PriceListWorkTypeModifierModel instances are equal
        /// </summary>
        /// <param name="other">Instance of PriceListWorkTypeModifierModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PriceListWorkTypeModifierModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    CurrencyID == other.CurrencyID ||
                    CurrencyID != null &&
                    CurrencyID.Equals(other.CurrencyID)
                ) && 
                (
                    ModifierType == other.ModifierType ||
                    ModifierType != null &&
                    ModifierType.Equals(other.ModifierType)
                ) && 
                (
                    ModifierValue == other.ModifierValue ||
                    ModifierValue != null &&
                    ModifierValue.Equals(other.ModifierValue)
                ) && 
                (
                    UsesInternalCurrencyPrice == other.UsesInternalCurrencyPrice ||
                    UsesInternalCurrencyPrice != null &&
                    UsesInternalCurrencyPrice.Equals(other.UsesInternalCurrencyPrice)
                ) && 
                (
                    WorkTypeModifierID == other.WorkTypeModifierID ||
                    WorkTypeModifierID != null &&
                    WorkTypeModifierID.Equals(other.WorkTypeModifierID)
                ) && 
                (
                    UserDefinedFields == other.UserDefinedFields ||
                    UserDefinedFields != null &&
                    UserDefinedFields.SequenceEqual(other.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (CurrencyID != null)
                    hashCode = hashCode * 59 + CurrencyID.GetHashCode();
                    if (ModifierType != null)
                    hashCode = hashCode * 59 + ModifierType.GetHashCode();
                    if (ModifierValue != null)
                    hashCode = hashCode * 59 + ModifierValue.GetHashCode();
                    if (UsesInternalCurrencyPrice != null)
                    hashCode = hashCode * 59 + UsesInternalCurrencyPrice.GetHashCode();
                    if (WorkTypeModifierID != null)
                    hashCode = hashCode * 59 + WorkTypeModifierID.GetHashCode();
                    if (UserDefinedFields != null)
                    hashCode = hashCode * 59 + UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PriceListWorkTypeModifierModel left, PriceListWorkTypeModifierModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PriceListWorkTypeModifierModel left, PriceListWorkTypeModifierModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
