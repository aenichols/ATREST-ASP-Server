/*
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class TicketCategoryFieldDefaultsModel : IEquatable<TicketCategoryFieldDefaultsModel>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets EstimatedHours
        /// </summary>
        [DataMember(Name="estimatedHours")]
        public double? EstimatedHours { get; set; }

        /// <summary>
        /// Gets or Sets IssueTypeID
        /// </summary>
        [DataMember(Name="issueTypeID")]
        public int? IssueTypeID { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationalLevelAssociationID
        /// </summary>
        [DataMember(Name="organizationalLevelAssociationID")]
        public int? OrganizationalLevelAssociationID { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name="priority")]
        public int? Priority { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseOrderNumber
        /// </summary>
        [DataMember(Name="purchaseOrderNumber")]
        public string PurchaseOrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets QueueID
        /// </summary>
        [DataMember(Name="queueID")]
        public int? QueueID { get; set; }

        /// <summary>
        /// Gets or Sets Resolution
        /// </summary>
        [DataMember(Name="resolution")]
        public string Resolution { get; set; }

        /// <summary>
        /// Gets or Sets ServiceLevelAgreementID
        /// </summary>
        [DataMember(Name="serviceLevelAgreementID")]
        public int? ServiceLevelAgreementID { get; set; }

        /// <summary>
        /// Gets or Sets SourceID
        /// </summary>
        [DataMember(Name="sourceID")]
        public int? SourceID { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status")]
        public int? Status { get; set; }

        /// <summary>
        /// Gets or Sets SubIssueTypeID
        /// </summary>
        [DataMember(Name="subIssueTypeID")]
        public int? SubIssueTypeID { get; set; }

        /// <summary>
        /// Gets or Sets TicketCategoryID
        /// </summary>
        [DataMember(Name="ticketCategoryID")]
        public int? TicketCategoryID { get; set; }

        /// <summary>
        /// Gets or Sets TicketTypeID
        /// </summary>
        [DataMember(Name="ticketTypeID")]
        public int? TicketTypeID { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title")]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets WorkTypeID
        /// </summary>
        [DataMember(Name="workTypeID")]
        public int? WorkTypeID { get; set; }

        /// <summary>
        /// Gets or Sets SoapParentPropertyId
        /// </summary>
        [DataMember(Name="soapParentPropertyId")]
        public long? SoapParentPropertyId { get; private set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields")]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TicketCategoryFieldDefaultsModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EstimatedHours: ").Append(EstimatedHours).Append("\n");
            sb.Append("  IssueTypeID: ").Append(IssueTypeID).Append("\n");
            sb.Append("  OrganizationalLevelAssociationID: ").Append(OrganizationalLevelAssociationID).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  PurchaseOrderNumber: ").Append(PurchaseOrderNumber).Append("\n");
            sb.Append("  QueueID: ").Append(QueueID).Append("\n");
            sb.Append("  Resolution: ").Append(Resolution).Append("\n");
            sb.Append("  ServiceLevelAgreementID: ").Append(ServiceLevelAgreementID).Append("\n");
            sb.Append("  SourceID: ").Append(SourceID).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SubIssueTypeID: ").Append(SubIssueTypeID).Append("\n");
            sb.Append("  TicketCategoryID: ").Append(TicketCategoryID).Append("\n");
            sb.Append("  TicketTypeID: ").Append(TicketTypeID).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  WorkTypeID: ").Append(WorkTypeID).Append("\n");
            sb.Append("  SoapParentPropertyId: ").Append(SoapParentPropertyId).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TicketCategoryFieldDefaultsModel)obj);
        }

        /// <summary>
        /// Returns true if TicketCategoryFieldDefaultsModel instances are equal
        /// </summary>
        /// <param name="other">Instance of TicketCategoryFieldDefaultsModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TicketCategoryFieldDefaultsModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    EstimatedHours == other.EstimatedHours ||
                    EstimatedHours != null &&
                    EstimatedHours.Equals(other.EstimatedHours)
                ) && 
                (
                    IssueTypeID == other.IssueTypeID ||
                    IssueTypeID != null &&
                    IssueTypeID.Equals(other.IssueTypeID)
                ) && 
                (
                    OrganizationalLevelAssociationID == other.OrganizationalLevelAssociationID ||
                    OrganizationalLevelAssociationID != null &&
                    OrganizationalLevelAssociationID.Equals(other.OrganizationalLevelAssociationID)
                ) && 
                (
                    Priority == other.Priority ||
                    Priority != null &&
                    Priority.Equals(other.Priority)
                ) && 
                (
                    PurchaseOrderNumber == other.PurchaseOrderNumber ||
                    PurchaseOrderNumber != null &&
                    PurchaseOrderNumber.Equals(other.PurchaseOrderNumber)
                ) && 
                (
                    QueueID == other.QueueID ||
                    QueueID != null &&
                    QueueID.Equals(other.QueueID)
                ) && 
                (
                    Resolution == other.Resolution ||
                    Resolution != null &&
                    Resolution.Equals(other.Resolution)
                ) && 
                (
                    ServiceLevelAgreementID == other.ServiceLevelAgreementID ||
                    ServiceLevelAgreementID != null &&
                    ServiceLevelAgreementID.Equals(other.ServiceLevelAgreementID)
                ) && 
                (
                    SourceID == other.SourceID ||
                    SourceID != null &&
                    SourceID.Equals(other.SourceID)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    SubIssueTypeID == other.SubIssueTypeID ||
                    SubIssueTypeID != null &&
                    SubIssueTypeID.Equals(other.SubIssueTypeID)
                ) && 
                (
                    TicketCategoryID == other.TicketCategoryID ||
                    TicketCategoryID != null &&
                    TicketCategoryID.Equals(other.TicketCategoryID)
                ) && 
                (
                    TicketTypeID == other.TicketTypeID ||
                    TicketTypeID != null &&
                    TicketTypeID.Equals(other.TicketTypeID)
                ) && 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                ) && 
                (
                    WorkTypeID == other.WorkTypeID ||
                    WorkTypeID != null &&
                    WorkTypeID.Equals(other.WorkTypeID)
                ) && 
                (
                    SoapParentPropertyId == other.SoapParentPropertyId ||
                    SoapParentPropertyId != null &&
                    SoapParentPropertyId.Equals(other.SoapParentPropertyId)
                ) && 
                (
                    UserDefinedFields == other.UserDefinedFields ||
                    UserDefinedFields != null &&
                    UserDefinedFields.SequenceEqual(other.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (EstimatedHours != null)
                    hashCode = hashCode * 59 + EstimatedHours.GetHashCode();
                    if (IssueTypeID != null)
                    hashCode = hashCode * 59 + IssueTypeID.GetHashCode();
                    if (OrganizationalLevelAssociationID != null)
                    hashCode = hashCode * 59 + OrganizationalLevelAssociationID.GetHashCode();
                    if (Priority != null)
                    hashCode = hashCode * 59 + Priority.GetHashCode();
                    if (PurchaseOrderNumber != null)
                    hashCode = hashCode * 59 + PurchaseOrderNumber.GetHashCode();
                    if (QueueID != null)
                    hashCode = hashCode * 59 + QueueID.GetHashCode();
                    if (Resolution != null)
                    hashCode = hashCode * 59 + Resolution.GetHashCode();
                    if (ServiceLevelAgreementID != null)
                    hashCode = hashCode * 59 + ServiceLevelAgreementID.GetHashCode();
                    if (SourceID != null)
                    hashCode = hashCode * 59 + SourceID.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (SubIssueTypeID != null)
                    hashCode = hashCode * 59 + SubIssueTypeID.GetHashCode();
                    if (TicketCategoryID != null)
                    hashCode = hashCode * 59 + TicketCategoryID.GetHashCode();
                    if (TicketTypeID != null)
                    hashCode = hashCode * 59 + TicketTypeID.GetHashCode();
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    if (WorkTypeID != null)
                    hashCode = hashCode * 59 + WorkTypeID.GetHashCode();
                    if (SoapParentPropertyId != null)
                    hashCode = hashCode * 59 + SoapParentPropertyId.GetHashCode();
                    if (UserDefinedFields != null)
                    hashCode = hashCode * 59 + UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TicketCategoryFieldDefaultsModel left, TicketCategoryFieldDefaultsModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TicketCategoryFieldDefaultsModel left, TicketCategoryFieldDefaultsModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
