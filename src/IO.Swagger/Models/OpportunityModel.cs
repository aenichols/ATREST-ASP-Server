/*
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OpportunityModel : IEquatable<OpportunityModel>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets AdvancedField1
        /// </summary>
        [DataMember(Name="advancedField1")]
        public double? AdvancedField1 { get; set; }

        /// <summary>
        /// Gets or Sets AdvancedField2
        /// </summary>
        [DataMember(Name="advancedField2")]
        public double? AdvancedField2 { get; set; }

        /// <summary>
        /// Gets or Sets AdvancedField3
        /// </summary>
        [DataMember(Name="advancedField3")]
        public double? AdvancedField3 { get; set; }

        /// <summary>
        /// Gets or Sets AdvancedField4
        /// </summary>
        [DataMember(Name="advancedField4")]
        public double? AdvancedField4 { get; set; }

        /// <summary>
        /// Gets or Sets AdvancedField5
        /// </summary>
        [DataMember(Name="advancedField5")]
        public double? AdvancedField5 { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount")]
        public double? Amount { get; set; }

        /// <summary>
        /// Gets or Sets AssessmentScore
        /// </summary>
        [DataMember(Name="assessmentScore")]
        public double? AssessmentScore { get; set; }

        /// <summary>
        /// Gets or Sets Barriers
        /// </summary>
        [DataMember(Name="barriers")]
        public string Barriers { get; set; }

        /// <summary>
        /// Gets or Sets ClosedDate
        /// </summary>
        [DataMember(Name="closedDate")]
        public DateTime? ClosedDate { get; set; }

        /// <summary>
        /// Gets or Sets CompanyID
        /// </summary>
        [DataMember(Name="companyID")]
        public int? CompanyID { get; set; }

        /// <summary>
        /// Gets or Sets ContactID
        /// </summary>
        [DataMember(Name="contactID")]
        public int? ContactID { get; set; }

        /// <summary>
        /// Gets or Sets Cost
        /// </summary>
        [DataMember(Name="cost")]
        public double? Cost { get; set; }

        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="createDate")]
        public DateTime? CreateDate { get; set; }

        /// <summary>
        /// Gets or Sets CreatorResourceID
        /// </summary>
        [DataMember(Name="creatorResourceID")]
        public int? CreatorResourceID { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets HelpNeeded
        /// </summary>
        [DataMember(Name="helpNeeded")]
        public string HelpNeeded { get; set; }

        /// <summary>
        /// Gets or Sets ImpersonatorCreatorResourceID
        /// </summary>
        [DataMember(Name="impersonatorCreatorResourceID")]
        public int? ImpersonatorCreatorResourceID { get; set; }

        /// <summary>
        /// Gets or Sets LastActivity
        /// </summary>
        [DataMember(Name="lastActivity")]
        public DateTime? LastActivity { get; set; }

        /// <summary>
        /// Gets or Sets LeadSource
        /// </summary>
        [DataMember(Name="leadSource")]
        public int? LeadSource { get; set; }

        /// <summary>
        /// Gets or Sets LossReason
        /// </summary>
        [DataMember(Name="lossReason")]
        public int? LossReason { get; set; }

        /// <summary>
        /// Gets or Sets LossReasonDetail
        /// </summary>
        [DataMember(Name="lossReasonDetail")]
        public string LossReasonDetail { get; set; }

        /// <summary>
        /// Gets or Sets LostDate
        /// </summary>
        [DataMember(Name="lostDate")]
        public DateTime? LostDate { get; set; }

        /// <summary>
        /// Gets or Sets Market
        /// </summary>
        [DataMember(Name="market")]
        public string Market { get; set; }

        /// <summary>
        /// Gets or Sets MonthlyCost
        /// </summary>
        [DataMember(Name="monthlyCost")]
        public double? MonthlyCost { get; set; }

        /// <summary>
        /// Gets or Sets MonthlyRevenue
        /// </summary>
        [DataMember(Name="monthlyRevenue")]
        public double? MonthlyRevenue { get; set; }

        /// <summary>
        /// Gets or Sets NextStep
        /// </summary>
        [DataMember(Name="nextStep")]
        public string NextStep { get; set; }

        /// <summary>
        /// Gets or Sets OnetimeCost
        /// </summary>
        [DataMember(Name="onetimeCost")]
        public double? OnetimeCost { get; set; }

        /// <summary>
        /// Gets or Sets OnetimeRevenue
        /// </summary>
        [DataMember(Name="onetimeRevenue")]
        public double? OnetimeRevenue { get; set; }

        /// <summary>
        /// Gets or Sets OpportunityCategoryID
        /// </summary>
        [DataMember(Name="opportunityCategoryID")]
        public int? OpportunityCategoryID { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationalLevelAssociationID
        /// </summary>
        [DataMember(Name="organizationalLevelAssociationID")]
        public int? OrganizationalLevelAssociationID { get; set; }

        /// <summary>
        /// Gets or Sets OwnerResourceID
        /// </summary>
        [DataMember(Name="ownerResourceID")]
        public int? OwnerResourceID { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryCompetitor
        /// </summary>
        [DataMember(Name="primaryCompetitor")]
        public int? PrimaryCompetitor { get; set; }

        /// <summary>
        /// Gets or Sets Probability
        /// </summary>
        [DataMember(Name="probability")]
        public int? Probability { get; set; }

        /// <summary>
        /// Gets or Sets ProductID
        /// </summary>
        [DataMember(Name="productID")]
        public int? ProductID { get; set; }

        /// <summary>
        /// Gets or Sets ProjectedCloseDate
        /// </summary>
        [DataMember(Name="projectedCloseDate")]
        public DateTime? ProjectedCloseDate { get; set; }

        /// <summary>
        /// Gets or Sets PromisedFulfillmentDate
        /// </summary>
        [DataMember(Name="promisedFulfillmentDate")]
        public DateTime? PromisedFulfillmentDate { get; set; }

        /// <summary>
        /// Gets or Sets PromotionName
        /// </summary>
        [DataMember(Name="promotionName")]
        public string PromotionName { get; set; }

        /// <summary>
        /// Gets or Sets QuarterlyCost
        /// </summary>
        [DataMember(Name="quarterlyCost")]
        public double? QuarterlyCost { get; set; }

        /// <summary>
        /// Gets or Sets QuarterlyRevenue
        /// </summary>
        [DataMember(Name="quarterlyRevenue")]
        public double? QuarterlyRevenue { get; set; }

        /// <summary>
        /// Gets or Sets Rating
        /// </summary>
        [DataMember(Name="rating")]
        public int? Rating { get; set; }

        /// <summary>
        /// Gets or Sets RelationshipAssessmentScore
        /// </summary>
        [DataMember(Name="relationshipAssessmentScore")]
        public double? RelationshipAssessmentScore { get; set; }

        /// <summary>
        /// Gets or Sets RevenueSpread
        /// </summary>
        [DataMember(Name="revenueSpread")]
        public int? RevenueSpread { get; set; }

        /// <summary>
        /// Gets or Sets RevenueSpreadUnit
        /// </summary>
        [DataMember(Name="revenueSpreadUnit")]
        public string RevenueSpreadUnit { get; set; }

        /// <summary>
        /// Gets or Sets SalesOrderID
        /// </summary>
        [DataMember(Name="salesOrderID")]
        public int? SalesOrderID { get; set; }

        /// <summary>
        /// Gets or Sets SalesProcessPercentComplete
        /// </summary>
        [DataMember(Name="salesProcessPercentComplete")]
        public double? SalesProcessPercentComplete { get; set; }

        /// <summary>
        /// Gets or Sets SemiannualCost
        /// </summary>
        [DataMember(Name="semiannualCost")]
        public double? SemiannualCost { get; set; }

        /// <summary>
        /// Gets or Sets SemiannualRevenue
        /// </summary>
        [DataMember(Name="semiannualRevenue")]
        public double? SemiannualRevenue { get; set; }

        /// <summary>
        /// Gets or Sets Stage
        /// </summary>
        [DataMember(Name="stage")]
        public int? Stage { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="startDate")]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status")]
        public int? Status { get; set; }

        /// <summary>
        /// Gets or Sets TechnicalAssessmentScore
        /// </summary>
        [DataMember(Name="technicalAssessmentScore")]
        public double? TechnicalAssessmentScore { get; set; }

        /// <summary>
        /// Gets or Sets ThroughDate
        /// </summary>
        [DataMember(Name="throughDate")]
        public DateTime? ThroughDate { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title")]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets TotalAmountMonths
        /// </summary>
        [DataMember(Name="totalAmountMonths")]
        public int? TotalAmountMonths { get; set; }

        /// <summary>
        /// Gets or Sets UseQuoteTotals
        /// </summary>
        [DataMember(Name="useQuoteTotals")]
        public bool? UseQuoteTotals { get; set; }

        /// <summary>
        /// Gets or Sets WinReason
        /// </summary>
        [DataMember(Name="winReason")]
        public int? WinReason { get; set; }

        /// <summary>
        /// Gets or Sets WinReasonDetail
        /// </summary>
        [DataMember(Name="winReasonDetail")]
        public string WinReasonDetail { get; set; }

        /// <summary>
        /// Gets or Sets YearlyCost
        /// </summary>
        [DataMember(Name="yearlyCost")]
        public double? YearlyCost { get; set; }

        /// <summary>
        /// Gets or Sets YearlyRevenue
        /// </summary>
        [DataMember(Name="yearlyRevenue")]
        public double? YearlyRevenue { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields")]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OpportunityModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AdvancedField1: ").Append(AdvancedField1).Append("\n");
            sb.Append("  AdvancedField2: ").Append(AdvancedField2).Append("\n");
            sb.Append("  AdvancedField3: ").Append(AdvancedField3).Append("\n");
            sb.Append("  AdvancedField4: ").Append(AdvancedField4).Append("\n");
            sb.Append("  AdvancedField5: ").Append(AdvancedField5).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  AssessmentScore: ").Append(AssessmentScore).Append("\n");
            sb.Append("  Barriers: ").Append(Barriers).Append("\n");
            sb.Append("  ClosedDate: ").Append(ClosedDate).Append("\n");
            sb.Append("  CompanyID: ").Append(CompanyID).Append("\n");
            sb.Append("  ContactID: ").Append(ContactID).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  CreatorResourceID: ").Append(CreatorResourceID).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  HelpNeeded: ").Append(HelpNeeded).Append("\n");
            sb.Append("  ImpersonatorCreatorResourceID: ").Append(ImpersonatorCreatorResourceID).Append("\n");
            sb.Append("  LastActivity: ").Append(LastActivity).Append("\n");
            sb.Append("  LeadSource: ").Append(LeadSource).Append("\n");
            sb.Append("  LossReason: ").Append(LossReason).Append("\n");
            sb.Append("  LossReasonDetail: ").Append(LossReasonDetail).Append("\n");
            sb.Append("  LostDate: ").Append(LostDate).Append("\n");
            sb.Append("  Market: ").Append(Market).Append("\n");
            sb.Append("  MonthlyCost: ").Append(MonthlyCost).Append("\n");
            sb.Append("  MonthlyRevenue: ").Append(MonthlyRevenue).Append("\n");
            sb.Append("  NextStep: ").Append(NextStep).Append("\n");
            sb.Append("  OnetimeCost: ").Append(OnetimeCost).Append("\n");
            sb.Append("  OnetimeRevenue: ").Append(OnetimeRevenue).Append("\n");
            sb.Append("  OpportunityCategoryID: ").Append(OpportunityCategoryID).Append("\n");
            sb.Append("  OrganizationalLevelAssociationID: ").Append(OrganizationalLevelAssociationID).Append("\n");
            sb.Append("  OwnerResourceID: ").Append(OwnerResourceID).Append("\n");
            sb.Append("  PrimaryCompetitor: ").Append(PrimaryCompetitor).Append("\n");
            sb.Append("  Probability: ").Append(Probability).Append("\n");
            sb.Append("  ProductID: ").Append(ProductID).Append("\n");
            sb.Append("  ProjectedCloseDate: ").Append(ProjectedCloseDate).Append("\n");
            sb.Append("  PromisedFulfillmentDate: ").Append(PromisedFulfillmentDate).Append("\n");
            sb.Append("  PromotionName: ").Append(PromotionName).Append("\n");
            sb.Append("  QuarterlyCost: ").Append(QuarterlyCost).Append("\n");
            sb.Append("  QuarterlyRevenue: ").Append(QuarterlyRevenue).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  RelationshipAssessmentScore: ").Append(RelationshipAssessmentScore).Append("\n");
            sb.Append("  RevenueSpread: ").Append(RevenueSpread).Append("\n");
            sb.Append("  RevenueSpreadUnit: ").Append(RevenueSpreadUnit).Append("\n");
            sb.Append("  SalesOrderID: ").Append(SalesOrderID).Append("\n");
            sb.Append("  SalesProcessPercentComplete: ").Append(SalesProcessPercentComplete).Append("\n");
            sb.Append("  SemiannualCost: ").Append(SemiannualCost).Append("\n");
            sb.Append("  SemiannualRevenue: ").Append(SemiannualRevenue).Append("\n");
            sb.Append("  Stage: ").Append(Stage).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TechnicalAssessmentScore: ").Append(TechnicalAssessmentScore).Append("\n");
            sb.Append("  ThroughDate: ").Append(ThroughDate).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  TotalAmountMonths: ").Append(TotalAmountMonths).Append("\n");
            sb.Append("  UseQuoteTotals: ").Append(UseQuoteTotals).Append("\n");
            sb.Append("  WinReason: ").Append(WinReason).Append("\n");
            sb.Append("  WinReasonDetail: ").Append(WinReasonDetail).Append("\n");
            sb.Append("  YearlyCost: ").Append(YearlyCost).Append("\n");
            sb.Append("  YearlyRevenue: ").Append(YearlyRevenue).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OpportunityModel)obj);
        }

        /// <summary>
        /// Returns true if OpportunityModel instances are equal
        /// </summary>
        /// <param name="other">Instance of OpportunityModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OpportunityModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    AdvancedField1 == other.AdvancedField1 ||
                    AdvancedField1 != null &&
                    AdvancedField1.Equals(other.AdvancedField1)
                ) && 
                (
                    AdvancedField2 == other.AdvancedField2 ||
                    AdvancedField2 != null &&
                    AdvancedField2.Equals(other.AdvancedField2)
                ) && 
                (
                    AdvancedField3 == other.AdvancedField3 ||
                    AdvancedField3 != null &&
                    AdvancedField3.Equals(other.AdvancedField3)
                ) && 
                (
                    AdvancedField4 == other.AdvancedField4 ||
                    AdvancedField4 != null &&
                    AdvancedField4.Equals(other.AdvancedField4)
                ) && 
                (
                    AdvancedField5 == other.AdvancedField5 ||
                    AdvancedField5 != null &&
                    AdvancedField5.Equals(other.AdvancedField5)
                ) && 
                (
                    Amount == other.Amount ||
                    Amount != null &&
                    Amount.Equals(other.Amount)
                ) && 
                (
                    AssessmentScore == other.AssessmentScore ||
                    AssessmentScore != null &&
                    AssessmentScore.Equals(other.AssessmentScore)
                ) && 
                (
                    Barriers == other.Barriers ||
                    Barriers != null &&
                    Barriers.Equals(other.Barriers)
                ) && 
                (
                    ClosedDate == other.ClosedDate ||
                    ClosedDate != null &&
                    ClosedDate.Equals(other.ClosedDate)
                ) && 
                (
                    CompanyID == other.CompanyID ||
                    CompanyID != null &&
                    CompanyID.Equals(other.CompanyID)
                ) && 
                (
                    ContactID == other.ContactID ||
                    ContactID != null &&
                    ContactID.Equals(other.ContactID)
                ) && 
                (
                    Cost == other.Cost ||
                    Cost != null &&
                    Cost.Equals(other.Cost)
                ) && 
                (
                    CreateDate == other.CreateDate ||
                    CreateDate != null &&
                    CreateDate.Equals(other.CreateDate)
                ) && 
                (
                    CreatorResourceID == other.CreatorResourceID ||
                    CreatorResourceID != null &&
                    CreatorResourceID.Equals(other.CreatorResourceID)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    HelpNeeded == other.HelpNeeded ||
                    HelpNeeded != null &&
                    HelpNeeded.Equals(other.HelpNeeded)
                ) && 
                (
                    ImpersonatorCreatorResourceID == other.ImpersonatorCreatorResourceID ||
                    ImpersonatorCreatorResourceID != null &&
                    ImpersonatorCreatorResourceID.Equals(other.ImpersonatorCreatorResourceID)
                ) && 
                (
                    LastActivity == other.LastActivity ||
                    LastActivity != null &&
                    LastActivity.Equals(other.LastActivity)
                ) && 
                (
                    LeadSource == other.LeadSource ||
                    LeadSource != null &&
                    LeadSource.Equals(other.LeadSource)
                ) && 
                (
                    LossReason == other.LossReason ||
                    LossReason != null &&
                    LossReason.Equals(other.LossReason)
                ) && 
                (
                    LossReasonDetail == other.LossReasonDetail ||
                    LossReasonDetail != null &&
                    LossReasonDetail.Equals(other.LossReasonDetail)
                ) && 
                (
                    LostDate == other.LostDate ||
                    LostDate != null &&
                    LostDate.Equals(other.LostDate)
                ) && 
                (
                    Market == other.Market ||
                    Market != null &&
                    Market.Equals(other.Market)
                ) && 
                (
                    MonthlyCost == other.MonthlyCost ||
                    MonthlyCost != null &&
                    MonthlyCost.Equals(other.MonthlyCost)
                ) && 
                (
                    MonthlyRevenue == other.MonthlyRevenue ||
                    MonthlyRevenue != null &&
                    MonthlyRevenue.Equals(other.MonthlyRevenue)
                ) && 
                (
                    NextStep == other.NextStep ||
                    NextStep != null &&
                    NextStep.Equals(other.NextStep)
                ) && 
                (
                    OnetimeCost == other.OnetimeCost ||
                    OnetimeCost != null &&
                    OnetimeCost.Equals(other.OnetimeCost)
                ) && 
                (
                    OnetimeRevenue == other.OnetimeRevenue ||
                    OnetimeRevenue != null &&
                    OnetimeRevenue.Equals(other.OnetimeRevenue)
                ) && 
                (
                    OpportunityCategoryID == other.OpportunityCategoryID ||
                    OpportunityCategoryID != null &&
                    OpportunityCategoryID.Equals(other.OpportunityCategoryID)
                ) && 
                (
                    OrganizationalLevelAssociationID == other.OrganizationalLevelAssociationID ||
                    OrganizationalLevelAssociationID != null &&
                    OrganizationalLevelAssociationID.Equals(other.OrganizationalLevelAssociationID)
                ) && 
                (
                    OwnerResourceID == other.OwnerResourceID ||
                    OwnerResourceID != null &&
                    OwnerResourceID.Equals(other.OwnerResourceID)
                ) && 
                (
                    PrimaryCompetitor == other.PrimaryCompetitor ||
                    PrimaryCompetitor != null &&
                    PrimaryCompetitor.Equals(other.PrimaryCompetitor)
                ) && 
                (
                    Probability == other.Probability ||
                    Probability != null &&
                    Probability.Equals(other.Probability)
                ) && 
                (
                    ProductID == other.ProductID ||
                    ProductID != null &&
                    ProductID.Equals(other.ProductID)
                ) && 
                (
                    ProjectedCloseDate == other.ProjectedCloseDate ||
                    ProjectedCloseDate != null &&
                    ProjectedCloseDate.Equals(other.ProjectedCloseDate)
                ) && 
                (
                    PromisedFulfillmentDate == other.PromisedFulfillmentDate ||
                    PromisedFulfillmentDate != null &&
                    PromisedFulfillmentDate.Equals(other.PromisedFulfillmentDate)
                ) && 
                (
                    PromotionName == other.PromotionName ||
                    PromotionName != null &&
                    PromotionName.Equals(other.PromotionName)
                ) && 
                (
                    QuarterlyCost == other.QuarterlyCost ||
                    QuarterlyCost != null &&
                    QuarterlyCost.Equals(other.QuarterlyCost)
                ) && 
                (
                    QuarterlyRevenue == other.QuarterlyRevenue ||
                    QuarterlyRevenue != null &&
                    QuarterlyRevenue.Equals(other.QuarterlyRevenue)
                ) && 
                (
                    Rating == other.Rating ||
                    Rating != null &&
                    Rating.Equals(other.Rating)
                ) && 
                (
                    RelationshipAssessmentScore == other.RelationshipAssessmentScore ||
                    RelationshipAssessmentScore != null &&
                    RelationshipAssessmentScore.Equals(other.RelationshipAssessmentScore)
                ) && 
                (
                    RevenueSpread == other.RevenueSpread ||
                    RevenueSpread != null &&
                    RevenueSpread.Equals(other.RevenueSpread)
                ) && 
                (
                    RevenueSpreadUnit == other.RevenueSpreadUnit ||
                    RevenueSpreadUnit != null &&
                    RevenueSpreadUnit.Equals(other.RevenueSpreadUnit)
                ) && 
                (
                    SalesOrderID == other.SalesOrderID ||
                    SalesOrderID != null &&
                    SalesOrderID.Equals(other.SalesOrderID)
                ) && 
                (
                    SalesProcessPercentComplete == other.SalesProcessPercentComplete ||
                    SalesProcessPercentComplete != null &&
                    SalesProcessPercentComplete.Equals(other.SalesProcessPercentComplete)
                ) && 
                (
                    SemiannualCost == other.SemiannualCost ||
                    SemiannualCost != null &&
                    SemiannualCost.Equals(other.SemiannualCost)
                ) && 
                (
                    SemiannualRevenue == other.SemiannualRevenue ||
                    SemiannualRevenue != null &&
                    SemiannualRevenue.Equals(other.SemiannualRevenue)
                ) && 
                (
                    Stage == other.Stage ||
                    Stage != null &&
                    Stage.Equals(other.Stage)
                ) && 
                (
                    StartDate == other.StartDate ||
                    StartDate != null &&
                    StartDate.Equals(other.StartDate)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    TechnicalAssessmentScore == other.TechnicalAssessmentScore ||
                    TechnicalAssessmentScore != null &&
                    TechnicalAssessmentScore.Equals(other.TechnicalAssessmentScore)
                ) && 
                (
                    ThroughDate == other.ThroughDate ||
                    ThroughDate != null &&
                    ThroughDate.Equals(other.ThroughDate)
                ) && 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                ) && 
                (
                    TotalAmountMonths == other.TotalAmountMonths ||
                    TotalAmountMonths != null &&
                    TotalAmountMonths.Equals(other.TotalAmountMonths)
                ) && 
                (
                    UseQuoteTotals == other.UseQuoteTotals ||
                    UseQuoteTotals != null &&
                    UseQuoteTotals.Equals(other.UseQuoteTotals)
                ) && 
                (
                    WinReason == other.WinReason ||
                    WinReason != null &&
                    WinReason.Equals(other.WinReason)
                ) && 
                (
                    WinReasonDetail == other.WinReasonDetail ||
                    WinReasonDetail != null &&
                    WinReasonDetail.Equals(other.WinReasonDetail)
                ) && 
                (
                    YearlyCost == other.YearlyCost ||
                    YearlyCost != null &&
                    YearlyCost.Equals(other.YearlyCost)
                ) && 
                (
                    YearlyRevenue == other.YearlyRevenue ||
                    YearlyRevenue != null &&
                    YearlyRevenue.Equals(other.YearlyRevenue)
                ) && 
                (
                    UserDefinedFields == other.UserDefinedFields ||
                    UserDefinedFields != null &&
                    UserDefinedFields.SequenceEqual(other.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (AdvancedField1 != null)
                    hashCode = hashCode * 59 + AdvancedField1.GetHashCode();
                    if (AdvancedField2 != null)
                    hashCode = hashCode * 59 + AdvancedField2.GetHashCode();
                    if (AdvancedField3 != null)
                    hashCode = hashCode * 59 + AdvancedField3.GetHashCode();
                    if (AdvancedField4 != null)
                    hashCode = hashCode * 59 + AdvancedField4.GetHashCode();
                    if (AdvancedField5 != null)
                    hashCode = hashCode * 59 + AdvancedField5.GetHashCode();
                    if (Amount != null)
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                    if (AssessmentScore != null)
                    hashCode = hashCode * 59 + AssessmentScore.GetHashCode();
                    if (Barriers != null)
                    hashCode = hashCode * 59 + Barriers.GetHashCode();
                    if (ClosedDate != null)
                    hashCode = hashCode * 59 + ClosedDate.GetHashCode();
                    if (CompanyID != null)
                    hashCode = hashCode * 59 + CompanyID.GetHashCode();
                    if (ContactID != null)
                    hashCode = hashCode * 59 + ContactID.GetHashCode();
                    if (Cost != null)
                    hashCode = hashCode * 59 + Cost.GetHashCode();
                    if (CreateDate != null)
                    hashCode = hashCode * 59 + CreateDate.GetHashCode();
                    if (CreatorResourceID != null)
                    hashCode = hashCode * 59 + CreatorResourceID.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (HelpNeeded != null)
                    hashCode = hashCode * 59 + HelpNeeded.GetHashCode();
                    if (ImpersonatorCreatorResourceID != null)
                    hashCode = hashCode * 59 + ImpersonatorCreatorResourceID.GetHashCode();
                    if (LastActivity != null)
                    hashCode = hashCode * 59 + LastActivity.GetHashCode();
                    if (LeadSource != null)
                    hashCode = hashCode * 59 + LeadSource.GetHashCode();
                    if (LossReason != null)
                    hashCode = hashCode * 59 + LossReason.GetHashCode();
                    if (LossReasonDetail != null)
                    hashCode = hashCode * 59 + LossReasonDetail.GetHashCode();
                    if (LostDate != null)
                    hashCode = hashCode * 59 + LostDate.GetHashCode();
                    if (Market != null)
                    hashCode = hashCode * 59 + Market.GetHashCode();
                    if (MonthlyCost != null)
                    hashCode = hashCode * 59 + MonthlyCost.GetHashCode();
                    if (MonthlyRevenue != null)
                    hashCode = hashCode * 59 + MonthlyRevenue.GetHashCode();
                    if (NextStep != null)
                    hashCode = hashCode * 59 + NextStep.GetHashCode();
                    if (OnetimeCost != null)
                    hashCode = hashCode * 59 + OnetimeCost.GetHashCode();
                    if (OnetimeRevenue != null)
                    hashCode = hashCode * 59 + OnetimeRevenue.GetHashCode();
                    if (OpportunityCategoryID != null)
                    hashCode = hashCode * 59 + OpportunityCategoryID.GetHashCode();
                    if (OrganizationalLevelAssociationID != null)
                    hashCode = hashCode * 59 + OrganizationalLevelAssociationID.GetHashCode();
                    if (OwnerResourceID != null)
                    hashCode = hashCode * 59 + OwnerResourceID.GetHashCode();
                    if (PrimaryCompetitor != null)
                    hashCode = hashCode * 59 + PrimaryCompetitor.GetHashCode();
                    if (Probability != null)
                    hashCode = hashCode * 59 + Probability.GetHashCode();
                    if (ProductID != null)
                    hashCode = hashCode * 59 + ProductID.GetHashCode();
                    if (ProjectedCloseDate != null)
                    hashCode = hashCode * 59 + ProjectedCloseDate.GetHashCode();
                    if (PromisedFulfillmentDate != null)
                    hashCode = hashCode * 59 + PromisedFulfillmentDate.GetHashCode();
                    if (PromotionName != null)
                    hashCode = hashCode * 59 + PromotionName.GetHashCode();
                    if (QuarterlyCost != null)
                    hashCode = hashCode * 59 + QuarterlyCost.GetHashCode();
                    if (QuarterlyRevenue != null)
                    hashCode = hashCode * 59 + QuarterlyRevenue.GetHashCode();
                    if (Rating != null)
                    hashCode = hashCode * 59 + Rating.GetHashCode();
                    if (RelationshipAssessmentScore != null)
                    hashCode = hashCode * 59 + RelationshipAssessmentScore.GetHashCode();
                    if (RevenueSpread != null)
                    hashCode = hashCode * 59 + RevenueSpread.GetHashCode();
                    if (RevenueSpreadUnit != null)
                    hashCode = hashCode * 59 + RevenueSpreadUnit.GetHashCode();
                    if (SalesOrderID != null)
                    hashCode = hashCode * 59 + SalesOrderID.GetHashCode();
                    if (SalesProcessPercentComplete != null)
                    hashCode = hashCode * 59 + SalesProcessPercentComplete.GetHashCode();
                    if (SemiannualCost != null)
                    hashCode = hashCode * 59 + SemiannualCost.GetHashCode();
                    if (SemiannualRevenue != null)
                    hashCode = hashCode * 59 + SemiannualRevenue.GetHashCode();
                    if (Stage != null)
                    hashCode = hashCode * 59 + Stage.GetHashCode();
                    if (StartDate != null)
                    hashCode = hashCode * 59 + StartDate.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (TechnicalAssessmentScore != null)
                    hashCode = hashCode * 59 + TechnicalAssessmentScore.GetHashCode();
                    if (ThroughDate != null)
                    hashCode = hashCode * 59 + ThroughDate.GetHashCode();
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    if (TotalAmountMonths != null)
                    hashCode = hashCode * 59 + TotalAmountMonths.GetHashCode();
                    if (UseQuoteTotals != null)
                    hashCode = hashCode * 59 + UseQuoteTotals.GetHashCode();
                    if (WinReason != null)
                    hashCode = hashCode * 59 + WinReason.GetHashCode();
                    if (WinReasonDetail != null)
                    hashCode = hashCode * 59 + WinReasonDetail.GetHashCode();
                    if (YearlyCost != null)
                    hashCode = hashCode * 59 + YearlyCost.GetHashCode();
                    if (YearlyRevenue != null)
                    hashCode = hashCode * 59 + YearlyRevenue.GetHashCode();
                    if (UserDefinedFields != null)
                    hashCode = hashCode * 59 + UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OpportunityModel left, OpportunityModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OpportunityModel left, OpportunityModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
