/*
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class NotificationHistoryModel : IEquatable<NotificationHistoryModel>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets CompanyID
        /// </summary>
        [DataMember(Name="companyID")]
        public long? CompanyID { get; set; }

        /// <summary>
        /// Gets or Sets EntityNumber
        /// </summary>
        [DataMember(Name="entityNumber")]
        public string EntityNumber { get; set; }

        /// <summary>
        /// Gets or Sets EntityTitle
        /// </summary>
        [DataMember(Name="entityTitle")]
        public string EntityTitle { get; set; }

        /// <summary>
        /// Gets or Sets InitiatingContactID
        /// </summary>
        [DataMember(Name="initiatingContactID")]
        public long? InitiatingContactID { get; set; }

        /// <summary>
        /// Gets or Sets InitiatingResourceID
        /// </summary>
        [DataMember(Name="initiatingResourceID")]
        public long? InitiatingResourceID { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="isActive")]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [DataMember(Name="isDeleted")]
        public bool? IsDeleted { get; set; }

        /// <summary>
        /// Gets or Sets IsTemplateJob
        /// </summary>
        [DataMember(Name="isTemplateJob")]
        public bool? IsTemplateJob { get; set; }

        /// <summary>
        /// Gets or Sets NotificationHistoryTypeID
        /// </summary>
        [DataMember(Name="notificationHistoryTypeID")]
        public int? NotificationHistoryTypeID { get; set; }

        /// <summary>
        /// Gets or Sets NotificationSentTime
        /// </summary>
        [DataMember(Name="notificationSentTime")]
        public DateTime? NotificationSentTime { get; set; }

        /// <summary>
        /// Gets or Sets OpportunityID
        /// </summary>
        [DataMember(Name="opportunityID")]
        public long? OpportunityID { get; set; }

        /// <summary>
        /// Gets or Sets ProjectID
        /// </summary>
        [DataMember(Name="projectID")]
        public long? ProjectID { get; set; }

        /// <summary>
        /// Gets or Sets QuoteID
        /// </summary>
        [DataMember(Name="quoteID")]
        public long? QuoteID { get; set; }

        /// <summary>
        /// Gets or Sets RecipientDisplayName
        /// </summary>
        [DataMember(Name="recipientDisplayName")]
        public string RecipientDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets RecipientEmailAddress
        /// </summary>
        [DataMember(Name="recipientEmailAddress")]
        public string RecipientEmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets TaskID
        /// </summary>
        [DataMember(Name="taskID")]
        public long? TaskID { get; set; }

        /// <summary>
        /// Gets or Sets TemplateName
        /// </summary>
        [DataMember(Name="templateName")]
        public string TemplateName { get; set; }

        /// <summary>
        /// Gets or Sets TicketID
        /// </summary>
        [DataMember(Name="ticketID")]
        public long? TicketID { get; set; }

        /// <summary>
        /// Gets or Sets TimeEntryID
        /// </summary>
        [DataMember(Name="timeEntryID")]
        public long? TimeEntryID { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields")]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NotificationHistoryModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CompanyID: ").Append(CompanyID).Append("\n");
            sb.Append("  EntityNumber: ").Append(EntityNumber).Append("\n");
            sb.Append("  EntityTitle: ").Append(EntityTitle).Append("\n");
            sb.Append("  InitiatingContactID: ").Append(InitiatingContactID).Append("\n");
            sb.Append("  InitiatingResourceID: ").Append(InitiatingResourceID).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  IsTemplateJob: ").Append(IsTemplateJob).Append("\n");
            sb.Append("  NotificationHistoryTypeID: ").Append(NotificationHistoryTypeID).Append("\n");
            sb.Append("  NotificationSentTime: ").Append(NotificationSentTime).Append("\n");
            sb.Append("  OpportunityID: ").Append(OpportunityID).Append("\n");
            sb.Append("  ProjectID: ").Append(ProjectID).Append("\n");
            sb.Append("  QuoteID: ").Append(QuoteID).Append("\n");
            sb.Append("  RecipientDisplayName: ").Append(RecipientDisplayName).Append("\n");
            sb.Append("  RecipientEmailAddress: ").Append(RecipientEmailAddress).Append("\n");
            sb.Append("  TaskID: ").Append(TaskID).Append("\n");
            sb.Append("  TemplateName: ").Append(TemplateName).Append("\n");
            sb.Append("  TicketID: ").Append(TicketID).Append("\n");
            sb.Append("  TimeEntryID: ").Append(TimeEntryID).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NotificationHistoryModel)obj);
        }

        /// <summary>
        /// Returns true if NotificationHistoryModel instances are equal
        /// </summary>
        /// <param name="other">Instance of NotificationHistoryModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NotificationHistoryModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    CompanyID == other.CompanyID ||
                    CompanyID != null &&
                    CompanyID.Equals(other.CompanyID)
                ) && 
                (
                    EntityNumber == other.EntityNumber ||
                    EntityNumber != null &&
                    EntityNumber.Equals(other.EntityNumber)
                ) && 
                (
                    EntityTitle == other.EntityTitle ||
                    EntityTitle != null &&
                    EntityTitle.Equals(other.EntityTitle)
                ) && 
                (
                    InitiatingContactID == other.InitiatingContactID ||
                    InitiatingContactID != null &&
                    InitiatingContactID.Equals(other.InitiatingContactID)
                ) && 
                (
                    InitiatingResourceID == other.InitiatingResourceID ||
                    InitiatingResourceID != null &&
                    InitiatingResourceID.Equals(other.InitiatingResourceID)
                ) && 
                (
                    IsActive == other.IsActive ||
                    IsActive != null &&
                    IsActive.Equals(other.IsActive)
                ) && 
                (
                    IsDeleted == other.IsDeleted ||
                    IsDeleted != null &&
                    IsDeleted.Equals(other.IsDeleted)
                ) && 
                (
                    IsTemplateJob == other.IsTemplateJob ||
                    IsTemplateJob != null &&
                    IsTemplateJob.Equals(other.IsTemplateJob)
                ) && 
                (
                    NotificationHistoryTypeID == other.NotificationHistoryTypeID ||
                    NotificationHistoryTypeID != null &&
                    NotificationHistoryTypeID.Equals(other.NotificationHistoryTypeID)
                ) && 
                (
                    NotificationSentTime == other.NotificationSentTime ||
                    NotificationSentTime != null &&
                    NotificationSentTime.Equals(other.NotificationSentTime)
                ) && 
                (
                    OpportunityID == other.OpportunityID ||
                    OpportunityID != null &&
                    OpportunityID.Equals(other.OpportunityID)
                ) && 
                (
                    ProjectID == other.ProjectID ||
                    ProjectID != null &&
                    ProjectID.Equals(other.ProjectID)
                ) && 
                (
                    QuoteID == other.QuoteID ||
                    QuoteID != null &&
                    QuoteID.Equals(other.QuoteID)
                ) && 
                (
                    RecipientDisplayName == other.RecipientDisplayName ||
                    RecipientDisplayName != null &&
                    RecipientDisplayName.Equals(other.RecipientDisplayName)
                ) && 
                (
                    RecipientEmailAddress == other.RecipientEmailAddress ||
                    RecipientEmailAddress != null &&
                    RecipientEmailAddress.Equals(other.RecipientEmailAddress)
                ) && 
                (
                    TaskID == other.TaskID ||
                    TaskID != null &&
                    TaskID.Equals(other.TaskID)
                ) && 
                (
                    TemplateName == other.TemplateName ||
                    TemplateName != null &&
                    TemplateName.Equals(other.TemplateName)
                ) && 
                (
                    TicketID == other.TicketID ||
                    TicketID != null &&
                    TicketID.Equals(other.TicketID)
                ) && 
                (
                    TimeEntryID == other.TimeEntryID ||
                    TimeEntryID != null &&
                    TimeEntryID.Equals(other.TimeEntryID)
                ) && 
                (
                    UserDefinedFields == other.UserDefinedFields ||
                    UserDefinedFields != null &&
                    UserDefinedFields.SequenceEqual(other.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (CompanyID != null)
                    hashCode = hashCode * 59 + CompanyID.GetHashCode();
                    if (EntityNumber != null)
                    hashCode = hashCode * 59 + EntityNumber.GetHashCode();
                    if (EntityTitle != null)
                    hashCode = hashCode * 59 + EntityTitle.GetHashCode();
                    if (InitiatingContactID != null)
                    hashCode = hashCode * 59 + InitiatingContactID.GetHashCode();
                    if (InitiatingResourceID != null)
                    hashCode = hashCode * 59 + InitiatingResourceID.GetHashCode();
                    if (IsActive != null)
                    hashCode = hashCode * 59 + IsActive.GetHashCode();
                    if (IsDeleted != null)
                    hashCode = hashCode * 59 + IsDeleted.GetHashCode();
                    if (IsTemplateJob != null)
                    hashCode = hashCode * 59 + IsTemplateJob.GetHashCode();
                    if (NotificationHistoryTypeID != null)
                    hashCode = hashCode * 59 + NotificationHistoryTypeID.GetHashCode();
                    if (NotificationSentTime != null)
                    hashCode = hashCode * 59 + NotificationSentTime.GetHashCode();
                    if (OpportunityID != null)
                    hashCode = hashCode * 59 + OpportunityID.GetHashCode();
                    if (ProjectID != null)
                    hashCode = hashCode * 59 + ProjectID.GetHashCode();
                    if (QuoteID != null)
                    hashCode = hashCode * 59 + QuoteID.GetHashCode();
                    if (RecipientDisplayName != null)
                    hashCode = hashCode * 59 + RecipientDisplayName.GetHashCode();
                    if (RecipientEmailAddress != null)
                    hashCode = hashCode * 59 + RecipientEmailAddress.GetHashCode();
                    if (TaskID != null)
                    hashCode = hashCode * 59 + TaskID.GetHashCode();
                    if (TemplateName != null)
                    hashCode = hashCode * 59 + TemplateName.GetHashCode();
                    if (TicketID != null)
                    hashCode = hashCode * 59 + TicketID.GetHashCode();
                    if (TimeEntryID != null)
                    hashCode = hashCode * 59 + TimeEntryID.GetHashCode();
                    if (UserDefinedFields != null)
                    hashCode = hashCode * 59 + UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NotificationHistoryModel left, NotificationHistoryModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NotificationHistoryModel left, NotificationHistoryModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
