/*
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class QuoteTemplateModel : IEquatable<QuoteTemplateModel>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets CalculateTaxSeparately
        /// </summary>
        [DataMember(Name="calculateTaxSeparately")]
        public bool? CalculateTaxSeparately { get; set; }

        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="createDate")]
        public DateTime? CreateDate { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="createdBy")]
        public int? CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyNegativeFormat
        /// </summary>
        [DataMember(Name="currencyNegativeFormat")]
        public string CurrencyNegativeFormat { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyPositiveFormat
        /// </summary>
        [DataMember(Name="currencyPositiveFormat")]
        public string CurrencyPositiveFormat { get; set; }

        /// <summary>
        /// Gets or Sets DateFormat
        /// </summary>
        [DataMember(Name="dateFormat")]
        public int? DateFormat { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DisplayTaxCategorySuperscripts
        /// </summary>
        [DataMember(Name="displayTaxCategorySuperscripts")]
        public bool? DisplayTaxCategorySuperscripts { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="isActive")]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets LastActivityBy
        /// </summary>
        [DataMember(Name="lastActivityBy")]
        public int? LastActivityBy { get; set; }

        /// <summary>
        /// Gets or Sets LastActivityDate
        /// </summary>
        [DataMember(Name="lastActivityDate")]
        public DateTime? LastActivityDate { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets NumberFormat
        /// </summary>
        [DataMember(Name="numberFormat")]
        public int? NumberFormat { get; set; }

        /// <summary>
        /// Gets or Sets PageLayout
        /// </summary>
        [DataMember(Name="pageLayout")]
        public int? PageLayout { get; set; }

        /// <summary>
        /// Gets or Sets PageNumberFormat
        /// </summary>
        [DataMember(Name="pageNumberFormat")]
        public int? PageNumberFormat { get; set; }

        /// <summary>
        /// Gets or Sets ShowEachTaxInGroup
        /// </summary>
        [DataMember(Name="showEachTaxInGroup")]
        public bool? ShowEachTaxInGroup { get; set; }

        /// <summary>
        /// Gets or Sets ShowGridHeader
        /// </summary>
        [DataMember(Name="showGridHeader")]
        public bool? ShowGridHeader { get; set; }

        /// <summary>
        /// Gets or Sets ShowTaxCategory
        /// </summary>
        [DataMember(Name="showTaxCategory")]
        public bool? ShowTaxCategory { get; set; }

        /// <summary>
        /// Gets or Sets ShowVerticalGridLines
        /// </summary>
        [DataMember(Name="showVerticalGridLines")]
        public bool? ShowVerticalGridLines { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields")]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QuoteTemplateModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CalculateTaxSeparately: ").Append(CalculateTaxSeparately).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CurrencyNegativeFormat: ").Append(CurrencyNegativeFormat).Append("\n");
            sb.Append("  CurrencyPositiveFormat: ").Append(CurrencyPositiveFormat).Append("\n");
            sb.Append("  DateFormat: ").Append(DateFormat).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayTaxCategorySuperscripts: ").Append(DisplayTaxCategorySuperscripts).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  LastActivityBy: ").Append(LastActivityBy).Append("\n");
            sb.Append("  LastActivityDate: ").Append(LastActivityDate).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NumberFormat: ").Append(NumberFormat).Append("\n");
            sb.Append("  PageLayout: ").Append(PageLayout).Append("\n");
            sb.Append("  PageNumberFormat: ").Append(PageNumberFormat).Append("\n");
            sb.Append("  ShowEachTaxInGroup: ").Append(ShowEachTaxInGroup).Append("\n");
            sb.Append("  ShowGridHeader: ").Append(ShowGridHeader).Append("\n");
            sb.Append("  ShowTaxCategory: ").Append(ShowTaxCategory).Append("\n");
            sb.Append("  ShowVerticalGridLines: ").Append(ShowVerticalGridLines).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((QuoteTemplateModel)obj);
        }

        /// <summary>
        /// Returns true if QuoteTemplateModel instances are equal
        /// </summary>
        /// <param name="other">Instance of QuoteTemplateModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuoteTemplateModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    CalculateTaxSeparately == other.CalculateTaxSeparately ||
                    CalculateTaxSeparately != null &&
                    CalculateTaxSeparately.Equals(other.CalculateTaxSeparately)
                ) && 
                (
                    CreateDate == other.CreateDate ||
                    CreateDate != null &&
                    CreateDate.Equals(other.CreateDate)
                ) && 
                (
                    CreatedBy == other.CreatedBy ||
                    CreatedBy != null &&
                    CreatedBy.Equals(other.CreatedBy)
                ) && 
                (
                    CurrencyNegativeFormat == other.CurrencyNegativeFormat ||
                    CurrencyNegativeFormat != null &&
                    CurrencyNegativeFormat.Equals(other.CurrencyNegativeFormat)
                ) && 
                (
                    CurrencyPositiveFormat == other.CurrencyPositiveFormat ||
                    CurrencyPositiveFormat != null &&
                    CurrencyPositiveFormat.Equals(other.CurrencyPositiveFormat)
                ) && 
                (
                    DateFormat == other.DateFormat ||
                    DateFormat != null &&
                    DateFormat.Equals(other.DateFormat)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    DisplayTaxCategorySuperscripts == other.DisplayTaxCategorySuperscripts ||
                    DisplayTaxCategorySuperscripts != null &&
                    DisplayTaxCategorySuperscripts.Equals(other.DisplayTaxCategorySuperscripts)
                ) && 
                (
                    IsActive == other.IsActive ||
                    IsActive != null &&
                    IsActive.Equals(other.IsActive)
                ) && 
                (
                    LastActivityBy == other.LastActivityBy ||
                    LastActivityBy != null &&
                    LastActivityBy.Equals(other.LastActivityBy)
                ) && 
                (
                    LastActivityDate == other.LastActivityDate ||
                    LastActivityDate != null &&
                    LastActivityDate.Equals(other.LastActivityDate)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    NumberFormat == other.NumberFormat ||
                    NumberFormat != null &&
                    NumberFormat.Equals(other.NumberFormat)
                ) && 
                (
                    PageLayout == other.PageLayout ||
                    PageLayout != null &&
                    PageLayout.Equals(other.PageLayout)
                ) && 
                (
                    PageNumberFormat == other.PageNumberFormat ||
                    PageNumberFormat != null &&
                    PageNumberFormat.Equals(other.PageNumberFormat)
                ) && 
                (
                    ShowEachTaxInGroup == other.ShowEachTaxInGroup ||
                    ShowEachTaxInGroup != null &&
                    ShowEachTaxInGroup.Equals(other.ShowEachTaxInGroup)
                ) && 
                (
                    ShowGridHeader == other.ShowGridHeader ||
                    ShowGridHeader != null &&
                    ShowGridHeader.Equals(other.ShowGridHeader)
                ) && 
                (
                    ShowTaxCategory == other.ShowTaxCategory ||
                    ShowTaxCategory != null &&
                    ShowTaxCategory.Equals(other.ShowTaxCategory)
                ) && 
                (
                    ShowVerticalGridLines == other.ShowVerticalGridLines ||
                    ShowVerticalGridLines != null &&
                    ShowVerticalGridLines.Equals(other.ShowVerticalGridLines)
                ) && 
                (
                    UserDefinedFields == other.UserDefinedFields ||
                    UserDefinedFields != null &&
                    UserDefinedFields.SequenceEqual(other.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (CalculateTaxSeparately != null)
                    hashCode = hashCode * 59 + CalculateTaxSeparately.GetHashCode();
                    if (CreateDate != null)
                    hashCode = hashCode * 59 + CreateDate.GetHashCode();
                    if (CreatedBy != null)
                    hashCode = hashCode * 59 + CreatedBy.GetHashCode();
                    if (CurrencyNegativeFormat != null)
                    hashCode = hashCode * 59 + CurrencyNegativeFormat.GetHashCode();
                    if (CurrencyPositiveFormat != null)
                    hashCode = hashCode * 59 + CurrencyPositiveFormat.GetHashCode();
                    if (DateFormat != null)
                    hashCode = hashCode * 59 + DateFormat.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (DisplayTaxCategorySuperscripts != null)
                    hashCode = hashCode * 59 + DisplayTaxCategorySuperscripts.GetHashCode();
                    if (IsActive != null)
                    hashCode = hashCode * 59 + IsActive.GetHashCode();
                    if (LastActivityBy != null)
                    hashCode = hashCode * 59 + LastActivityBy.GetHashCode();
                    if (LastActivityDate != null)
                    hashCode = hashCode * 59 + LastActivityDate.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (NumberFormat != null)
                    hashCode = hashCode * 59 + NumberFormat.GetHashCode();
                    if (PageLayout != null)
                    hashCode = hashCode * 59 + PageLayout.GetHashCode();
                    if (PageNumberFormat != null)
                    hashCode = hashCode * 59 + PageNumberFormat.GetHashCode();
                    if (ShowEachTaxInGroup != null)
                    hashCode = hashCode * 59 + ShowEachTaxInGroup.GetHashCode();
                    if (ShowGridHeader != null)
                    hashCode = hashCode * 59 + ShowGridHeader.GetHashCode();
                    if (ShowTaxCategory != null)
                    hashCode = hashCode * 59 + ShowTaxCategory.GetHashCode();
                    if (ShowVerticalGridLines != null)
                    hashCode = hashCode * 59 + ShowVerticalGridLines.GetHashCode();
                    if (UserDefinedFields != null)
                    hashCode = hashCode * 59 + UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(QuoteTemplateModel left, QuoteTemplateModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(QuoteTemplateModel left, QuoteTemplateModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
