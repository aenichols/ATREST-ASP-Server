/*
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PagingModel : IEquatable<PagingModel>
    { 
        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name="count")]
        public int? Count { get; set; }

        /// <summary>
        /// Gets or Sets RequestCount
        /// </summary>
        [DataMember(Name="requestCount")]
        public int? RequestCount { get; private set; }

        /// <summary>
        /// Gets or Sets PrevPageUrl
        /// </summary>
        [DataMember(Name="prevPageUrl")]
        public string PrevPageUrl { get; set; }

        /// <summary>
        /// Gets or Sets NextPageUrl
        /// </summary>
        [DataMember(Name="nextPageUrl")]
        public string NextPageUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PagingModel {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  RequestCount: ").Append(RequestCount).Append("\n");
            sb.Append("  PrevPageUrl: ").Append(PrevPageUrl).Append("\n");
            sb.Append("  NextPageUrl: ").Append(NextPageUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PagingModel)obj);
        }

        /// <summary>
        /// Returns true if PagingModel instances are equal
        /// </summary>
        /// <param name="other">Instance of PagingModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PagingModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Count == other.Count ||
                    Count != null &&
                    Count.Equals(other.Count)
                ) && 
                (
                    RequestCount == other.RequestCount ||
                    RequestCount != null &&
                    RequestCount.Equals(other.RequestCount)
                ) && 
                (
                    PrevPageUrl == other.PrevPageUrl ||
                    PrevPageUrl != null &&
                    PrevPageUrl.Equals(other.PrevPageUrl)
                ) && 
                (
                    NextPageUrl == other.NextPageUrl ||
                    NextPageUrl != null &&
                    NextPageUrl.Equals(other.NextPageUrl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Count != null)
                    hashCode = hashCode * 59 + Count.GetHashCode();
                    if (RequestCount != null)
                    hashCode = hashCode * 59 + RequestCount.GetHashCode();
                    if (PrevPageUrl != null)
                    hashCode = hashCode * 59 + PrevPageUrl.GetHashCode();
                    if (NextPageUrl != null)
                    hashCode = hashCode * 59 + NextPageUrl.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PagingModel left, PagingModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PagingModel left, PagingModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
