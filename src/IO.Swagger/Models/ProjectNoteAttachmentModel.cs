/*
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ProjectNoteAttachmentModel : IEquatable<ProjectNoteAttachmentModel>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets AttachDate
        /// </summary>
        [DataMember(Name="attachDate")]
        public DateTime? AttachDate { get; set; }

        /// <summary>
        /// Gets or Sets AttachedByContactID
        /// </summary>
        [DataMember(Name="attachedByContactID")]
        public long? AttachedByContactID { get; set; }

        /// <summary>
        /// Gets or Sets AttachedByResourceID
        /// </summary>
        [DataMember(Name="attachedByResourceID")]
        public long? AttachedByResourceID { get; set; }

        /// <summary>
        /// Gets or Sets AttachmentType
        /// </summary>
        [DataMember(Name="attachmentType")]
        public string AttachmentType { get; set; }

        /// <summary>
        /// Gets or Sets ContentType
        /// </summary>
        [DataMember(Name="contentType")]
        public string ContentType { get; set; }

        /// <summary>
        /// Gets or Sets CreatorType
        /// </summary>
        [DataMember(Name="creatorType")]
        public int? CreatorType { get; set; }

        /// <summary>
        /// Gets or Sets FileSize
        /// </summary>
        [DataMember(Name="fileSize")]
        public double? FileSize { get; set; }

        /// <summary>
        /// Gets or Sets FullPath
        /// </summary>
        [DataMember(Name="fullPath")]
        public string FullPath { get; set; }

        /// <summary>
        /// Gets or Sets ImpersonatorCreatorResourceID
        /// </summary>
        [DataMember(Name="impersonatorCreatorResourceID")]
        public int? ImpersonatorCreatorResourceID { get; set; }

        /// <summary>
        /// Gets or Sets OpportunityID
        /// </summary>
        [DataMember(Name="opportunityID")]
        public long? OpportunityID { get; set; }

        /// <summary>
        /// Gets or Sets ParentID
        /// </summary>
        [DataMember(Name="parentID")]
        public long? ParentID { get; set; }

        /// <summary>
        /// Gets or Sets Publish
        /// </summary>
        [DataMember(Name="publish")]
        public int? Publish { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title")]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name="data")]
        public byte[] Data { get; set; }

        /// <summary>
        /// Gets or Sets ParentType
        /// </summary>
        [DataMember(Name="parentType")]
        public int? ParentType { get; private set; }

        /// <summary>
        /// Gets or Sets IsTaskAttachment
        /// </summary>
        [DataMember(Name="isTaskAttachment")]
        public bool? IsTaskAttachment { get; private set; }

        /// <summary>
        /// Gets or Sets SoapParentPropertyId
        /// </summary>
        [DataMember(Name="soapParentPropertyId")]
        public ExpressionFuncAttachmentInfoInt64 SoapParentPropertyId { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectNoteAttachmentModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AttachDate: ").Append(AttachDate).Append("\n");
            sb.Append("  AttachedByContactID: ").Append(AttachedByContactID).Append("\n");
            sb.Append("  AttachedByResourceID: ").Append(AttachedByResourceID).Append("\n");
            sb.Append("  AttachmentType: ").Append(AttachmentType).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  CreatorType: ").Append(CreatorType).Append("\n");
            sb.Append("  FileSize: ").Append(FileSize).Append("\n");
            sb.Append("  FullPath: ").Append(FullPath).Append("\n");
            sb.Append("  ImpersonatorCreatorResourceID: ").Append(ImpersonatorCreatorResourceID).Append("\n");
            sb.Append("  OpportunityID: ").Append(OpportunityID).Append("\n");
            sb.Append("  ParentID: ").Append(ParentID).Append("\n");
            sb.Append("  Publish: ").Append(Publish).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  ParentType: ").Append(ParentType).Append("\n");
            sb.Append("  IsTaskAttachment: ").Append(IsTaskAttachment).Append("\n");
            sb.Append("  SoapParentPropertyId: ").Append(SoapParentPropertyId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ProjectNoteAttachmentModel)obj);
        }

        /// <summary>
        /// Returns true if ProjectNoteAttachmentModel instances are equal
        /// </summary>
        /// <param name="other">Instance of ProjectNoteAttachmentModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectNoteAttachmentModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    AttachDate == other.AttachDate ||
                    AttachDate != null &&
                    AttachDate.Equals(other.AttachDate)
                ) && 
                (
                    AttachedByContactID == other.AttachedByContactID ||
                    AttachedByContactID != null &&
                    AttachedByContactID.Equals(other.AttachedByContactID)
                ) && 
                (
                    AttachedByResourceID == other.AttachedByResourceID ||
                    AttachedByResourceID != null &&
                    AttachedByResourceID.Equals(other.AttachedByResourceID)
                ) && 
                (
                    AttachmentType == other.AttachmentType ||
                    AttachmentType != null &&
                    AttachmentType.Equals(other.AttachmentType)
                ) && 
                (
                    ContentType == other.ContentType ||
                    ContentType != null &&
                    ContentType.Equals(other.ContentType)
                ) && 
                (
                    CreatorType == other.CreatorType ||
                    CreatorType != null &&
                    CreatorType.Equals(other.CreatorType)
                ) && 
                (
                    FileSize == other.FileSize ||
                    FileSize != null &&
                    FileSize.Equals(other.FileSize)
                ) && 
                (
                    FullPath == other.FullPath ||
                    FullPath != null &&
                    FullPath.Equals(other.FullPath)
                ) && 
                (
                    ImpersonatorCreatorResourceID == other.ImpersonatorCreatorResourceID ||
                    ImpersonatorCreatorResourceID != null &&
                    ImpersonatorCreatorResourceID.Equals(other.ImpersonatorCreatorResourceID)
                ) && 
                (
                    OpportunityID == other.OpportunityID ||
                    OpportunityID != null &&
                    OpportunityID.Equals(other.OpportunityID)
                ) && 
                (
                    ParentID == other.ParentID ||
                    ParentID != null &&
                    ParentID.Equals(other.ParentID)
                ) && 
                (
                    Publish == other.Publish ||
                    Publish != null &&
                    Publish.Equals(other.Publish)
                ) && 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                ) && 
                (
                    Data == other.Data ||
                    Data != null &&
                    Data.Equals(other.Data)
                ) && 
                (
                    ParentType == other.ParentType ||
                    ParentType != null &&
                    ParentType.Equals(other.ParentType)
                ) && 
                (
                    IsTaskAttachment == other.IsTaskAttachment ||
                    IsTaskAttachment != null &&
                    IsTaskAttachment.Equals(other.IsTaskAttachment)
                ) && 
                (
                    SoapParentPropertyId == other.SoapParentPropertyId ||
                    SoapParentPropertyId != null &&
                    SoapParentPropertyId.Equals(other.SoapParentPropertyId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (AttachDate != null)
                    hashCode = hashCode * 59 + AttachDate.GetHashCode();
                    if (AttachedByContactID != null)
                    hashCode = hashCode * 59 + AttachedByContactID.GetHashCode();
                    if (AttachedByResourceID != null)
                    hashCode = hashCode * 59 + AttachedByResourceID.GetHashCode();
                    if (AttachmentType != null)
                    hashCode = hashCode * 59 + AttachmentType.GetHashCode();
                    if (ContentType != null)
                    hashCode = hashCode * 59 + ContentType.GetHashCode();
                    if (CreatorType != null)
                    hashCode = hashCode * 59 + CreatorType.GetHashCode();
                    if (FileSize != null)
                    hashCode = hashCode * 59 + FileSize.GetHashCode();
                    if (FullPath != null)
                    hashCode = hashCode * 59 + FullPath.GetHashCode();
                    if (ImpersonatorCreatorResourceID != null)
                    hashCode = hashCode * 59 + ImpersonatorCreatorResourceID.GetHashCode();
                    if (OpportunityID != null)
                    hashCode = hashCode * 59 + OpportunityID.GetHashCode();
                    if (ParentID != null)
                    hashCode = hashCode * 59 + ParentID.GetHashCode();
                    if (Publish != null)
                    hashCode = hashCode * 59 + Publish.GetHashCode();
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    if (Data != null)
                    hashCode = hashCode * 59 + Data.GetHashCode();
                    if (ParentType != null)
                    hashCode = hashCode * 59 + ParentType.GetHashCode();
                    if (IsTaskAttachment != null)
                    hashCode = hashCode * 59 + IsTaskAttachment.GetHashCode();
                    if (SoapParentPropertyId != null)
                    hashCode = hashCode * 59 + SoapParentPropertyId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ProjectNoteAttachmentModel left, ProjectNoteAttachmentModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProjectNoteAttachmentModel left, ProjectNoteAttachmentModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
