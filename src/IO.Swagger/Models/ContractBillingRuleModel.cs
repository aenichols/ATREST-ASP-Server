/*
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ContractBillingRuleModel : IEquatable<ContractBillingRuleModel>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets ContractID
        /// </summary>
        [DataMember(Name="contractID")]
        public int? ContractID { get; set; }

        /// <summary>
        /// Gets or Sets CreateChargesAsBillable
        /// </summary>
        [DataMember(Name="createChargesAsBillable")]
        public bool? CreateChargesAsBillable { get; set; }

        /// <summary>
        /// Gets or Sets DailyProratedCost
        /// </summary>
        [DataMember(Name="dailyProratedCost")]
        public double? DailyProratedCost { get; set; }

        /// <summary>
        /// Gets or Sets DailyProratedPrice
        /// </summary>
        [DataMember(Name="dailyProratedPrice")]
        public double? DailyProratedPrice { get; set; }

        /// <summary>
        /// Gets or Sets DetermineUnits
        /// </summary>
        [DataMember(Name="determineUnits")]
        public int? DetermineUnits { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="endDate")]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or Sets ExecutionMethod
        /// </summary>
        [DataMember(Name="executionMethod")]
        public int? ExecutionMethod { get; set; }

        /// <summary>
        /// Gets or Sets IncludeItemsInChargeDescription
        /// </summary>
        [DataMember(Name="includeItemsInChargeDescription")]
        public bool? IncludeItemsInChargeDescription { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceDescription
        /// </summary>
        [DataMember(Name="invoiceDescription")]
        public string InvoiceDescription { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="isActive")]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets IsDailyProrationEnabled
        /// </summary>
        [DataMember(Name="isDailyProrationEnabled")]
        public bool? IsDailyProrationEnabled { get; set; }

        /// <summary>
        /// Gets or Sets MaximumUnits
        /// </summary>
        [DataMember(Name="maximumUnits")]
        public int? MaximumUnits { get; set; }

        /// <summary>
        /// Gets or Sets MinimumUnits
        /// </summary>
        [DataMember(Name="minimumUnits")]
        public int? MinimumUnits { get; set; }

        /// <summary>
        /// Gets or Sets ProductID
        /// </summary>
        [DataMember(Name="productID")]
        public int? ProductID { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="startDate")]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets SoapParentPropertyId
        /// </summary>
        [DataMember(Name="soapParentPropertyId")]
        public ExpressionFuncContractBillingRuleInt64 SoapParentPropertyId { get; private set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields")]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContractBillingRuleModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ContractID: ").Append(ContractID).Append("\n");
            sb.Append("  CreateChargesAsBillable: ").Append(CreateChargesAsBillable).Append("\n");
            sb.Append("  DailyProratedCost: ").Append(DailyProratedCost).Append("\n");
            sb.Append("  DailyProratedPrice: ").Append(DailyProratedPrice).Append("\n");
            sb.Append("  DetermineUnits: ").Append(DetermineUnits).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  ExecutionMethod: ").Append(ExecutionMethod).Append("\n");
            sb.Append("  IncludeItemsInChargeDescription: ").Append(IncludeItemsInChargeDescription).Append("\n");
            sb.Append("  InvoiceDescription: ").Append(InvoiceDescription).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsDailyProrationEnabled: ").Append(IsDailyProrationEnabled).Append("\n");
            sb.Append("  MaximumUnits: ").Append(MaximumUnits).Append("\n");
            sb.Append("  MinimumUnits: ").Append(MinimumUnits).Append("\n");
            sb.Append("  ProductID: ").Append(ProductID).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  SoapParentPropertyId: ").Append(SoapParentPropertyId).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ContractBillingRuleModel)obj);
        }

        /// <summary>
        /// Returns true if ContractBillingRuleModel instances are equal
        /// </summary>
        /// <param name="other">Instance of ContractBillingRuleModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContractBillingRuleModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    ContractID == other.ContractID ||
                    ContractID != null &&
                    ContractID.Equals(other.ContractID)
                ) && 
                (
                    CreateChargesAsBillable == other.CreateChargesAsBillable ||
                    CreateChargesAsBillable != null &&
                    CreateChargesAsBillable.Equals(other.CreateChargesAsBillable)
                ) && 
                (
                    DailyProratedCost == other.DailyProratedCost ||
                    DailyProratedCost != null &&
                    DailyProratedCost.Equals(other.DailyProratedCost)
                ) && 
                (
                    DailyProratedPrice == other.DailyProratedPrice ||
                    DailyProratedPrice != null &&
                    DailyProratedPrice.Equals(other.DailyProratedPrice)
                ) && 
                (
                    DetermineUnits == other.DetermineUnits ||
                    DetermineUnits != null &&
                    DetermineUnits.Equals(other.DetermineUnits)
                ) && 
                (
                    EndDate == other.EndDate ||
                    EndDate != null &&
                    EndDate.Equals(other.EndDate)
                ) && 
                (
                    ExecutionMethod == other.ExecutionMethod ||
                    ExecutionMethod != null &&
                    ExecutionMethod.Equals(other.ExecutionMethod)
                ) && 
                (
                    IncludeItemsInChargeDescription == other.IncludeItemsInChargeDescription ||
                    IncludeItemsInChargeDescription != null &&
                    IncludeItemsInChargeDescription.Equals(other.IncludeItemsInChargeDescription)
                ) && 
                (
                    InvoiceDescription == other.InvoiceDescription ||
                    InvoiceDescription != null &&
                    InvoiceDescription.Equals(other.InvoiceDescription)
                ) && 
                (
                    IsActive == other.IsActive ||
                    IsActive != null &&
                    IsActive.Equals(other.IsActive)
                ) && 
                (
                    IsDailyProrationEnabled == other.IsDailyProrationEnabled ||
                    IsDailyProrationEnabled != null &&
                    IsDailyProrationEnabled.Equals(other.IsDailyProrationEnabled)
                ) && 
                (
                    MaximumUnits == other.MaximumUnits ||
                    MaximumUnits != null &&
                    MaximumUnits.Equals(other.MaximumUnits)
                ) && 
                (
                    MinimumUnits == other.MinimumUnits ||
                    MinimumUnits != null &&
                    MinimumUnits.Equals(other.MinimumUnits)
                ) && 
                (
                    ProductID == other.ProductID ||
                    ProductID != null &&
                    ProductID.Equals(other.ProductID)
                ) && 
                (
                    StartDate == other.StartDate ||
                    StartDate != null &&
                    StartDate.Equals(other.StartDate)
                ) && 
                (
                    SoapParentPropertyId == other.SoapParentPropertyId ||
                    SoapParentPropertyId != null &&
                    SoapParentPropertyId.Equals(other.SoapParentPropertyId)
                ) && 
                (
                    UserDefinedFields == other.UserDefinedFields ||
                    UserDefinedFields != null &&
                    UserDefinedFields.SequenceEqual(other.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (ContractID != null)
                    hashCode = hashCode * 59 + ContractID.GetHashCode();
                    if (CreateChargesAsBillable != null)
                    hashCode = hashCode * 59 + CreateChargesAsBillable.GetHashCode();
                    if (DailyProratedCost != null)
                    hashCode = hashCode * 59 + DailyProratedCost.GetHashCode();
                    if (DailyProratedPrice != null)
                    hashCode = hashCode * 59 + DailyProratedPrice.GetHashCode();
                    if (DetermineUnits != null)
                    hashCode = hashCode * 59 + DetermineUnits.GetHashCode();
                    if (EndDate != null)
                    hashCode = hashCode * 59 + EndDate.GetHashCode();
                    if (ExecutionMethod != null)
                    hashCode = hashCode * 59 + ExecutionMethod.GetHashCode();
                    if (IncludeItemsInChargeDescription != null)
                    hashCode = hashCode * 59 + IncludeItemsInChargeDescription.GetHashCode();
                    if (InvoiceDescription != null)
                    hashCode = hashCode * 59 + InvoiceDescription.GetHashCode();
                    if (IsActive != null)
                    hashCode = hashCode * 59 + IsActive.GetHashCode();
                    if (IsDailyProrationEnabled != null)
                    hashCode = hashCode * 59 + IsDailyProrationEnabled.GetHashCode();
                    if (MaximumUnits != null)
                    hashCode = hashCode * 59 + MaximumUnits.GetHashCode();
                    if (MinimumUnits != null)
                    hashCode = hashCode * 59 + MinimumUnits.GetHashCode();
                    if (ProductID != null)
                    hashCode = hashCode * 59 + ProductID.GetHashCode();
                    if (StartDate != null)
                    hashCode = hashCode * 59 + StartDate.GetHashCode();
                    if (SoapParentPropertyId != null)
                    hashCode = hashCode * 59 + SoapParentPropertyId.GetHashCode();
                    if (UserDefinedFields != null)
                    hashCode = hashCode * 59 + UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ContractBillingRuleModel left, ContractBillingRuleModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ContractBillingRuleModel left, ContractBillingRuleModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
