/*
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ServiceLevelAgreementResultsModel : IEquatable<ServiceLevelAgreementResultsModel>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets FirstResponseElapsedHours
        /// </summary>
        [DataMember(Name="firstResponseElapsedHours")]
        public double? FirstResponseElapsedHours { get; set; }

        /// <summary>
        /// Gets or Sets FirstResponseInitiatingResourceID
        /// </summary>
        [DataMember(Name="firstResponseInitiatingResourceID")]
        public int? FirstResponseInitiatingResourceID { get; set; }

        /// <summary>
        /// Gets or Sets FirstResponseResourceID
        /// </summary>
        [DataMember(Name="firstResponseResourceID")]
        public int? FirstResponseResourceID { get; set; }

        /// <summary>
        /// Gets or Sets IsFirstResponseMet
        /// </summary>
        [DataMember(Name="isFirstResponseMet")]
        public bool? IsFirstResponseMet { get; set; }

        /// <summary>
        /// Gets or Sets IsResolutionMet
        /// </summary>
        [DataMember(Name="isResolutionMet")]
        public bool? IsResolutionMet { get; set; }

        /// <summary>
        /// Gets or Sets IsResolutionPlanMet
        /// </summary>
        [DataMember(Name="isResolutionPlanMet")]
        public bool? IsResolutionPlanMet { get; set; }

        /// <summary>
        /// Gets or Sets ResolutionElapsedHours
        /// </summary>
        [DataMember(Name="resolutionElapsedHours")]
        public double? ResolutionElapsedHours { get; set; }

        /// <summary>
        /// Gets or Sets ResolutionPlanElapsedHours
        /// </summary>
        [DataMember(Name="resolutionPlanElapsedHours")]
        public double? ResolutionPlanElapsedHours { get; set; }

        /// <summary>
        /// Gets or Sets ResolutionPlanResourceID
        /// </summary>
        [DataMember(Name="resolutionPlanResourceID")]
        public int? ResolutionPlanResourceID { get; set; }

        /// <summary>
        /// Gets or Sets ResolutionResourceID
        /// </summary>
        [DataMember(Name="resolutionResourceID")]
        public int? ResolutionResourceID { get; set; }

        /// <summary>
        /// Gets or Sets ServiceLevelAgreementName
        /// </summary>
        [DataMember(Name="serviceLevelAgreementName")]
        public string ServiceLevelAgreementName { get; set; }

        /// <summary>
        /// Gets or Sets TicketID
        /// </summary>
        [DataMember(Name="ticketID")]
        public int? TicketID { get; set; }

        /// <summary>
        /// Gets or Sets SoapParentPropertyId
        /// </summary>
        [DataMember(Name="soapParentPropertyId")]
        public long? SoapParentPropertyId { get; private set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields")]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServiceLevelAgreementResultsModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FirstResponseElapsedHours: ").Append(FirstResponseElapsedHours).Append("\n");
            sb.Append("  FirstResponseInitiatingResourceID: ").Append(FirstResponseInitiatingResourceID).Append("\n");
            sb.Append("  FirstResponseResourceID: ").Append(FirstResponseResourceID).Append("\n");
            sb.Append("  IsFirstResponseMet: ").Append(IsFirstResponseMet).Append("\n");
            sb.Append("  IsResolutionMet: ").Append(IsResolutionMet).Append("\n");
            sb.Append("  IsResolutionPlanMet: ").Append(IsResolutionPlanMet).Append("\n");
            sb.Append("  ResolutionElapsedHours: ").Append(ResolutionElapsedHours).Append("\n");
            sb.Append("  ResolutionPlanElapsedHours: ").Append(ResolutionPlanElapsedHours).Append("\n");
            sb.Append("  ResolutionPlanResourceID: ").Append(ResolutionPlanResourceID).Append("\n");
            sb.Append("  ResolutionResourceID: ").Append(ResolutionResourceID).Append("\n");
            sb.Append("  ServiceLevelAgreementName: ").Append(ServiceLevelAgreementName).Append("\n");
            sb.Append("  TicketID: ").Append(TicketID).Append("\n");
            sb.Append("  SoapParentPropertyId: ").Append(SoapParentPropertyId).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ServiceLevelAgreementResultsModel)obj);
        }

        /// <summary>
        /// Returns true if ServiceLevelAgreementResultsModel instances are equal
        /// </summary>
        /// <param name="other">Instance of ServiceLevelAgreementResultsModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServiceLevelAgreementResultsModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    FirstResponseElapsedHours == other.FirstResponseElapsedHours ||
                    FirstResponseElapsedHours != null &&
                    FirstResponseElapsedHours.Equals(other.FirstResponseElapsedHours)
                ) && 
                (
                    FirstResponseInitiatingResourceID == other.FirstResponseInitiatingResourceID ||
                    FirstResponseInitiatingResourceID != null &&
                    FirstResponseInitiatingResourceID.Equals(other.FirstResponseInitiatingResourceID)
                ) && 
                (
                    FirstResponseResourceID == other.FirstResponseResourceID ||
                    FirstResponseResourceID != null &&
                    FirstResponseResourceID.Equals(other.FirstResponseResourceID)
                ) && 
                (
                    IsFirstResponseMet == other.IsFirstResponseMet ||
                    IsFirstResponseMet != null &&
                    IsFirstResponseMet.Equals(other.IsFirstResponseMet)
                ) && 
                (
                    IsResolutionMet == other.IsResolutionMet ||
                    IsResolutionMet != null &&
                    IsResolutionMet.Equals(other.IsResolutionMet)
                ) && 
                (
                    IsResolutionPlanMet == other.IsResolutionPlanMet ||
                    IsResolutionPlanMet != null &&
                    IsResolutionPlanMet.Equals(other.IsResolutionPlanMet)
                ) && 
                (
                    ResolutionElapsedHours == other.ResolutionElapsedHours ||
                    ResolutionElapsedHours != null &&
                    ResolutionElapsedHours.Equals(other.ResolutionElapsedHours)
                ) && 
                (
                    ResolutionPlanElapsedHours == other.ResolutionPlanElapsedHours ||
                    ResolutionPlanElapsedHours != null &&
                    ResolutionPlanElapsedHours.Equals(other.ResolutionPlanElapsedHours)
                ) && 
                (
                    ResolutionPlanResourceID == other.ResolutionPlanResourceID ||
                    ResolutionPlanResourceID != null &&
                    ResolutionPlanResourceID.Equals(other.ResolutionPlanResourceID)
                ) && 
                (
                    ResolutionResourceID == other.ResolutionResourceID ||
                    ResolutionResourceID != null &&
                    ResolutionResourceID.Equals(other.ResolutionResourceID)
                ) && 
                (
                    ServiceLevelAgreementName == other.ServiceLevelAgreementName ||
                    ServiceLevelAgreementName != null &&
                    ServiceLevelAgreementName.Equals(other.ServiceLevelAgreementName)
                ) && 
                (
                    TicketID == other.TicketID ||
                    TicketID != null &&
                    TicketID.Equals(other.TicketID)
                ) && 
                (
                    SoapParentPropertyId == other.SoapParentPropertyId ||
                    SoapParentPropertyId != null &&
                    SoapParentPropertyId.Equals(other.SoapParentPropertyId)
                ) && 
                (
                    UserDefinedFields == other.UserDefinedFields ||
                    UserDefinedFields != null &&
                    UserDefinedFields.SequenceEqual(other.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (FirstResponseElapsedHours != null)
                    hashCode = hashCode * 59 + FirstResponseElapsedHours.GetHashCode();
                    if (FirstResponseInitiatingResourceID != null)
                    hashCode = hashCode * 59 + FirstResponseInitiatingResourceID.GetHashCode();
                    if (FirstResponseResourceID != null)
                    hashCode = hashCode * 59 + FirstResponseResourceID.GetHashCode();
                    if (IsFirstResponseMet != null)
                    hashCode = hashCode * 59 + IsFirstResponseMet.GetHashCode();
                    if (IsResolutionMet != null)
                    hashCode = hashCode * 59 + IsResolutionMet.GetHashCode();
                    if (IsResolutionPlanMet != null)
                    hashCode = hashCode * 59 + IsResolutionPlanMet.GetHashCode();
                    if (ResolutionElapsedHours != null)
                    hashCode = hashCode * 59 + ResolutionElapsedHours.GetHashCode();
                    if (ResolutionPlanElapsedHours != null)
                    hashCode = hashCode * 59 + ResolutionPlanElapsedHours.GetHashCode();
                    if (ResolutionPlanResourceID != null)
                    hashCode = hashCode * 59 + ResolutionPlanResourceID.GetHashCode();
                    if (ResolutionResourceID != null)
                    hashCode = hashCode * 59 + ResolutionResourceID.GetHashCode();
                    if (ServiceLevelAgreementName != null)
                    hashCode = hashCode * 59 + ServiceLevelAgreementName.GetHashCode();
                    if (TicketID != null)
                    hashCode = hashCode * 59 + TicketID.GetHashCode();
                    if (SoapParentPropertyId != null)
                    hashCode = hashCode * 59 + SoapParentPropertyId.GetHashCode();
                    if (UserDefinedFields != null)
                    hashCode = hashCode * 59 + UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ServiceLevelAgreementResultsModel left, ServiceLevelAgreementResultsModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ServiceLevelAgreementResultsModel left, ServiceLevelAgreementResultsModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
