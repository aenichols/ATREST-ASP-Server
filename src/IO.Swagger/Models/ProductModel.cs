/*
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ProductModel : IEquatable<ProductModel>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets BillingType
        /// </summary>
        [DataMember(Name="billingType")]
        public int? BillingType { get; set; }

        /// <summary>
        /// Gets or Sets ChargeBillingCodeID
        /// </summary>
        [DataMember(Name="chargeBillingCodeID")]
        public int? ChargeBillingCodeID { get; set; }

        /// <summary>
        /// Gets or Sets DefaultVendorID
        /// </summary>
        [DataMember(Name="defaultVendorID")]
        public int? DefaultVendorID { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DoesNotRequireProcurement
        /// </summary>
        [DataMember(Name="doesNotRequireProcurement")]
        public bool? DoesNotRequireProcurement { get; set; }

        /// <summary>
        /// Gets or Sets ExternalProductID
        /// </summary>
        [DataMember(Name="externalProductID")]
        public string ExternalProductID { get; set; }

        /// <summary>
        /// Gets or Sets ImpersonatorCreatorResourceID
        /// </summary>
        [DataMember(Name="impersonatorCreatorResourceID")]
        public int? ImpersonatorCreatorResourceID { get; set; }

        /// <summary>
        /// Gets or Sets InternalProductID
        /// </summary>
        [DataMember(Name="internalProductID")]
        public string InternalProductID { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="isActive")]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets IsEligibleForRma
        /// </summary>
        [DataMember(Name="isEligibleForRma")]
        public bool? IsEligibleForRma { get; set; }

        /// <summary>
        /// Gets or Sets IsSerialized
        /// </summary>
        [DataMember(Name="isSerialized")]
        public bool? IsSerialized { get; set; }

        /// <summary>
        /// Gets or Sets Link
        /// </summary>
        [DataMember(Name="link")]
        public string Link { get; set; }

        /// <summary>
        /// Gets or Sets ManufacturerName
        /// </summary>
        [DataMember(Name="manufacturerName")]
        public string ManufacturerName { get; set; }

        /// <summary>
        /// Gets or Sets ManufacturerProductName
        /// </summary>
        [DataMember(Name="manufacturerProductName")]
        public string ManufacturerProductName { get; set; }

        /// <summary>
        /// Gets or Sets MarkupRate
        /// </summary>
        [DataMember(Name="markupRate")]
        public double? MarkupRate { get; set; }

        /// <summary>
        /// Gets or Sets Msrp
        /// </summary>
        [DataMember(Name="msrp")]
        public double? Msrp { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets PeriodType
        /// </summary>
        [DataMember(Name="periodType")]
        public int? PeriodType { get; set; }

        /// <summary>
        /// Gets or Sets PriceCostMethod
        /// </summary>
        [DataMember(Name="priceCostMethod")]
        public int? PriceCostMethod { get; set; }

        /// <summary>
        /// Gets or Sets ProductBillingCodeID
        /// </summary>
        [DataMember(Name="productBillingCodeID")]
        public int? ProductBillingCodeID { get; set; }

        /// <summary>
        /// Gets or Sets ProductCategory
        /// </summary>
        [DataMember(Name="productCategory")]
        public int? ProductCategory { get; set; }

        /// <summary>
        /// Gets or Sets Sku
        /// </summary>
        [DataMember(Name="sku")]
        public string Sku { get; set; }

        /// <summary>
        /// Gets or Sets UnitCost
        /// </summary>
        [DataMember(Name="unitCost")]
        public double? UnitCost { get; set; }

        /// <summary>
        /// Gets or Sets UnitPrice
        /// </summary>
        [DataMember(Name="unitPrice")]
        public double? UnitPrice { get; set; }

        /// <summary>
        /// Gets or Sets VendorProductNumber
        /// </summary>
        [DataMember(Name="vendorProductNumber")]
        public string VendorProductNumber { get; set; }

        /// <summary>
        /// Gets or Sets DefaultInstalledProductCategoryID
        /// </summary>
        [DataMember(Name="defaultInstalledProductCategoryID")]
        public int? DefaultInstalledProductCategoryID { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields")]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BillingType: ").Append(BillingType).Append("\n");
            sb.Append("  ChargeBillingCodeID: ").Append(ChargeBillingCodeID).Append("\n");
            sb.Append("  DefaultVendorID: ").Append(DefaultVendorID).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DoesNotRequireProcurement: ").Append(DoesNotRequireProcurement).Append("\n");
            sb.Append("  ExternalProductID: ").Append(ExternalProductID).Append("\n");
            sb.Append("  ImpersonatorCreatorResourceID: ").Append(ImpersonatorCreatorResourceID).Append("\n");
            sb.Append("  InternalProductID: ").Append(InternalProductID).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsEligibleForRma: ").Append(IsEligibleForRma).Append("\n");
            sb.Append("  IsSerialized: ").Append(IsSerialized).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  ManufacturerName: ").Append(ManufacturerName).Append("\n");
            sb.Append("  ManufacturerProductName: ").Append(ManufacturerProductName).Append("\n");
            sb.Append("  MarkupRate: ").Append(MarkupRate).Append("\n");
            sb.Append("  Msrp: ").Append(Msrp).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PeriodType: ").Append(PeriodType).Append("\n");
            sb.Append("  PriceCostMethod: ").Append(PriceCostMethod).Append("\n");
            sb.Append("  ProductBillingCodeID: ").Append(ProductBillingCodeID).Append("\n");
            sb.Append("  ProductCategory: ").Append(ProductCategory).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  UnitCost: ").Append(UnitCost).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  VendorProductNumber: ").Append(VendorProductNumber).Append("\n");
            sb.Append("  DefaultInstalledProductCategoryID: ").Append(DefaultInstalledProductCategoryID).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ProductModel)obj);
        }

        /// <summary>
        /// Returns true if ProductModel instances are equal
        /// </summary>
        /// <param name="other">Instance of ProductModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    BillingType == other.BillingType ||
                    BillingType != null &&
                    BillingType.Equals(other.BillingType)
                ) && 
                (
                    ChargeBillingCodeID == other.ChargeBillingCodeID ||
                    ChargeBillingCodeID != null &&
                    ChargeBillingCodeID.Equals(other.ChargeBillingCodeID)
                ) && 
                (
                    DefaultVendorID == other.DefaultVendorID ||
                    DefaultVendorID != null &&
                    DefaultVendorID.Equals(other.DefaultVendorID)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    DoesNotRequireProcurement == other.DoesNotRequireProcurement ||
                    DoesNotRequireProcurement != null &&
                    DoesNotRequireProcurement.Equals(other.DoesNotRequireProcurement)
                ) && 
                (
                    ExternalProductID == other.ExternalProductID ||
                    ExternalProductID != null &&
                    ExternalProductID.Equals(other.ExternalProductID)
                ) && 
                (
                    ImpersonatorCreatorResourceID == other.ImpersonatorCreatorResourceID ||
                    ImpersonatorCreatorResourceID != null &&
                    ImpersonatorCreatorResourceID.Equals(other.ImpersonatorCreatorResourceID)
                ) && 
                (
                    InternalProductID == other.InternalProductID ||
                    InternalProductID != null &&
                    InternalProductID.Equals(other.InternalProductID)
                ) && 
                (
                    IsActive == other.IsActive ||
                    IsActive != null &&
                    IsActive.Equals(other.IsActive)
                ) && 
                (
                    IsEligibleForRma == other.IsEligibleForRma ||
                    IsEligibleForRma != null &&
                    IsEligibleForRma.Equals(other.IsEligibleForRma)
                ) && 
                (
                    IsSerialized == other.IsSerialized ||
                    IsSerialized != null &&
                    IsSerialized.Equals(other.IsSerialized)
                ) && 
                (
                    Link == other.Link ||
                    Link != null &&
                    Link.Equals(other.Link)
                ) && 
                (
                    ManufacturerName == other.ManufacturerName ||
                    ManufacturerName != null &&
                    ManufacturerName.Equals(other.ManufacturerName)
                ) && 
                (
                    ManufacturerProductName == other.ManufacturerProductName ||
                    ManufacturerProductName != null &&
                    ManufacturerProductName.Equals(other.ManufacturerProductName)
                ) && 
                (
                    MarkupRate == other.MarkupRate ||
                    MarkupRate != null &&
                    MarkupRate.Equals(other.MarkupRate)
                ) && 
                (
                    Msrp == other.Msrp ||
                    Msrp != null &&
                    Msrp.Equals(other.Msrp)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    PeriodType == other.PeriodType ||
                    PeriodType != null &&
                    PeriodType.Equals(other.PeriodType)
                ) && 
                (
                    PriceCostMethod == other.PriceCostMethod ||
                    PriceCostMethod != null &&
                    PriceCostMethod.Equals(other.PriceCostMethod)
                ) && 
                (
                    ProductBillingCodeID == other.ProductBillingCodeID ||
                    ProductBillingCodeID != null &&
                    ProductBillingCodeID.Equals(other.ProductBillingCodeID)
                ) && 
                (
                    ProductCategory == other.ProductCategory ||
                    ProductCategory != null &&
                    ProductCategory.Equals(other.ProductCategory)
                ) && 
                (
                    Sku == other.Sku ||
                    Sku != null &&
                    Sku.Equals(other.Sku)
                ) && 
                (
                    UnitCost == other.UnitCost ||
                    UnitCost != null &&
                    UnitCost.Equals(other.UnitCost)
                ) && 
                (
                    UnitPrice == other.UnitPrice ||
                    UnitPrice != null &&
                    UnitPrice.Equals(other.UnitPrice)
                ) && 
                (
                    VendorProductNumber == other.VendorProductNumber ||
                    VendorProductNumber != null &&
                    VendorProductNumber.Equals(other.VendorProductNumber)
                ) && 
                (
                    DefaultInstalledProductCategoryID == other.DefaultInstalledProductCategoryID ||
                    DefaultInstalledProductCategoryID != null &&
                    DefaultInstalledProductCategoryID.Equals(other.DefaultInstalledProductCategoryID)
                ) && 
                (
                    UserDefinedFields == other.UserDefinedFields ||
                    UserDefinedFields != null &&
                    UserDefinedFields.SequenceEqual(other.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (BillingType != null)
                    hashCode = hashCode * 59 + BillingType.GetHashCode();
                    if (ChargeBillingCodeID != null)
                    hashCode = hashCode * 59 + ChargeBillingCodeID.GetHashCode();
                    if (DefaultVendorID != null)
                    hashCode = hashCode * 59 + DefaultVendorID.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (DoesNotRequireProcurement != null)
                    hashCode = hashCode * 59 + DoesNotRequireProcurement.GetHashCode();
                    if (ExternalProductID != null)
                    hashCode = hashCode * 59 + ExternalProductID.GetHashCode();
                    if (ImpersonatorCreatorResourceID != null)
                    hashCode = hashCode * 59 + ImpersonatorCreatorResourceID.GetHashCode();
                    if (InternalProductID != null)
                    hashCode = hashCode * 59 + InternalProductID.GetHashCode();
                    if (IsActive != null)
                    hashCode = hashCode * 59 + IsActive.GetHashCode();
                    if (IsEligibleForRma != null)
                    hashCode = hashCode * 59 + IsEligibleForRma.GetHashCode();
                    if (IsSerialized != null)
                    hashCode = hashCode * 59 + IsSerialized.GetHashCode();
                    if (Link != null)
                    hashCode = hashCode * 59 + Link.GetHashCode();
                    if (ManufacturerName != null)
                    hashCode = hashCode * 59 + ManufacturerName.GetHashCode();
                    if (ManufacturerProductName != null)
                    hashCode = hashCode * 59 + ManufacturerProductName.GetHashCode();
                    if (MarkupRate != null)
                    hashCode = hashCode * 59 + MarkupRate.GetHashCode();
                    if (Msrp != null)
                    hashCode = hashCode * 59 + Msrp.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (PeriodType != null)
                    hashCode = hashCode * 59 + PeriodType.GetHashCode();
                    if (PriceCostMethod != null)
                    hashCode = hashCode * 59 + PriceCostMethod.GetHashCode();
                    if (ProductBillingCodeID != null)
                    hashCode = hashCode * 59 + ProductBillingCodeID.GetHashCode();
                    if (ProductCategory != null)
                    hashCode = hashCode * 59 + ProductCategory.GetHashCode();
                    if (Sku != null)
                    hashCode = hashCode * 59 + Sku.GetHashCode();
                    if (UnitCost != null)
                    hashCode = hashCode * 59 + UnitCost.GetHashCode();
                    if (UnitPrice != null)
                    hashCode = hashCode * 59 + UnitPrice.GetHashCode();
                    if (VendorProductNumber != null)
                    hashCode = hashCode * 59 + VendorProductNumber.GetHashCode();
                    if (DefaultInstalledProductCategoryID != null)
                    hashCode = hashCode * 59 + DefaultInstalledProductCategoryID.GetHashCode();
                    if (UserDefinedFields != null)
                    hashCode = hashCode * 59 + UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ProductModel left, ProductModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProductModel left, ProductModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
