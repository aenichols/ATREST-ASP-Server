/*
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PurchaseOrderItemModel : IEquatable<PurchaseOrderItemModel>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets ChargeID
        /// </summary>
        [DataMember(Name="chargeID")]
        public int? ChargeID { get; set; }

        /// <summary>
        /// Gets or Sets ContractID
        /// </summary>
        [DataMember(Name="contractID")]
        public long? ContractID { get; set; }

        /// <summary>
        /// Gets or Sets EstimatedArrivalDate
        /// </summary>
        [DataMember(Name="estimatedArrivalDate")]
        public DateTime? EstimatedArrivalDate { get; set; }

        /// <summary>
        /// Gets or Sets InternalCurrencyUnitCost
        /// </summary>
        [DataMember(Name="internalCurrencyUnitCost")]
        public double? InternalCurrencyUnitCost { get; set; }

        /// <summary>
        /// Gets or Sets InventoryLocationID
        /// </summary>
        [DataMember(Name="inventoryLocationID")]
        public int? InventoryLocationID { get; set; }

        /// <summary>
        /// Gets or Sets Memo
        /// </summary>
        [DataMember(Name="memo")]
        public string Memo { get; set; }

        /// <summary>
        /// Gets or Sets OrderID
        /// </summary>
        [DataMember(Name="orderID")]
        public int? OrderID { get; set; }

        /// <summary>
        /// Gets or Sets ProductID
        /// </summary>
        [DataMember(Name="productID")]
        public int? ProductID { get; set; }

        /// <summary>
        /// Gets or Sets ProjectID
        /// </summary>
        [DataMember(Name="projectID")]
        public long? ProjectID { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="quantity")]
        public int? Quantity { get; set; }

        /// <summary>
        /// Gets or Sets SalesOrderID
        /// </summary>
        [DataMember(Name="salesOrderID")]
        public long? SalesOrderID { get; set; }

        /// <summary>
        /// Gets or Sets TicketID
        /// </summary>
        [DataMember(Name="ticketID")]
        public long? TicketID { get; set; }

        /// <summary>
        /// Gets or Sets UnitCost
        /// </summary>
        [DataMember(Name="unitCost")]
        public double? UnitCost { get; set; }

        /// <summary>
        /// Gets or Sets SoapParentPropertyId
        /// </summary>
        [DataMember(Name="soapParentPropertyId")]
        public ExpressionFuncPurchaseOrderItemInt64 SoapParentPropertyId { get; private set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields")]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PurchaseOrderItemModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ChargeID: ").Append(ChargeID).Append("\n");
            sb.Append("  ContractID: ").Append(ContractID).Append("\n");
            sb.Append("  EstimatedArrivalDate: ").Append(EstimatedArrivalDate).Append("\n");
            sb.Append("  InternalCurrencyUnitCost: ").Append(InternalCurrencyUnitCost).Append("\n");
            sb.Append("  InventoryLocationID: ").Append(InventoryLocationID).Append("\n");
            sb.Append("  Memo: ").Append(Memo).Append("\n");
            sb.Append("  OrderID: ").Append(OrderID).Append("\n");
            sb.Append("  ProductID: ").Append(ProductID).Append("\n");
            sb.Append("  ProjectID: ").Append(ProjectID).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  SalesOrderID: ").Append(SalesOrderID).Append("\n");
            sb.Append("  TicketID: ").Append(TicketID).Append("\n");
            sb.Append("  UnitCost: ").Append(UnitCost).Append("\n");
            sb.Append("  SoapParentPropertyId: ").Append(SoapParentPropertyId).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PurchaseOrderItemModel)obj);
        }

        /// <summary>
        /// Returns true if PurchaseOrderItemModel instances are equal
        /// </summary>
        /// <param name="other">Instance of PurchaseOrderItemModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PurchaseOrderItemModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    ChargeID == other.ChargeID ||
                    ChargeID != null &&
                    ChargeID.Equals(other.ChargeID)
                ) && 
                (
                    ContractID == other.ContractID ||
                    ContractID != null &&
                    ContractID.Equals(other.ContractID)
                ) && 
                (
                    EstimatedArrivalDate == other.EstimatedArrivalDate ||
                    EstimatedArrivalDate != null &&
                    EstimatedArrivalDate.Equals(other.EstimatedArrivalDate)
                ) && 
                (
                    InternalCurrencyUnitCost == other.InternalCurrencyUnitCost ||
                    InternalCurrencyUnitCost != null &&
                    InternalCurrencyUnitCost.Equals(other.InternalCurrencyUnitCost)
                ) && 
                (
                    InventoryLocationID == other.InventoryLocationID ||
                    InventoryLocationID != null &&
                    InventoryLocationID.Equals(other.InventoryLocationID)
                ) && 
                (
                    Memo == other.Memo ||
                    Memo != null &&
                    Memo.Equals(other.Memo)
                ) && 
                (
                    OrderID == other.OrderID ||
                    OrderID != null &&
                    OrderID.Equals(other.OrderID)
                ) && 
                (
                    ProductID == other.ProductID ||
                    ProductID != null &&
                    ProductID.Equals(other.ProductID)
                ) && 
                (
                    ProjectID == other.ProjectID ||
                    ProjectID != null &&
                    ProjectID.Equals(other.ProjectID)
                ) && 
                (
                    Quantity == other.Quantity ||
                    Quantity != null &&
                    Quantity.Equals(other.Quantity)
                ) && 
                (
                    SalesOrderID == other.SalesOrderID ||
                    SalesOrderID != null &&
                    SalesOrderID.Equals(other.SalesOrderID)
                ) && 
                (
                    TicketID == other.TicketID ||
                    TicketID != null &&
                    TicketID.Equals(other.TicketID)
                ) && 
                (
                    UnitCost == other.UnitCost ||
                    UnitCost != null &&
                    UnitCost.Equals(other.UnitCost)
                ) && 
                (
                    SoapParentPropertyId == other.SoapParentPropertyId ||
                    SoapParentPropertyId != null &&
                    SoapParentPropertyId.Equals(other.SoapParentPropertyId)
                ) && 
                (
                    UserDefinedFields == other.UserDefinedFields ||
                    UserDefinedFields != null &&
                    UserDefinedFields.SequenceEqual(other.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (ChargeID != null)
                    hashCode = hashCode * 59 + ChargeID.GetHashCode();
                    if (ContractID != null)
                    hashCode = hashCode * 59 + ContractID.GetHashCode();
                    if (EstimatedArrivalDate != null)
                    hashCode = hashCode * 59 + EstimatedArrivalDate.GetHashCode();
                    if (InternalCurrencyUnitCost != null)
                    hashCode = hashCode * 59 + InternalCurrencyUnitCost.GetHashCode();
                    if (InventoryLocationID != null)
                    hashCode = hashCode * 59 + InventoryLocationID.GetHashCode();
                    if (Memo != null)
                    hashCode = hashCode * 59 + Memo.GetHashCode();
                    if (OrderID != null)
                    hashCode = hashCode * 59 + OrderID.GetHashCode();
                    if (ProductID != null)
                    hashCode = hashCode * 59 + ProductID.GetHashCode();
                    if (ProjectID != null)
                    hashCode = hashCode * 59 + ProjectID.GetHashCode();
                    if (Quantity != null)
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                    if (SalesOrderID != null)
                    hashCode = hashCode * 59 + SalesOrderID.GetHashCode();
                    if (TicketID != null)
                    hashCode = hashCode * 59 + TicketID.GetHashCode();
                    if (UnitCost != null)
                    hashCode = hashCode * 59 + UnitCost.GetHashCode();
                    if (SoapParentPropertyId != null)
                    hashCode = hashCode * 59 + SoapParentPropertyId.GetHashCode();
                    if (UserDefinedFields != null)
                    hashCode = hashCode * 59 + UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PurchaseOrderItemModel left, PurchaseOrderItemModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PurchaseOrderItemModel left, PurchaseOrderItemModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
