/*
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ZoneInformationResultModel : IEquatable<ZoneInformationResultModel>
    { 
        /// <summary>
        /// Gets or Sets ZoneName
        /// </summary>
        [DataMember(Name="zoneName")]
        public string ZoneName { get; private set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url")]
        public string Url { get; private set; }

        /// <summary>
        /// Gets or Sets WebUrl
        /// </summary>
        [DataMember(Name="webUrl")]
        public string WebUrl { get; private set; }

        /// <summary>
        /// Gets or Sets Ci
        /// </summary>
        [DataMember(Name="ci")]
        public int? Ci { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ZoneInformationResultModel {\n");
            sb.Append("  ZoneName: ").Append(ZoneName).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  WebUrl: ").Append(WebUrl).Append("\n");
            sb.Append("  Ci: ").Append(Ci).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ZoneInformationResultModel)obj);
        }

        /// <summary>
        /// Returns true if ZoneInformationResultModel instances are equal
        /// </summary>
        /// <param name="other">Instance of ZoneInformationResultModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ZoneInformationResultModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ZoneName == other.ZoneName ||
                    ZoneName != null &&
                    ZoneName.Equals(other.ZoneName)
                ) && 
                (
                    Url == other.Url ||
                    Url != null &&
                    Url.Equals(other.Url)
                ) && 
                (
                    WebUrl == other.WebUrl ||
                    WebUrl != null &&
                    WebUrl.Equals(other.WebUrl)
                ) && 
                (
                    Ci == other.Ci ||
                    Ci != null &&
                    Ci.Equals(other.Ci)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ZoneName != null)
                    hashCode = hashCode * 59 + ZoneName.GetHashCode();
                    if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                    if (WebUrl != null)
                    hashCode = hashCode * 59 + WebUrl.GetHashCode();
                    if (Ci != null)
                    hashCode = hashCode * 59 + Ci.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ZoneInformationResultModel left, ZoneInformationResultModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ZoneInformationResultModel left, ZoneInformationResultModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
