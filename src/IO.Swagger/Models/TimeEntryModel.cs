/*
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class TimeEntryModel : IEquatable<TimeEntryModel>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets BillingApprovalDateTime
        /// </summary>
        [DataMember(Name="billingApprovalDateTime")]
        public DateTime? BillingApprovalDateTime { get; set; }

        /// <summary>
        /// Gets or Sets BillingApprovalLevelMostRecent
        /// </summary>
        [DataMember(Name="billingApprovalLevelMostRecent")]
        public int? BillingApprovalLevelMostRecent { get; set; }

        /// <summary>
        /// Gets or Sets BillingApprovalResourceID
        /// </summary>
        [DataMember(Name="billingApprovalResourceID")]
        public int? BillingApprovalResourceID { get; set; }

        /// <summary>
        /// Gets or Sets BillingCodeID
        /// </summary>
        [DataMember(Name="billingCodeID")]
        public int? BillingCodeID { get; set; }

        /// <summary>
        /// Gets or Sets ContractID
        /// </summary>
        [DataMember(Name="contractID")]
        public int? ContractID { get; set; }

        /// <summary>
        /// Gets or Sets ContractServiceBundleID
        /// </summary>
        [DataMember(Name="contractServiceBundleID")]
        public long? ContractServiceBundleID { get; set; }

        /// <summary>
        /// Gets or Sets ContractServiceID
        /// </summary>
        [DataMember(Name="contractServiceID")]
        public long? ContractServiceID { get; set; }

        /// <summary>
        /// Gets or Sets CreateDateTime
        /// </summary>
        [DataMember(Name="createDateTime")]
        public DateTime? CreateDateTime { get; set; }

        /// <summary>
        /// Gets or Sets CreatorUserID
        /// </summary>
        [DataMember(Name="creatorUserID")]
        public int? CreatorUserID { get; set; }

        /// <summary>
        /// Gets or Sets DateWorked
        /// </summary>
        [DataMember(Name="dateWorked")]
        public DateTime? DateWorked { get; set; }

        /// <summary>
        /// Gets or Sets EndDateTime
        /// </summary>
        [DataMember(Name="endDateTime")]
        public DateTime? EndDateTime { get; set; }

        /// <summary>
        /// Gets or Sets HoursToBill
        /// </summary>
        [DataMember(Name="hoursToBill")]
        public double? HoursToBill { get; set; }

        /// <summary>
        /// Gets or Sets HoursWorked
        /// </summary>
        [DataMember(Name="hoursWorked")]
        public double? HoursWorked { get; set; }

        /// <summary>
        /// Gets or Sets ImpersonatorCreatorResourceID
        /// </summary>
        [DataMember(Name="impersonatorCreatorResourceID")]
        public int? ImpersonatorCreatorResourceID { get; set; }

        /// <summary>
        /// Gets or Sets ImpersonatorUpdaterResourceID
        /// </summary>
        [DataMember(Name="impersonatorUpdaterResourceID")]
        public int? ImpersonatorUpdaterResourceID { get; set; }

        /// <summary>
        /// Gets or Sets InternalBillingCodeID
        /// </summary>
        [DataMember(Name="internalBillingCodeID")]
        public int? InternalBillingCodeID { get; set; }

        /// <summary>
        /// Gets or Sets InternalNotes
        /// </summary>
        [DataMember(Name="internalNotes")]
        public string InternalNotes { get; set; }

        /// <summary>
        /// Gets or Sets IsNonBillable
        /// </summary>
        [DataMember(Name="isNonBillable")]
        public bool? IsNonBillable { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedDateTime
        /// </summary>
        [DataMember(Name="lastModifiedDateTime")]
        public DateTime? LastModifiedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedUserID
        /// </summary>
        [DataMember(Name="lastModifiedUserID")]
        public int? LastModifiedUserID { get; set; }

        /// <summary>
        /// Gets or Sets OffsetHours
        /// </summary>
        [DataMember(Name="offsetHours")]
        public double? OffsetHours { get; set; }

        /// <summary>
        /// Gets or Sets ResourceID
        /// </summary>
        [DataMember(Name="resourceID")]
        public int? ResourceID { get; set; }

        /// <summary>
        /// Gets or Sets RoleID
        /// </summary>
        [DataMember(Name="roleID")]
        public int? RoleID { get; set; }

        /// <summary>
        /// Gets or Sets ShowOnInvoice
        /// </summary>
        [DataMember(Name="showOnInvoice")]
        public bool? ShowOnInvoice { get; set; }

        /// <summary>
        /// Gets or Sets StartDateTime
        /// </summary>
        [DataMember(Name="startDateTime")]
        public DateTime? StartDateTime { get; set; }

        /// <summary>
        /// Gets or Sets SummaryNotes
        /// </summary>
        [DataMember(Name="summaryNotes")]
        public string SummaryNotes { get; set; }

        /// <summary>
        /// Gets or Sets TaskID
        /// </summary>
        [DataMember(Name="taskID")]
        public int? TaskID { get; set; }

        /// <summary>
        /// Gets or Sets TicketID
        /// </summary>
        [DataMember(Name="ticketID")]
        public int? TicketID { get; set; }

        /// <summary>
        /// Gets or Sets TimeEntryType
        /// </summary>
        [DataMember(Name="timeEntryType")]
        public int? TimeEntryType { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields")]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TimeEntryModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BillingApprovalDateTime: ").Append(BillingApprovalDateTime).Append("\n");
            sb.Append("  BillingApprovalLevelMostRecent: ").Append(BillingApprovalLevelMostRecent).Append("\n");
            sb.Append("  BillingApprovalResourceID: ").Append(BillingApprovalResourceID).Append("\n");
            sb.Append("  BillingCodeID: ").Append(BillingCodeID).Append("\n");
            sb.Append("  ContractID: ").Append(ContractID).Append("\n");
            sb.Append("  ContractServiceBundleID: ").Append(ContractServiceBundleID).Append("\n");
            sb.Append("  ContractServiceID: ").Append(ContractServiceID).Append("\n");
            sb.Append("  CreateDateTime: ").Append(CreateDateTime).Append("\n");
            sb.Append("  CreatorUserID: ").Append(CreatorUserID).Append("\n");
            sb.Append("  DateWorked: ").Append(DateWorked).Append("\n");
            sb.Append("  EndDateTime: ").Append(EndDateTime).Append("\n");
            sb.Append("  HoursToBill: ").Append(HoursToBill).Append("\n");
            sb.Append("  HoursWorked: ").Append(HoursWorked).Append("\n");
            sb.Append("  ImpersonatorCreatorResourceID: ").Append(ImpersonatorCreatorResourceID).Append("\n");
            sb.Append("  ImpersonatorUpdaterResourceID: ").Append(ImpersonatorUpdaterResourceID).Append("\n");
            sb.Append("  InternalBillingCodeID: ").Append(InternalBillingCodeID).Append("\n");
            sb.Append("  InternalNotes: ").Append(InternalNotes).Append("\n");
            sb.Append("  IsNonBillable: ").Append(IsNonBillable).Append("\n");
            sb.Append("  LastModifiedDateTime: ").Append(LastModifiedDateTime).Append("\n");
            sb.Append("  LastModifiedUserID: ").Append(LastModifiedUserID).Append("\n");
            sb.Append("  OffsetHours: ").Append(OffsetHours).Append("\n");
            sb.Append("  ResourceID: ").Append(ResourceID).Append("\n");
            sb.Append("  RoleID: ").Append(RoleID).Append("\n");
            sb.Append("  ShowOnInvoice: ").Append(ShowOnInvoice).Append("\n");
            sb.Append("  StartDateTime: ").Append(StartDateTime).Append("\n");
            sb.Append("  SummaryNotes: ").Append(SummaryNotes).Append("\n");
            sb.Append("  TaskID: ").Append(TaskID).Append("\n");
            sb.Append("  TicketID: ").Append(TicketID).Append("\n");
            sb.Append("  TimeEntryType: ").Append(TimeEntryType).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TimeEntryModel)obj);
        }

        /// <summary>
        /// Returns true if TimeEntryModel instances are equal
        /// </summary>
        /// <param name="other">Instance of TimeEntryModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimeEntryModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    BillingApprovalDateTime == other.BillingApprovalDateTime ||
                    BillingApprovalDateTime != null &&
                    BillingApprovalDateTime.Equals(other.BillingApprovalDateTime)
                ) && 
                (
                    BillingApprovalLevelMostRecent == other.BillingApprovalLevelMostRecent ||
                    BillingApprovalLevelMostRecent != null &&
                    BillingApprovalLevelMostRecent.Equals(other.BillingApprovalLevelMostRecent)
                ) && 
                (
                    BillingApprovalResourceID == other.BillingApprovalResourceID ||
                    BillingApprovalResourceID != null &&
                    BillingApprovalResourceID.Equals(other.BillingApprovalResourceID)
                ) && 
                (
                    BillingCodeID == other.BillingCodeID ||
                    BillingCodeID != null &&
                    BillingCodeID.Equals(other.BillingCodeID)
                ) && 
                (
                    ContractID == other.ContractID ||
                    ContractID != null &&
                    ContractID.Equals(other.ContractID)
                ) && 
                (
                    ContractServiceBundleID == other.ContractServiceBundleID ||
                    ContractServiceBundleID != null &&
                    ContractServiceBundleID.Equals(other.ContractServiceBundleID)
                ) && 
                (
                    ContractServiceID == other.ContractServiceID ||
                    ContractServiceID != null &&
                    ContractServiceID.Equals(other.ContractServiceID)
                ) && 
                (
                    CreateDateTime == other.CreateDateTime ||
                    CreateDateTime != null &&
                    CreateDateTime.Equals(other.CreateDateTime)
                ) && 
                (
                    CreatorUserID == other.CreatorUserID ||
                    CreatorUserID != null &&
                    CreatorUserID.Equals(other.CreatorUserID)
                ) && 
                (
                    DateWorked == other.DateWorked ||
                    DateWorked != null &&
                    DateWorked.Equals(other.DateWorked)
                ) && 
                (
                    EndDateTime == other.EndDateTime ||
                    EndDateTime != null &&
                    EndDateTime.Equals(other.EndDateTime)
                ) && 
                (
                    HoursToBill == other.HoursToBill ||
                    HoursToBill != null &&
                    HoursToBill.Equals(other.HoursToBill)
                ) && 
                (
                    HoursWorked == other.HoursWorked ||
                    HoursWorked != null &&
                    HoursWorked.Equals(other.HoursWorked)
                ) && 
                (
                    ImpersonatorCreatorResourceID == other.ImpersonatorCreatorResourceID ||
                    ImpersonatorCreatorResourceID != null &&
                    ImpersonatorCreatorResourceID.Equals(other.ImpersonatorCreatorResourceID)
                ) && 
                (
                    ImpersonatorUpdaterResourceID == other.ImpersonatorUpdaterResourceID ||
                    ImpersonatorUpdaterResourceID != null &&
                    ImpersonatorUpdaterResourceID.Equals(other.ImpersonatorUpdaterResourceID)
                ) && 
                (
                    InternalBillingCodeID == other.InternalBillingCodeID ||
                    InternalBillingCodeID != null &&
                    InternalBillingCodeID.Equals(other.InternalBillingCodeID)
                ) && 
                (
                    InternalNotes == other.InternalNotes ||
                    InternalNotes != null &&
                    InternalNotes.Equals(other.InternalNotes)
                ) && 
                (
                    IsNonBillable == other.IsNonBillable ||
                    IsNonBillable != null &&
                    IsNonBillable.Equals(other.IsNonBillable)
                ) && 
                (
                    LastModifiedDateTime == other.LastModifiedDateTime ||
                    LastModifiedDateTime != null &&
                    LastModifiedDateTime.Equals(other.LastModifiedDateTime)
                ) && 
                (
                    LastModifiedUserID == other.LastModifiedUserID ||
                    LastModifiedUserID != null &&
                    LastModifiedUserID.Equals(other.LastModifiedUserID)
                ) && 
                (
                    OffsetHours == other.OffsetHours ||
                    OffsetHours != null &&
                    OffsetHours.Equals(other.OffsetHours)
                ) && 
                (
                    ResourceID == other.ResourceID ||
                    ResourceID != null &&
                    ResourceID.Equals(other.ResourceID)
                ) && 
                (
                    RoleID == other.RoleID ||
                    RoleID != null &&
                    RoleID.Equals(other.RoleID)
                ) && 
                (
                    ShowOnInvoice == other.ShowOnInvoice ||
                    ShowOnInvoice != null &&
                    ShowOnInvoice.Equals(other.ShowOnInvoice)
                ) && 
                (
                    StartDateTime == other.StartDateTime ||
                    StartDateTime != null &&
                    StartDateTime.Equals(other.StartDateTime)
                ) && 
                (
                    SummaryNotes == other.SummaryNotes ||
                    SummaryNotes != null &&
                    SummaryNotes.Equals(other.SummaryNotes)
                ) && 
                (
                    TaskID == other.TaskID ||
                    TaskID != null &&
                    TaskID.Equals(other.TaskID)
                ) && 
                (
                    TicketID == other.TicketID ||
                    TicketID != null &&
                    TicketID.Equals(other.TicketID)
                ) && 
                (
                    TimeEntryType == other.TimeEntryType ||
                    TimeEntryType != null &&
                    TimeEntryType.Equals(other.TimeEntryType)
                ) && 
                (
                    UserDefinedFields == other.UserDefinedFields ||
                    UserDefinedFields != null &&
                    UserDefinedFields.SequenceEqual(other.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (BillingApprovalDateTime != null)
                    hashCode = hashCode * 59 + BillingApprovalDateTime.GetHashCode();
                    if (BillingApprovalLevelMostRecent != null)
                    hashCode = hashCode * 59 + BillingApprovalLevelMostRecent.GetHashCode();
                    if (BillingApprovalResourceID != null)
                    hashCode = hashCode * 59 + BillingApprovalResourceID.GetHashCode();
                    if (BillingCodeID != null)
                    hashCode = hashCode * 59 + BillingCodeID.GetHashCode();
                    if (ContractID != null)
                    hashCode = hashCode * 59 + ContractID.GetHashCode();
                    if (ContractServiceBundleID != null)
                    hashCode = hashCode * 59 + ContractServiceBundleID.GetHashCode();
                    if (ContractServiceID != null)
                    hashCode = hashCode * 59 + ContractServiceID.GetHashCode();
                    if (CreateDateTime != null)
                    hashCode = hashCode * 59 + CreateDateTime.GetHashCode();
                    if (CreatorUserID != null)
                    hashCode = hashCode * 59 + CreatorUserID.GetHashCode();
                    if (DateWorked != null)
                    hashCode = hashCode * 59 + DateWorked.GetHashCode();
                    if (EndDateTime != null)
                    hashCode = hashCode * 59 + EndDateTime.GetHashCode();
                    if (HoursToBill != null)
                    hashCode = hashCode * 59 + HoursToBill.GetHashCode();
                    if (HoursWorked != null)
                    hashCode = hashCode * 59 + HoursWorked.GetHashCode();
                    if (ImpersonatorCreatorResourceID != null)
                    hashCode = hashCode * 59 + ImpersonatorCreatorResourceID.GetHashCode();
                    if (ImpersonatorUpdaterResourceID != null)
                    hashCode = hashCode * 59 + ImpersonatorUpdaterResourceID.GetHashCode();
                    if (InternalBillingCodeID != null)
                    hashCode = hashCode * 59 + InternalBillingCodeID.GetHashCode();
                    if (InternalNotes != null)
                    hashCode = hashCode * 59 + InternalNotes.GetHashCode();
                    if (IsNonBillable != null)
                    hashCode = hashCode * 59 + IsNonBillable.GetHashCode();
                    if (LastModifiedDateTime != null)
                    hashCode = hashCode * 59 + LastModifiedDateTime.GetHashCode();
                    if (LastModifiedUserID != null)
                    hashCode = hashCode * 59 + LastModifiedUserID.GetHashCode();
                    if (OffsetHours != null)
                    hashCode = hashCode * 59 + OffsetHours.GetHashCode();
                    if (ResourceID != null)
                    hashCode = hashCode * 59 + ResourceID.GetHashCode();
                    if (RoleID != null)
                    hashCode = hashCode * 59 + RoleID.GetHashCode();
                    if (ShowOnInvoice != null)
                    hashCode = hashCode * 59 + ShowOnInvoice.GetHashCode();
                    if (StartDateTime != null)
                    hashCode = hashCode * 59 + StartDateTime.GetHashCode();
                    if (SummaryNotes != null)
                    hashCode = hashCode * 59 + SummaryNotes.GetHashCode();
                    if (TaskID != null)
                    hashCode = hashCode * 59 + TaskID.GetHashCode();
                    if (TicketID != null)
                    hashCode = hashCode * 59 + TicketID.GetHashCode();
                    if (TimeEntryType != null)
                    hashCode = hashCode * 59 + TimeEntryType.GetHashCode();
                    if (UserDefinedFields != null)
                    hashCode = hashCode * 59 + UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TimeEntryModel left, TimeEntryModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TimeEntryModel left, TimeEntryModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
