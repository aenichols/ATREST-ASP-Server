/*
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ConfigurationItemExtModel : IEquatable<ConfigurationItemExtModel>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets ApiVendorID
        /// </summary>
        [DataMember(Name="apiVendorID")]
        public int? ApiVendorID { get; set; }

        /// <summary>
        /// Gets or Sets CompanyID
        /// </summary>
        [DataMember(Name="companyID")]
        public int? CompanyID { get; set; }

        /// <summary>
        /// Gets or Sets CompanyLocationID
        /// </summary>
        [DataMember(Name="companyLocationID")]
        public int? CompanyLocationID { get; set; }

        /// <summary>
        /// Gets or Sets ConfigurationItemCategoryID
        /// </summary>
        [DataMember(Name="configurationItemCategoryID")]
        public int? ConfigurationItemCategoryID { get; set; }

        /// <summary>
        /// Gets or Sets ConfigurationItemType
        /// </summary>
        [DataMember(Name="configurationItemType")]
        public int? ConfigurationItemType { get; set; }

        /// <summary>
        /// Gets or Sets ContactID
        /// </summary>
        [DataMember(Name="contactID")]
        public int? ContactID { get; set; }

        /// <summary>
        /// Gets or Sets ContractID
        /// </summary>
        [DataMember(Name="contractID")]
        public int? ContractID { get; set; }

        /// <summary>
        /// Gets or Sets ContractServiceBundleID
        /// </summary>
        [DataMember(Name="contractServiceBundleID")]
        public int? ContractServiceBundleID { get; set; }

        /// <summary>
        /// Gets or Sets ContractServiceID
        /// </summary>
        [DataMember(Name="contractServiceID")]
        public int? ContractServiceID { get; set; }

        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="createDate")]
        public DateTime? CreateDate { get; set; }

        /// <summary>
        /// Gets or Sets CreatedByPersonID
        /// </summary>
        [DataMember(Name="createdByPersonID")]
        public int? CreatedByPersonID { get; set; }

        /// <summary>
        /// Gets or Sets DailyCost
        /// </summary>
        [DataMember(Name="dailyCost")]
        public double? DailyCost { get; set; }

        /// <summary>
        /// Gets or Sets DattoAvailableKilobytes
        /// </summary>
        [DataMember(Name="dattoAvailableKilobytes")]
        public long? DattoAvailableKilobytes { get; set; }

        /// <summary>
        /// Gets or Sets DattoDeviceMemoryMegabytes
        /// </summary>
        [DataMember(Name="dattoDeviceMemoryMegabytes")]
        public int? DattoDeviceMemoryMegabytes { get; set; }

        /// <summary>
        /// Gets or Sets DattoDrivesErrors
        /// </summary>
        [DataMember(Name="dattoDrivesErrors")]
        public bool? DattoDrivesErrors { get; set; }

        /// <summary>
        /// Gets or Sets DattoHostname
        /// </summary>
        [DataMember(Name="dattoHostname")]
        public string DattoHostname { get; set; }

        /// <summary>
        /// Gets or Sets DattoInternalIP
        /// </summary>
        [DataMember(Name="dattoInternalIP")]
        public string DattoInternalIP { get; set; }

        /// <summary>
        /// Gets or Sets DattoKernelVersionID
        /// </summary>
        [DataMember(Name="dattoKernelVersionID")]
        public string DattoKernelVersionID { get; set; }

        /// <summary>
        /// Gets or Sets DattoLastCheckInDateTime
        /// </summary>
        [DataMember(Name="dattoLastCheckInDateTime")]
        public DateTime? DattoLastCheckInDateTime { get; set; }

        /// <summary>
        /// Gets or Sets DattoNICSpeedKilobitsPerSecond
        /// </summary>
        [DataMember(Name="dattoNICSpeedKilobitsPerSecond")]
        public int? DattoNICSpeedKilobitsPerSecond { get; set; }

        /// <summary>
        /// Gets or Sets DattoNumberOfAgents
        /// </summary>
        [DataMember(Name="dattoNumberOfAgents")]
        public int? DattoNumberOfAgents { get; set; }

        /// <summary>
        /// Gets or Sets DattoNumberOfDrives
        /// </summary>
        [DataMember(Name="dattoNumberOfDrives")]
        public int? DattoNumberOfDrives { get; set; }

        /// <summary>
        /// Gets or Sets DattoNumberOfVolumes
        /// </summary>
        [DataMember(Name="dattoNumberOfVolumes")]
        public int? DattoNumberOfVolumes { get; set; }

        /// <summary>
        /// Gets or Sets DattoOffsiteUsedBytes
        /// </summary>
        [DataMember(Name="dattoOffsiteUsedBytes")]
        public long? DattoOffsiteUsedBytes { get; set; }

        /// <summary>
        /// Gets or Sets DattoOSVersionID
        /// </summary>
        [DataMember(Name="dattoOSVersionID")]
        public string DattoOSVersionID { get; set; }

        /// <summary>
        /// Gets or Sets DattoPercentageUsed
        /// </summary>
        [DataMember(Name="dattoPercentageUsed")]
        public double? DattoPercentageUsed { get; set; }

        /// <summary>
        /// Gets or Sets DattoProtectedKilobytes
        /// </summary>
        [DataMember(Name="dattoProtectedKilobytes")]
        public long? DattoProtectedKilobytes { get; set; }

        /// <summary>
        /// Gets or Sets DattoRemoteIP
        /// </summary>
        [DataMember(Name="dattoRemoteIP")]
        public string DattoRemoteIP { get; set; }

        /// <summary>
        /// Gets or Sets DattoSerialNumber
        /// </summary>
        [DataMember(Name="dattoSerialNumber")]
        public string DattoSerialNumber { get; set; }

        /// <summary>
        /// Gets or Sets DattoUptimeSeconds
        /// </summary>
        [DataMember(Name="dattoUptimeSeconds")]
        public int? DattoUptimeSeconds { get; set; }

        /// <summary>
        /// Gets or Sets DattoUsedKilobytes
        /// </summary>
        [DataMember(Name="dattoUsedKilobytes")]
        public long? DattoUsedKilobytes { get; set; }

        /// <summary>
        /// Gets or Sets DattoZFSVersionID
        /// </summary>
        [DataMember(Name="dattoZFSVersionID")]
        public string DattoZFSVersionID { get; set; }

        /// <summary>
        /// Gets or Sets DeviceNetworkingID
        /// </summary>
        [DataMember(Name="deviceNetworkingID")]
        public string DeviceNetworkingID { get; set; }

        /// <summary>
        /// Gets or Sets Domain
        /// </summary>
        [DataMember(Name="domain")]
        public string Domain { get; set; }

        /// <summary>
        /// Gets or Sets DomainRegistrarID
        /// </summary>
        [DataMember(Name="domainRegistrarID")]
        public int? DomainRegistrarID { get; set; }

        /// <summary>
        /// Gets or Sets DomainRegistrationDateTime
        /// </summary>
        [DataMember(Name="domainRegistrationDateTime")]
        public DateTime? DomainRegistrationDateTime { get; set; }

        /// <summary>
        /// Gets or Sets DomainLastUpdatedDateTime
        /// </summary>
        [DataMember(Name="domainLastUpdatedDateTime")]
        public DateTime? DomainLastUpdatedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets DomainExpirationDateTime
        /// </summary>
        [DataMember(Name="domainExpirationDateTime")]
        public DateTime? DomainExpirationDateTime { get; set; }

        /// <summary>
        /// Gets or Sets HourlyCost
        /// </summary>
        [DataMember(Name="hourlyCost")]
        public double? HourlyCost { get; set; }

        /// <summary>
        /// Gets or Sets ImpersonatorCreatorResourceID
        /// </summary>
        [DataMember(Name="impersonatorCreatorResourceID")]
        public int? ImpersonatorCreatorResourceID { get; set; }

        /// <summary>
        /// Gets or Sets InstallDate
        /// </summary>
        [DataMember(Name="installDate")]
        public DateTime? InstallDate { get; set; }

        /// <summary>
        /// Gets or Sets InstalledByContactID
        /// </summary>
        [DataMember(Name="installedByContactID")]
        public int? InstalledByContactID { get; set; }

        /// <summary>
        /// Gets or Sets InstalledByID
        /// </summary>
        [DataMember(Name="installedByID")]
        public int? InstalledByID { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="isActive")]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets LastActivityPersonID
        /// </summary>
        [DataMember(Name="lastActivityPersonID")]
        public int? LastActivityPersonID { get; set; }

        /// <summary>
        /// Gets or Sets LastActivityPersonType
        /// </summary>
        [DataMember(Name="lastActivityPersonType")]
        public int? LastActivityPersonType { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedTime
        /// </summary>
        [DataMember(Name="lastModifiedTime")]
        public DateTime? LastModifiedTime { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location")]
        public string Location { get; set; }

        /// <summary>
        /// Gets or Sets MonthlyCost
        /// </summary>
        [DataMember(Name="monthlyCost")]
        public double? MonthlyCost { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name="notes")]
        public string Notes { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfUsers
        /// </summary>
        [DataMember(Name="numberOfUsers")]
        public double? NumberOfUsers { get; set; }

        /// <summary>
        /// Gets or Sets ParentConfigurationItemID
        /// </summary>
        [DataMember(Name="parentConfigurationItemID")]
        public int? ParentConfigurationItemID { get; set; }

        /// <summary>
        /// Gets or Sets PerUseCost
        /// </summary>
        [DataMember(Name="perUseCost")]
        public double? PerUseCost { get; set; }

        /// <summary>
        /// Gets or Sets ProductID
        /// </summary>
        [DataMember(Name="productID")]
        public int? ProductID { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceNumber
        /// </summary>
        [DataMember(Name="referenceNumber")]
        public string ReferenceNumber { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceTitle
        /// </summary>
        [DataMember(Name="referenceTitle")]
        public string ReferenceTitle { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditAntivirusStatusID
        /// </summary>
        [DataMember(Name="rmmDeviceAuditAntivirusStatusID")]
        public string RmmDeviceAuditAntivirusStatusID { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditArchitectureID
        /// </summary>
        [DataMember(Name="rmmDeviceAuditArchitectureID")]
        public string RmmDeviceAuditArchitectureID { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditBackupStatusID
        /// </summary>
        [DataMember(Name="rmmDeviceAuditBackupStatusID")]
        public string RmmDeviceAuditBackupStatusID { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditDescription
        /// </summary>
        [DataMember(Name="rmmDeviceAuditDescription")]
        public string RmmDeviceAuditDescription { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditDeviceTypeID
        /// </summary>
        [DataMember(Name="rmmDeviceAuditDeviceTypeID")]
        public string RmmDeviceAuditDeviceTypeID { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditDisplayAdaptorID
        /// </summary>
        [DataMember(Name="rmmDeviceAuditDisplayAdaptorID")]
        public string RmmDeviceAuditDisplayAdaptorID { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditDomainID
        /// </summary>
        [DataMember(Name="rmmDeviceAuditDomainID")]
        public string RmmDeviceAuditDomainID { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditExternalIPAddress
        /// </summary>
        [DataMember(Name="rmmDeviceAuditExternalIPAddress")]
        public string RmmDeviceAuditExternalIPAddress { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditHostname
        /// </summary>
        [DataMember(Name="rmmDeviceAuditHostname")]
        public string RmmDeviceAuditHostname { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditIPAddress
        /// </summary>
        [DataMember(Name="rmmDeviceAuditIPAddress")]
        public string RmmDeviceAuditIPAddress { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditLastUser
        /// </summary>
        [DataMember(Name="rmmDeviceAuditLastUser")]
        public string RmmDeviceAuditLastUser { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditMacAddress
        /// </summary>
        [DataMember(Name="rmmDeviceAuditMacAddress")]
        public string RmmDeviceAuditMacAddress { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditManufacturerID
        /// </summary>
        [DataMember(Name="rmmDeviceAuditManufacturerID")]
        public string RmmDeviceAuditManufacturerID { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditMemoryBytes
        /// </summary>
        [DataMember(Name="rmmDeviceAuditMemoryBytes")]
        public long? RmmDeviceAuditMemoryBytes { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditMissingPatchCount
        /// </summary>
        [DataMember(Name="rmmDeviceAuditMissingPatchCount")]
        public int? RmmDeviceAuditMissingPatchCount { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditMobileNetworkOperatorID
        /// </summary>
        [DataMember(Name="rmmDeviceAuditMobileNetworkOperatorID")]
        public string RmmDeviceAuditMobileNetworkOperatorID { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditMobileNumber
        /// </summary>
        [DataMember(Name="rmmDeviceAuditMobileNumber")]
        public string RmmDeviceAuditMobileNumber { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditModelID
        /// </summary>
        [DataMember(Name="rmmDeviceAuditModelID")]
        public string RmmDeviceAuditModelID { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditMotherboardID
        /// </summary>
        [DataMember(Name="rmmDeviceAuditMotherboardID")]
        public string RmmDeviceAuditMotherboardID { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditOperatingSystemID
        /// </summary>
        [DataMember(Name="rmmDeviceAuditOperatingSystemID")]
        public string RmmDeviceAuditOperatingSystemID { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditOperatingSystemNameID
        /// </summary>
        [DataMember(Name="rmmDeviceAuditOperatingSystemNameID")]
        public string RmmDeviceAuditOperatingSystemNameID { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditOperatingSystemVersionID
        /// </summary>
        [DataMember(Name="rmmDeviceAuditOperatingSystemVersionID")]
        public string RmmDeviceAuditOperatingSystemVersionID { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditPatchStatusID
        /// </summary>
        [DataMember(Name="rmmDeviceAuditPatchStatusID")]
        public string RmmDeviceAuditPatchStatusID { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditProcessorID
        /// </summary>
        [DataMember(Name="rmmDeviceAuditProcessorID")]
        public string RmmDeviceAuditProcessorID { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditServicePackID
        /// </summary>
        [DataMember(Name="rmmDeviceAuditServicePackID")]
        public string RmmDeviceAuditServicePackID { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditSNMPContact
        /// </summary>
        [DataMember(Name="rmmDeviceAuditSNMPContact")]
        public string RmmDeviceAuditSNMPContact { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditSNMPLocation
        /// </summary>
        [DataMember(Name="rmmDeviceAuditSNMPLocation")]
        public string RmmDeviceAuditSNMPLocation { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditSNMPName
        /// </summary>
        [DataMember(Name="rmmDeviceAuditSNMPName")]
        public string RmmDeviceAuditSNMPName { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditSoftwareStatusID
        /// </summary>
        [DataMember(Name="rmmDeviceAuditSoftwareStatusID")]
        public string RmmDeviceAuditSoftwareStatusID { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceAuditStorageBytes
        /// </summary>
        [DataMember(Name="rmmDeviceAuditStorageBytes")]
        public long? RmmDeviceAuditStorageBytes { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceID
        /// </summary>
        [DataMember(Name="rmmDeviceID")]
        public long? RmmDeviceID { get; set; }

        /// <summary>
        /// Gets or Sets RmmDeviceUID
        /// </summary>
        [DataMember(Name="rmmDeviceUID")]
        public string RmmDeviceUID { get; set; }

        /// <summary>
        /// Gets or Sets RmmOpenAlertCount
        /// </summary>
        [DataMember(Name="rmmOpenAlertCount")]
        public int? RmmOpenAlertCount { get; set; }

        /// <summary>
        /// Gets or Sets SerialNumber
        /// </summary>
        [DataMember(Name="serialNumber")]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Gets or Sets ServiceBundleID
        /// </summary>
        [DataMember(Name="serviceBundleID")]
        public int? ServiceBundleID { get; set; }

        /// <summary>
        /// Gets or Sets ServiceID
        /// </summary>
        [DataMember(Name="serviceID")]
        public int? ServiceID { get; set; }

        /// <summary>
        /// Gets or Sets ServiceLevelAgreementID
        /// </summary>
        [DataMember(Name="serviceLevelAgreementID")]
        public int? ServiceLevelAgreementID { get; set; }

        /// <summary>
        /// Gets or Sets SetupFee
        /// </summary>
        [DataMember(Name="setupFee")]
        public double? SetupFee { get; set; }

        /// <summary>
        /// Gets or Sets SourceChargeID
        /// </summary>
        [DataMember(Name="sourceChargeID")]
        public int? SourceChargeID { get; set; }

        /// <summary>
        /// Gets or Sets SourceChargeType
        /// </summary>
        [DataMember(Name="sourceChargeType")]
        public int? SourceChargeType { get; set; }

        /// <summary>
        /// Gets or Sets SslSource
        /// </summary>
        [DataMember(Name="sslSource")]
        public string SslSource { get; set; }

        /// <summary>
        /// Gets or Sets SslCommonName
        /// </summary>
        [DataMember(Name="sslCommonName")]
        public string SslCommonName { get; set; }

        /// <summary>
        /// Gets or Sets SslValidFromDateTime
        /// </summary>
        [DataMember(Name="sslValidFromDateTime")]
        public DateTime? SslValidFromDateTime { get; set; }

        /// <summary>
        /// Gets or Sets SslValidUntilDateTime
        /// </summary>
        [DataMember(Name="sslValidUntilDateTime")]
        public DateTime? SslValidUntilDateTime { get; set; }

        /// <summary>
        /// Gets or Sets SslIssuedBy
        /// </summary>
        [DataMember(Name="sslIssuedBy")]
        public string SslIssuedBy { get; set; }

        /// <summary>
        /// Gets or Sets SslOrganization
        /// </summary>
        [DataMember(Name="sslOrganization")]
        public string SslOrganization { get; set; }

        /// <summary>
        /// Gets or Sets SslOrganizationUnit
        /// </summary>
        [DataMember(Name="sslOrganizationUnit")]
        public string SslOrganizationUnit { get; set; }

        /// <summary>
        /// Gets or Sets SslLocation
        /// </summary>
        [DataMember(Name="sslLocation")]
        public string SslLocation { get; set; }

        /// <summary>
        /// Gets or Sets SslSerialNumber
        /// </summary>
        [DataMember(Name="sslSerialNumber")]
        public string SslSerialNumber { get; set; }

        /// <summary>
        /// Gets or Sets SslSignatureAlgorithm
        /// </summary>
        [DataMember(Name="sslSignatureAlgorithm")]
        public string SslSignatureAlgorithm { get; set; }

        /// <summary>
        /// Gets or Sets VendorID
        /// </summary>
        [DataMember(Name="vendorID")]
        public int? VendorID { get; set; }

        /// <summary>
        /// Gets or Sets WarrantyExpirationDate
        /// </summary>
        [DataMember(Name="warrantyExpirationDate")]
        public DateTime? WarrantyExpirationDate { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields")]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConfigurationItemExtModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ApiVendorID: ").Append(ApiVendorID).Append("\n");
            sb.Append("  CompanyID: ").Append(CompanyID).Append("\n");
            sb.Append("  CompanyLocationID: ").Append(CompanyLocationID).Append("\n");
            sb.Append("  ConfigurationItemCategoryID: ").Append(ConfigurationItemCategoryID).Append("\n");
            sb.Append("  ConfigurationItemType: ").Append(ConfigurationItemType).Append("\n");
            sb.Append("  ContactID: ").Append(ContactID).Append("\n");
            sb.Append("  ContractID: ").Append(ContractID).Append("\n");
            sb.Append("  ContractServiceBundleID: ").Append(ContractServiceBundleID).Append("\n");
            sb.Append("  ContractServiceID: ").Append(ContractServiceID).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  CreatedByPersonID: ").Append(CreatedByPersonID).Append("\n");
            sb.Append("  DailyCost: ").Append(DailyCost).Append("\n");
            sb.Append("  DattoAvailableKilobytes: ").Append(DattoAvailableKilobytes).Append("\n");
            sb.Append("  DattoDeviceMemoryMegabytes: ").Append(DattoDeviceMemoryMegabytes).Append("\n");
            sb.Append("  DattoDrivesErrors: ").Append(DattoDrivesErrors).Append("\n");
            sb.Append("  DattoHostname: ").Append(DattoHostname).Append("\n");
            sb.Append("  DattoInternalIP: ").Append(DattoInternalIP).Append("\n");
            sb.Append("  DattoKernelVersionID: ").Append(DattoKernelVersionID).Append("\n");
            sb.Append("  DattoLastCheckInDateTime: ").Append(DattoLastCheckInDateTime).Append("\n");
            sb.Append("  DattoNICSpeedKilobitsPerSecond: ").Append(DattoNICSpeedKilobitsPerSecond).Append("\n");
            sb.Append("  DattoNumberOfAgents: ").Append(DattoNumberOfAgents).Append("\n");
            sb.Append("  DattoNumberOfDrives: ").Append(DattoNumberOfDrives).Append("\n");
            sb.Append("  DattoNumberOfVolumes: ").Append(DattoNumberOfVolumes).Append("\n");
            sb.Append("  DattoOffsiteUsedBytes: ").Append(DattoOffsiteUsedBytes).Append("\n");
            sb.Append("  DattoOSVersionID: ").Append(DattoOSVersionID).Append("\n");
            sb.Append("  DattoPercentageUsed: ").Append(DattoPercentageUsed).Append("\n");
            sb.Append("  DattoProtectedKilobytes: ").Append(DattoProtectedKilobytes).Append("\n");
            sb.Append("  DattoRemoteIP: ").Append(DattoRemoteIP).Append("\n");
            sb.Append("  DattoSerialNumber: ").Append(DattoSerialNumber).Append("\n");
            sb.Append("  DattoUptimeSeconds: ").Append(DattoUptimeSeconds).Append("\n");
            sb.Append("  DattoUsedKilobytes: ").Append(DattoUsedKilobytes).Append("\n");
            sb.Append("  DattoZFSVersionID: ").Append(DattoZFSVersionID).Append("\n");
            sb.Append("  DeviceNetworkingID: ").Append(DeviceNetworkingID).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  DomainRegistrarID: ").Append(DomainRegistrarID).Append("\n");
            sb.Append("  DomainRegistrationDateTime: ").Append(DomainRegistrationDateTime).Append("\n");
            sb.Append("  DomainLastUpdatedDateTime: ").Append(DomainLastUpdatedDateTime).Append("\n");
            sb.Append("  DomainExpirationDateTime: ").Append(DomainExpirationDateTime).Append("\n");
            sb.Append("  HourlyCost: ").Append(HourlyCost).Append("\n");
            sb.Append("  ImpersonatorCreatorResourceID: ").Append(ImpersonatorCreatorResourceID).Append("\n");
            sb.Append("  InstallDate: ").Append(InstallDate).Append("\n");
            sb.Append("  InstalledByContactID: ").Append(InstalledByContactID).Append("\n");
            sb.Append("  InstalledByID: ").Append(InstalledByID).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  LastActivityPersonID: ").Append(LastActivityPersonID).Append("\n");
            sb.Append("  LastActivityPersonType: ").Append(LastActivityPersonType).Append("\n");
            sb.Append("  LastModifiedTime: ").Append(LastModifiedTime).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  MonthlyCost: ").Append(MonthlyCost).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  NumberOfUsers: ").Append(NumberOfUsers).Append("\n");
            sb.Append("  ParentConfigurationItemID: ").Append(ParentConfigurationItemID).Append("\n");
            sb.Append("  PerUseCost: ").Append(PerUseCost).Append("\n");
            sb.Append("  ProductID: ").Append(ProductID).Append("\n");
            sb.Append("  ReferenceNumber: ").Append(ReferenceNumber).Append("\n");
            sb.Append("  ReferenceTitle: ").Append(ReferenceTitle).Append("\n");
            sb.Append("  RmmDeviceAuditAntivirusStatusID: ").Append(RmmDeviceAuditAntivirusStatusID).Append("\n");
            sb.Append("  RmmDeviceAuditArchitectureID: ").Append(RmmDeviceAuditArchitectureID).Append("\n");
            sb.Append("  RmmDeviceAuditBackupStatusID: ").Append(RmmDeviceAuditBackupStatusID).Append("\n");
            sb.Append("  RmmDeviceAuditDescription: ").Append(RmmDeviceAuditDescription).Append("\n");
            sb.Append("  RmmDeviceAuditDeviceTypeID: ").Append(RmmDeviceAuditDeviceTypeID).Append("\n");
            sb.Append("  RmmDeviceAuditDisplayAdaptorID: ").Append(RmmDeviceAuditDisplayAdaptorID).Append("\n");
            sb.Append("  RmmDeviceAuditDomainID: ").Append(RmmDeviceAuditDomainID).Append("\n");
            sb.Append("  RmmDeviceAuditExternalIPAddress: ").Append(RmmDeviceAuditExternalIPAddress).Append("\n");
            sb.Append("  RmmDeviceAuditHostname: ").Append(RmmDeviceAuditHostname).Append("\n");
            sb.Append("  RmmDeviceAuditIPAddress: ").Append(RmmDeviceAuditIPAddress).Append("\n");
            sb.Append("  RmmDeviceAuditLastUser: ").Append(RmmDeviceAuditLastUser).Append("\n");
            sb.Append("  RmmDeviceAuditMacAddress: ").Append(RmmDeviceAuditMacAddress).Append("\n");
            sb.Append("  RmmDeviceAuditManufacturerID: ").Append(RmmDeviceAuditManufacturerID).Append("\n");
            sb.Append("  RmmDeviceAuditMemoryBytes: ").Append(RmmDeviceAuditMemoryBytes).Append("\n");
            sb.Append("  RmmDeviceAuditMissingPatchCount: ").Append(RmmDeviceAuditMissingPatchCount).Append("\n");
            sb.Append("  RmmDeviceAuditMobileNetworkOperatorID: ").Append(RmmDeviceAuditMobileNetworkOperatorID).Append("\n");
            sb.Append("  RmmDeviceAuditMobileNumber: ").Append(RmmDeviceAuditMobileNumber).Append("\n");
            sb.Append("  RmmDeviceAuditModelID: ").Append(RmmDeviceAuditModelID).Append("\n");
            sb.Append("  RmmDeviceAuditMotherboardID: ").Append(RmmDeviceAuditMotherboardID).Append("\n");
            sb.Append("  RmmDeviceAuditOperatingSystemID: ").Append(RmmDeviceAuditOperatingSystemID).Append("\n");
            sb.Append("  RmmDeviceAuditOperatingSystemNameID: ").Append(RmmDeviceAuditOperatingSystemNameID).Append("\n");
            sb.Append("  RmmDeviceAuditOperatingSystemVersionID: ").Append(RmmDeviceAuditOperatingSystemVersionID).Append("\n");
            sb.Append("  RmmDeviceAuditPatchStatusID: ").Append(RmmDeviceAuditPatchStatusID).Append("\n");
            sb.Append("  RmmDeviceAuditProcessorID: ").Append(RmmDeviceAuditProcessorID).Append("\n");
            sb.Append("  RmmDeviceAuditServicePackID: ").Append(RmmDeviceAuditServicePackID).Append("\n");
            sb.Append("  RmmDeviceAuditSNMPContact: ").Append(RmmDeviceAuditSNMPContact).Append("\n");
            sb.Append("  RmmDeviceAuditSNMPLocation: ").Append(RmmDeviceAuditSNMPLocation).Append("\n");
            sb.Append("  RmmDeviceAuditSNMPName: ").Append(RmmDeviceAuditSNMPName).Append("\n");
            sb.Append("  RmmDeviceAuditSoftwareStatusID: ").Append(RmmDeviceAuditSoftwareStatusID).Append("\n");
            sb.Append("  RmmDeviceAuditStorageBytes: ").Append(RmmDeviceAuditStorageBytes).Append("\n");
            sb.Append("  RmmDeviceID: ").Append(RmmDeviceID).Append("\n");
            sb.Append("  RmmDeviceUID: ").Append(RmmDeviceUID).Append("\n");
            sb.Append("  RmmOpenAlertCount: ").Append(RmmOpenAlertCount).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  ServiceBundleID: ").Append(ServiceBundleID).Append("\n");
            sb.Append("  ServiceID: ").Append(ServiceID).Append("\n");
            sb.Append("  ServiceLevelAgreementID: ").Append(ServiceLevelAgreementID).Append("\n");
            sb.Append("  SetupFee: ").Append(SetupFee).Append("\n");
            sb.Append("  SourceChargeID: ").Append(SourceChargeID).Append("\n");
            sb.Append("  SourceChargeType: ").Append(SourceChargeType).Append("\n");
            sb.Append("  SslSource: ").Append(SslSource).Append("\n");
            sb.Append("  SslCommonName: ").Append(SslCommonName).Append("\n");
            sb.Append("  SslValidFromDateTime: ").Append(SslValidFromDateTime).Append("\n");
            sb.Append("  SslValidUntilDateTime: ").Append(SslValidUntilDateTime).Append("\n");
            sb.Append("  SslIssuedBy: ").Append(SslIssuedBy).Append("\n");
            sb.Append("  SslOrganization: ").Append(SslOrganization).Append("\n");
            sb.Append("  SslOrganizationUnit: ").Append(SslOrganizationUnit).Append("\n");
            sb.Append("  SslLocation: ").Append(SslLocation).Append("\n");
            sb.Append("  SslSerialNumber: ").Append(SslSerialNumber).Append("\n");
            sb.Append("  SslSignatureAlgorithm: ").Append(SslSignatureAlgorithm).Append("\n");
            sb.Append("  VendorID: ").Append(VendorID).Append("\n");
            sb.Append("  WarrantyExpirationDate: ").Append(WarrantyExpirationDate).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ConfigurationItemExtModel)obj);
        }

        /// <summary>
        /// Returns true if ConfigurationItemExtModel instances are equal
        /// </summary>
        /// <param name="other">Instance of ConfigurationItemExtModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConfigurationItemExtModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    ApiVendorID == other.ApiVendorID ||
                    ApiVendorID != null &&
                    ApiVendorID.Equals(other.ApiVendorID)
                ) && 
                (
                    CompanyID == other.CompanyID ||
                    CompanyID != null &&
                    CompanyID.Equals(other.CompanyID)
                ) && 
                (
                    CompanyLocationID == other.CompanyLocationID ||
                    CompanyLocationID != null &&
                    CompanyLocationID.Equals(other.CompanyLocationID)
                ) && 
                (
                    ConfigurationItemCategoryID == other.ConfigurationItemCategoryID ||
                    ConfigurationItemCategoryID != null &&
                    ConfigurationItemCategoryID.Equals(other.ConfigurationItemCategoryID)
                ) && 
                (
                    ConfigurationItemType == other.ConfigurationItemType ||
                    ConfigurationItemType != null &&
                    ConfigurationItemType.Equals(other.ConfigurationItemType)
                ) && 
                (
                    ContactID == other.ContactID ||
                    ContactID != null &&
                    ContactID.Equals(other.ContactID)
                ) && 
                (
                    ContractID == other.ContractID ||
                    ContractID != null &&
                    ContractID.Equals(other.ContractID)
                ) && 
                (
                    ContractServiceBundleID == other.ContractServiceBundleID ||
                    ContractServiceBundleID != null &&
                    ContractServiceBundleID.Equals(other.ContractServiceBundleID)
                ) && 
                (
                    ContractServiceID == other.ContractServiceID ||
                    ContractServiceID != null &&
                    ContractServiceID.Equals(other.ContractServiceID)
                ) && 
                (
                    CreateDate == other.CreateDate ||
                    CreateDate != null &&
                    CreateDate.Equals(other.CreateDate)
                ) && 
                (
                    CreatedByPersonID == other.CreatedByPersonID ||
                    CreatedByPersonID != null &&
                    CreatedByPersonID.Equals(other.CreatedByPersonID)
                ) && 
                (
                    DailyCost == other.DailyCost ||
                    DailyCost != null &&
                    DailyCost.Equals(other.DailyCost)
                ) && 
                (
                    DattoAvailableKilobytes == other.DattoAvailableKilobytes ||
                    DattoAvailableKilobytes != null &&
                    DattoAvailableKilobytes.Equals(other.DattoAvailableKilobytes)
                ) && 
                (
                    DattoDeviceMemoryMegabytes == other.DattoDeviceMemoryMegabytes ||
                    DattoDeviceMemoryMegabytes != null &&
                    DattoDeviceMemoryMegabytes.Equals(other.DattoDeviceMemoryMegabytes)
                ) && 
                (
                    DattoDrivesErrors == other.DattoDrivesErrors ||
                    DattoDrivesErrors != null &&
                    DattoDrivesErrors.Equals(other.DattoDrivesErrors)
                ) && 
                (
                    DattoHostname == other.DattoHostname ||
                    DattoHostname != null &&
                    DattoHostname.Equals(other.DattoHostname)
                ) && 
                (
                    DattoInternalIP == other.DattoInternalIP ||
                    DattoInternalIP != null &&
                    DattoInternalIP.Equals(other.DattoInternalIP)
                ) && 
                (
                    DattoKernelVersionID == other.DattoKernelVersionID ||
                    DattoKernelVersionID != null &&
                    DattoKernelVersionID.Equals(other.DattoKernelVersionID)
                ) && 
                (
                    DattoLastCheckInDateTime == other.DattoLastCheckInDateTime ||
                    DattoLastCheckInDateTime != null &&
                    DattoLastCheckInDateTime.Equals(other.DattoLastCheckInDateTime)
                ) && 
                (
                    DattoNICSpeedKilobitsPerSecond == other.DattoNICSpeedKilobitsPerSecond ||
                    DattoNICSpeedKilobitsPerSecond != null &&
                    DattoNICSpeedKilobitsPerSecond.Equals(other.DattoNICSpeedKilobitsPerSecond)
                ) && 
                (
                    DattoNumberOfAgents == other.DattoNumberOfAgents ||
                    DattoNumberOfAgents != null &&
                    DattoNumberOfAgents.Equals(other.DattoNumberOfAgents)
                ) && 
                (
                    DattoNumberOfDrives == other.DattoNumberOfDrives ||
                    DattoNumberOfDrives != null &&
                    DattoNumberOfDrives.Equals(other.DattoNumberOfDrives)
                ) && 
                (
                    DattoNumberOfVolumes == other.DattoNumberOfVolumes ||
                    DattoNumberOfVolumes != null &&
                    DattoNumberOfVolumes.Equals(other.DattoNumberOfVolumes)
                ) && 
                (
                    DattoOffsiteUsedBytes == other.DattoOffsiteUsedBytes ||
                    DattoOffsiteUsedBytes != null &&
                    DattoOffsiteUsedBytes.Equals(other.DattoOffsiteUsedBytes)
                ) && 
                (
                    DattoOSVersionID == other.DattoOSVersionID ||
                    DattoOSVersionID != null &&
                    DattoOSVersionID.Equals(other.DattoOSVersionID)
                ) && 
                (
                    DattoPercentageUsed == other.DattoPercentageUsed ||
                    DattoPercentageUsed != null &&
                    DattoPercentageUsed.Equals(other.DattoPercentageUsed)
                ) && 
                (
                    DattoProtectedKilobytes == other.DattoProtectedKilobytes ||
                    DattoProtectedKilobytes != null &&
                    DattoProtectedKilobytes.Equals(other.DattoProtectedKilobytes)
                ) && 
                (
                    DattoRemoteIP == other.DattoRemoteIP ||
                    DattoRemoteIP != null &&
                    DattoRemoteIP.Equals(other.DattoRemoteIP)
                ) && 
                (
                    DattoSerialNumber == other.DattoSerialNumber ||
                    DattoSerialNumber != null &&
                    DattoSerialNumber.Equals(other.DattoSerialNumber)
                ) && 
                (
                    DattoUptimeSeconds == other.DattoUptimeSeconds ||
                    DattoUptimeSeconds != null &&
                    DattoUptimeSeconds.Equals(other.DattoUptimeSeconds)
                ) && 
                (
                    DattoUsedKilobytes == other.DattoUsedKilobytes ||
                    DattoUsedKilobytes != null &&
                    DattoUsedKilobytes.Equals(other.DattoUsedKilobytes)
                ) && 
                (
                    DattoZFSVersionID == other.DattoZFSVersionID ||
                    DattoZFSVersionID != null &&
                    DattoZFSVersionID.Equals(other.DattoZFSVersionID)
                ) && 
                (
                    DeviceNetworkingID == other.DeviceNetworkingID ||
                    DeviceNetworkingID != null &&
                    DeviceNetworkingID.Equals(other.DeviceNetworkingID)
                ) && 
                (
                    Domain == other.Domain ||
                    Domain != null &&
                    Domain.Equals(other.Domain)
                ) && 
                (
                    DomainRegistrarID == other.DomainRegistrarID ||
                    DomainRegistrarID != null &&
                    DomainRegistrarID.Equals(other.DomainRegistrarID)
                ) && 
                (
                    DomainRegistrationDateTime == other.DomainRegistrationDateTime ||
                    DomainRegistrationDateTime != null &&
                    DomainRegistrationDateTime.Equals(other.DomainRegistrationDateTime)
                ) && 
                (
                    DomainLastUpdatedDateTime == other.DomainLastUpdatedDateTime ||
                    DomainLastUpdatedDateTime != null &&
                    DomainLastUpdatedDateTime.Equals(other.DomainLastUpdatedDateTime)
                ) && 
                (
                    DomainExpirationDateTime == other.DomainExpirationDateTime ||
                    DomainExpirationDateTime != null &&
                    DomainExpirationDateTime.Equals(other.DomainExpirationDateTime)
                ) && 
                (
                    HourlyCost == other.HourlyCost ||
                    HourlyCost != null &&
                    HourlyCost.Equals(other.HourlyCost)
                ) && 
                (
                    ImpersonatorCreatorResourceID == other.ImpersonatorCreatorResourceID ||
                    ImpersonatorCreatorResourceID != null &&
                    ImpersonatorCreatorResourceID.Equals(other.ImpersonatorCreatorResourceID)
                ) && 
                (
                    InstallDate == other.InstallDate ||
                    InstallDate != null &&
                    InstallDate.Equals(other.InstallDate)
                ) && 
                (
                    InstalledByContactID == other.InstalledByContactID ||
                    InstalledByContactID != null &&
                    InstalledByContactID.Equals(other.InstalledByContactID)
                ) && 
                (
                    InstalledByID == other.InstalledByID ||
                    InstalledByID != null &&
                    InstalledByID.Equals(other.InstalledByID)
                ) && 
                (
                    IsActive == other.IsActive ||
                    IsActive != null &&
                    IsActive.Equals(other.IsActive)
                ) && 
                (
                    LastActivityPersonID == other.LastActivityPersonID ||
                    LastActivityPersonID != null &&
                    LastActivityPersonID.Equals(other.LastActivityPersonID)
                ) && 
                (
                    LastActivityPersonType == other.LastActivityPersonType ||
                    LastActivityPersonType != null &&
                    LastActivityPersonType.Equals(other.LastActivityPersonType)
                ) && 
                (
                    LastModifiedTime == other.LastModifiedTime ||
                    LastModifiedTime != null &&
                    LastModifiedTime.Equals(other.LastModifiedTime)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.Equals(other.Location)
                ) && 
                (
                    MonthlyCost == other.MonthlyCost ||
                    MonthlyCost != null &&
                    MonthlyCost.Equals(other.MonthlyCost)
                ) && 
                (
                    Notes == other.Notes ||
                    Notes != null &&
                    Notes.Equals(other.Notes)
                ) && 
                (
                    NumberOfUsers == other.NumberOfUsers ||
                    NumberOfUsers != null &&
                    NumberOfUsers.Equals(other.NumberOfUsers)
                ) && 
                (
                    ParentConfigurationItemID == other.ParentConfigurationItemID ||
                    ParentConfigurationItemID != null &&
                    ParentConfigurationItemID.Equals(other.ParentConfigurationItemID)
                ) && 
                (
                    PerUseCost == other.PerUseCost ||
                    PerUseCost != null &&
                    PerUseCost.Equals(other.PerUseCost)
                ) && 
                (
                    ProductID == other.ProductID ||
                    ProductID != null &&
                    ProductID.Equals(other.ProductID)
                ) && 
                (
                    ReferenceNumber == other.ReferenceNumber ||
                    ReferenceNumber != null &&
                    ReferenceNumber.Equals(other.ReferenceNumber)
                ) && 
                (
                    ReferenceTitle == other.ReferenceTitle ||
                    ReferenceTitle != null &&
                    ReferenceTitle.Equals(other.ReferenceTitle)
                ) && 
                (
                    RmmDeviceAuditAntivirusStatusID == other.RmmDeviceAuditAntivirusStatusID ||
                    RmmDeviceAuditAntivirusStatusID != null &&
                    RmmDeviceAuditAntivirusStatusID.Equals(other.RmmDeviceAuditAntivirusStatusID)
                ) && 
                (
                    RmmDeviceAuditArchitectureID == other.RmmDeviceAuditArchitectureID ||
                    RmmDeviceAuditArchitectureID != null &&
                    RmmDeviceAuditArchitectureID.Equals(other.RmmDeviceAuditArchitectureID)
                ) && 
                (
                    RmmDeviceAuditBackupStatusID == other.RmmDeviceAuditBackupStatusID ||
                    RmmDeviceAuditBackupStatusID != null &&
                    RmmDeviceAuditBackupStatusID.Equals(other.RmmDeviceAuditBackupStatusID)
                ) && 
                (
                    RmmDeviceAuditDescription == other.RmmDeviceAuditDescription ||
                    RmmDeviceAuditDescription != null &&
                    RmmDeviceAuditDescription.Equals(other.RmmDeviceAuditDescription)
                ) && 
                (
                    RmmDeviceAuditDeviceTypeID == other.RmmDeviceAuditDeviceTypeID ||
                    RmmDeviceAuditDeviceTypeID != null &&
                    RmmDeviceAuditDeviceTypeID.Equals(other.RmmDeviceAuditDeviceTypeID)
                ) && 
                (
                    RmmDeviceAuditDisplayAdaptorID == other.RmmDeviceAuditDisplayAdaptorID ||
                    RmmDeviceAuditDisplayAdaptorID != null &&
                    RmmDeviceAuditDisplayAdaptorID.Equals(other.RmmDeviceAuditDisplayAdaptorID)
                ) && 
                (
                    RmmDeviceAuditDomainID == other.RmmDeviceAuditDomainID ||
                    RmmDeviceAuditDomainID != null &&
                    RmmDeviceAuditDomainID.Equals(other.RmmDeviceAuditDomainID)
                ) && 
                (
                    RmmDeviceAuditExternalIPAddress == other.RmmDeviceAuditExternalIPAddress ||
                    RmmDeviceAuditExternalIPAddress != null &&
                    RmmDeviceAuditExternalIPAddress.Equals(other.RmmDeviceAuditExternalIPAddress)
                ) && 
                (
                    RmmDeviceAuditHostname == other.RmmDeviceAuditHostname ||
                    RmmDeviceAuditHostname != null &&
                    RmmDeviceAuditHostname.Equals(other.RmmDeviceAuditHostname)
                ) && 
                (
                    RmmDeviceAuditIPAddress == other.RmmDeviceAuditIPAddress ||
                    RmmDeviceAuditIPAddress != null &&
                    RmmDeviceAuditIPAddress.Equals(other.RmmDeviceAuditIPAddress)
                ) && 
                (
                    RmmDeviceAuditLastUser == other.RmmDeviceAuditLastUser ||
                    RmmDeviceAuditLastUser != null &&
                    RmmDeviceAuditLastUser.Equals(other.RmmDeviceAuditLastUser)
                ) && 
                (
                    RmmDeviceAuditMacAddress == other.RmmDeviceAuditMacAddress ||
                    RmmDeviceAuditMacAddress != null &&
                    RmmDeviceAuditMacAddress.Equals(other.RmmDeviceAuditMacAddress)
                ) && 
                (
                    RmmDeviceAuditManufacturerID == other.RmmDeviceAuditManufacturerID ||
                    RmmDeviceAuditManufacturerID != null &&
                    RmmDeviceAuditManufacturerID.Equals(other.RmmDeviceAuditManufacturerID)
                ) && 
                (
                    RmmDeviceAuditMemoryBytes == other.RmmDeviceAuditMemoryBytes ||
                    RmmDeviceAuditMemoryBytes != null &&
                    RmmDeviceAuditMemoryBytes.Equals(other.RmmDeviceAuditMemoryBytes)
                ) && 
                (
                    RmmDeviceAuditMissingPatchCount == other.RmmDeviceAuditMissingPatchCount ||
                    RmmDeviceAuditMissingPatchCount != null &&
                    RmmDeviceAuditMissingPatchCount.Equals(other.RmmDeviceAuditMissingPatchCount)
                ) && 
                (
                    RmmDeviceAuditMobileNetworkOperatorID == other.RmmDeviceAuditMobileNetworkOperatorID ||
                    RmmDeviceAuditMobileNetworkOperatorID != null &&
                    RmmDeviceAuditMobileNetworkOperatorID.Equals(other.RmmDeviceAuditMobileNetworkOperatorID)
                ) && 
                (
                    RmmDeviceAuditMobileNumber == other.RmmDeviceAuditMobileNumber ||
                    RmmDeviceAuditMobileNumber != null &&
                    RmmDeviceAuditMobileNumber.Equals(other.RmmDeviceAuditMobileNumber)
                ) && 
                (
                    RmmDeviceAuditModelID == other.RmmDeviceAuditModelID ||
                    RmmDeviceAuditModelID != null &&
                    RmmDeviceAuditModelID.Equals(other.RmmDeviceAuditModelID)
                ) && 
                (
                    RmmDeviceAuditMotherboardID == other.RmmDeviceAuditMotherboardID ||
                    RmmDeviceAuditMotherboardID != null &&
                    RmmDeviceAuditMotherboardID.Equals(other.RmmDeviceAuditMotherboardID)
                ) && 
                (
                    RmmDeviceAuditOperatingSystemID == other.RmmDeviceAuditOperatingSystemID ||
                    RmmDeviceAuditOperatingSystemID != null &&
                    RmmDeviceAuditOperatingSystemID.Equals(other.RmmDeviceAuditOperatingSystemID)
                ) && 
                (
                    RmmDeviceAuditOperatingSystemNameID == other.RmmDeviceAuditOperatingSystemNameID ||
                    RmmDeviceAuditOperatingSystemNameID != null &&
                    RmmDeviceAuditOperatingSystemNameID.Equals(other.RmmDeviceAuditOperatingSystemNameID)
                ) && 
                (
                    RmmDeviceAuditOperatingSystemVersionID == other.RmmDeviceAuditOperatingSystemVersionID ||
                    RmmDeviceAuditOperatingSystemVersionID != null &&
                    RmmDeviceAuditOperatingSystemVersionID.Equals(other.RmmDeviceAuditOperatingSystemVersionID)
                ) && 
                (
                    RmmDeviceAuditPatchStatusID == other.RmmDeviceAuditPatchStatusID ||
                    RmmDeviceAuditPatchStatusID != null &&
                    RmmDeviceAuditPatchStatusID.Equals(other.RmmDeviceAuditPatchStatusID)
                ) && 
                (
                    RmmDeviceAuditProcessorID == other.RmmDeviceAuditProcessorID ||
                    RmmDeviceAuditProcessorID != null &&
                    RmmDeviceAuditProcessorID.Equals(other.RmmDeviceAuditProcessorID)
                ) && 
                (
                    RmmDeviceAuditServicePackID == other.RmmDeviceAuditServicePackID ||
                    RmmDeviceAuditServicePackID != null &&
                    RmmDeviceAuditServicePackID.Equals(other.RmmDeviceAuditServicePackID)
                ) && 
                (
                    RmmDeviceAuditSNMPContact == other.RmmDeviceAuditSNMPContact ||
                    RmmDeviceAuditSNMPContact != null &&
                    RmmDeviceAuditSNMPContact.Equals(other.RmmDeviceAuditSNMPContact)
                ) && 
                (
                    RmmDeviceAuditSNMPLocation == other.RmmDeviceAuditSNMPLocation ||
                    RmmDeviceAuditSNMPLocation != null &&
                    RmmDeviceAuditSNMPLocation.Equals(other.RmmDeviceAuditSNMPLocation)
                ) && 
                (
                    RmmDeviceAuditSNMPName == other.RmmDeviceAuditSNMPName ||
                    RmmDeviceAuditSNMPName != null &&
                    RmmDeviceAuditSNMPName.Equals(other.RmmDeviceAuditSNMPName)
                ) && 
                (
                    RmmDeviceAuditSoftwareStatusID == other.RmmDeviceAuditSoftwareStatusID ||
                    RmmDeviceAuditSoftwareStatusID != null &&
                    RmmDeviceAuditSoftwareStatusID.Equals(other.RmmDeviceAuditSoftwareStatusID)
                ) && 
                (
                    RmmDeviceAuditStorageBytes == other.RmmDeviceAuditStorageBytes ||
                    RmmDeviceAuditStorageBytes != null &&
                    RmmDeviceAuditStorageBytes.Equals(other.RmmDeviceAuditStorageBytes)
                ) && 
                (
                    RmmDeviceID == other.RmmDeviceID ||
                    RmmDeviceID != null &&
                    RmmDeviceID.Equals(other.RmmDeviceID)
                ) && 
                (
                    RmmDeviceUID == other.RmmDeviceUID ||
                    RmmDeviceUID != null &&
                    RmmDeviceUID.Equals(other.RmmDeviceUID)
                ) && 
                (
                    RmmOpenAlertCount == other.RmmOpenAlertCount ||
                    RmmOpenAlertCount != null &&
                    RmmOpenAlertCount.Equals(other.RmmOpenAlertCount)
                ) && 
                (
                    SerialNumber == other.SerialNumber ||
                    SerialNumber != null &&
                    SerialNumber.Equals(other.SerialNumber)
                ) && 
                (
                    ServiceBundleID == other.ServiceBundleID ||
                    ServiceBundleID != null &&
                    ServiceBundleID.Equals(other.ServiceBundleID)
                ) && 
                (
                    ServiceID == other.ServiceID ||
                    ServiceID != null &&
                    ServiceID.Equals(other.ServiceID)
                ) && 
                (
                    ServiceLevelAgreementID == other.ServiceLevelAgreementID ||
                    ServiceLevelAgreementID != null &&
                    ServiceLevelAgreementID.Equals(other.ServiceLevelAgreementID)
                ) && 
                (
                    SetupFee == other.SetupFee ||
                    SetupFee != null &&
                    SetupFee.Equals(other.SetupFee)
                ) && 
                (
                    SourceChargeID == other.SourceChargeID ||
                    SourceChargeID != null &&
                    SourceChargeID.Equals(other.SourceChargeID)
                ) && 
                (
                    SourceChargeType == other.SourceChargeType ||
                    SourceChargeType != null &&
                    SourceChargeType.Equals(other.SourceChargeType)
                ) && 
                (
                    SslSource == other.SslSource ||
                    SslSource != null &&
                    SslSource.Equals(other.SslSource)
                ) && 
                (
                    SslCommonName == other.SslCommonName ||
                    SslCommonName != null &&
                    SslCommonName.Equals(other.SslCommonName)
                ) && 
                (
                    SslValidFromDateTime == other.SslValidFromDateTime ||
                    SslValidFromDateTime != null &&
                    SslValidFromDateTime.Equals(other.SslValidFromDateTime)
                ) && 
                (
                    SslValidUntilDateTime == other.SslValidUntilDateTime ||
                    SslValidUntilDateTime != null &&
                    SslValidUntilDateTime.Equals(other.SslValidUntilDateTime)
                ) && 
                (
                    SslIssuedBy == other.SslIssuedBy ||
                    SslIssuedBy != null &&
                    SslIssuedBy.Equals(other.SslIssuedBy)
                ) && 
                (
                    SslOrganization == other.SslOrganization ||
                    SslOrganization != null &&
                    SslOrganization.Equals(other.SslOrganization)
                ) && 
                (
                    SslOrganizationUnit == other.SslOrganizationUnit ||
                    SslOrganizationUnit != null &&
                    SslOrganizationUnit.Equals(other.SslOrganizationUnit)
                ) && 
                (
                    SslLocation == other.SslLocation ||
                    SslLocation != null &&
                    SslLocation.Equals(other.SslLocation)
                ) && 
                (
                    SslSerialNumber == other.SslSerialNumber ||
                    SslSerialNumber != null &&
                    SslSerialNumber.Equals(other.SslSerialNumber)
                ) && 
                (
                    SslSignatureAlgorithm == other.SslSignatureAlgorithm ||
                    SslSignatureAlgorithm != null &&
                    SslSignatureAlgorithm.Equals(other.SslSignatureAlgorithm)
                ) && 
                (
                    VendorID == other.VendorID ||
                    VendorID != null &&
                    VendorID.Equals(other.VendorID)
                ) && 
                (
                    WarrantyExpirationDate == other.WarrantyExpirationDate ||
                    WarrantyExpirationDate != null &&
                    WarrantyExpirationDate.Equals(other.WarrantyExpirationDate)
                ) && 
                (
                    UserDefinedFields == other.UserDefinedFields ||
                    UserDefinedFields != null &&
                    UserDefinedFields.SequenceEqual(other.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (ApiVendorID != null)
                    hashCode = hashCode * 59 + ApiVendorID.GetHashCode();
                    if (CompanyID != null)
                    hashCode = hashCode * 59 + CompanyID.GetHashCode();
                    if (CompanyLocationID != null)
                    hashCode = hashCode * 59 + CompanyLocationID.GetHashCode();
                    if (ConfigurationItemCategoryID != null)
                    hashCode = hashCode * 59 + ConfigurationItemCategoryID.GetHashCode();
                    if (ConfigurationItemType != null)
                    hashCode = hashCode * 59 + ConfigurationItemType.GetHashCode();
                    if (ContactID != null)
                    hashCode = hashCode * 59 + ContactID.GetHashCode();
                    if (ContractID != null)
                    hashCode = hashCode * 59 + ContractID.GetHashCode();
                    if (ContractServiceBundleID != null)
                    hashCode = hashCode * 59 + ContractServiceBundleID.GetHashCode();
                    if (ContractServiceID != null)
                    hashCode = hashCode * 59 + ContractServiceID.GetHashCode();
                    if (CreateDate != null)
                    hashCode = hashCode * 59 + CreateDate.GetHashCode();
                    if (CreatedByPersonID != null)
                    hashCode = hashCode * 59 + CreatedByPersonID.GetHashCode();
                    if (DailyCost != null)
                    hashCode = hashCode * 59 + DailyCost.GetHashCode();
                    if (DattoAvailableKilobytes != null)
                    hashCode = hashCode * 59 + DattoAvailableKilobytes.GetHashCode();
                    if (DattoDeviceMemoryMegabytes != null)
                    hashCode = hashCode * 59 + DattoDeviceMemoryMegabytes.GetHashCode();
                    if (DattoDrivesErrors != null)
                    hashCode = hashCode * 59 + DattoDrivesErrors.GetHashCode();
                    if (DattoHostname != null)
                    hashCode = hashCode * 59 + DattoHostname.GetHashCode();
                    if (DattoInternalIP != null)
                    hashCode = hashCode * 59 + DattoInternalIP.GetHashCode();
                    if (DattoKernelVersionID != null)
                    hashCode = hashCode * 59 + DattoKernelVersionID.GetHashCode();
                    if (DattoLastCheckInDateTime != null)
                    hashCode = hashCode * 59 + DattoLastCheckInDateTime.GetHashCode();
                    if (DattoNICSpeedKilobitsPerSecond != null)
                    hashCode = hashCode * 59 + DattoNICSpeedKilobitsPerSecond.GetHashCode();
                    if (DattoNumberOfAgents != null)
                    hashCode = hashCode * 59 + DattoNumberOfAgents.GetHashCode();
                    if (DattoNumberOfDrives != null)
                    hashCode = hashCode * 59 + DattoNumberOfDrives.GetHashCode();
                    if (DattoNumberOfVolumes != null)
                    hashCode = hashCode * 59 + DattoNumberOfVolumes.GetHashCode();
                    if (DattoOffsiteUsedBytes != null)
                    hashCode = hashCode * 59 + DattoOffsiteUsedBytes.GetHashCode();
                    if (DattoOSVersionID != null)
                    hashCode = hashCode * 59 + DattoOSVersionID.GetHashCode();
                    if (DattoPercentageUsed != null)
                    hashCode = hashCode * 59 + DattoPercentageUsed.GetHashCode();
                    if (DattoProtectedKilobytes != null)
                    hashCode = hashCode * 59 + DattoProtectedKilobytes.GetHashCode();
                    if (DattoRemoteIP != null)
                    hashCode = hashCode * 59 + DattoRemoteIP.GetHashCode();
                    if (DattoSerialNumber != null)
                    hashCode = hashCode * 59 + DattoSerialNumber.GetHashCode();
                    if (DattoUptimeSeconds != null)
                    hashCode = hashCode * 59 + DattoUptimeSeconds.GetHashCode();
                    if (DattoUsedKilobytes != null)
                    hashCode = hashCode * 59 + DattoUsedKilobytes.GetHashCode();
                    if (DattoZFSVersionID != null)
                    hashCode = hashCode * 59 + DattoZFSVersionID.GetHashCode();
                    if (DeviceNetworkingID != null)
                    hashCode = hashCode * 59 + DeviceNetworkingID.GetHashCode();
                    if (Domain != null)
                    hashCode = hashCode * 59 + Domain.GetHashCode();
                    if (DomainRegistrarID != null)
                    hashCode = hashCode * 59 + DomainRegistrarID.GetHashCode();
                    if (DomainRegistrationDateTime != null)
                    hashCode = hashCode * 59 + DomainRegistrationDateTime.GetHashCode();
                    if (DomainLastUpdatedDateTime != null)
                    hashCode = hashCode * 59 + DomainLastUpdatedDateTime.GetHashCode();
                    if (DomainExpirationDateTime != null)
                    hashCode = hashCode * 59 + DomainExpirationDateTime.GetHashCode();
                    if (HourlyCost != null)
                    hashCode = hashCode * 59 + HourlyCost.GetHashCode();
                    if (ImpersonatorCreatorResourceID != null)
                    hashCode = hashCode * 59 + ImpersonatorCreatorResourceID.GetHashCode();
                    if (InstallDate != null)
                    hashCode = hashCode * 59 + InstallDate.GetHashCode();
                    if (InstalledByContactID != null)
                    hashCode = hashCode * 59 + InstalledByContactID.GetHashCode();
                    if (InstalledByID != null)
                    hashCode = hashCode * 59 + InstalledByID.GetHashCode();
                    if (IsActive != null)
                    hashCode = hashCode * 59 + IsActive.GetHashCode();
                    if (LastActivityPersonID != null)
                    hashCode = hashCode * 59 + LastActivityPersonID.GetHashCode();
                    if (LastActivityPersonType != null)
                    hashCode = hashCode * 59 + LastActivityPersonType.GetHashCode();
                    if (LastModifiedTime != null)
                    hashCode = hashCode * 59 + LastModifiedTime.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                    if (MonthlyCost != null)
                    hashCode = hashCode * 59 + MonthlyCost.GetHashCode();
                    if (Notes != null)
                    hashCode = hashCode * 59 + Notes.GetHashCode();
                    if (NumberOfUsers != null)
                    hashCode = hashCode * 59 + NumberOfUsers.GetHashCode();
                    if (ParentConfigurationItemID != null)
                    hashCode = hashCode * 59 + ParentConfigurationItemID.GetHashCode();
                    if (PerUseCost != null)
                    hashCode = hashCode * 59 + PerUseCost.GetHashCode();
                    if (ProductID != null)
                    hashCode = hashCode * 59 + ProductID.GetHashCode();
                    if (ReferenceNumber != null)
                    hashCode = hashCode * 59 + ReferenceNumber.GetHashCode();
                    if (ReferenceTitle != null)
                    hashCode = hashCode * 59 + ReferenceTitle.GetHashCode();
                    if (RmmDeviceAuditAntivirusStatusID != null)
                    hashCode = hashCode * 59 + RmmDeviceAuditAntivirusStatusID.GetHashCode();
                    if (RmmDeviceAuditArchitectureID != null)
                    hashCode = hashCode * 59 + RmmDeviceAuditArchitectureID.GetHashCode();
                    if (RmmDeviceAuditBackupStatusID != null)
                    hashCode = hashCode * 59 + RmmDeviceAuditBackupStatusID.GetHashCode();
                    if (RmmDeviceAuditDescription != null)
                    hashCode = hashCode * 59 + RmmDeviceAuditDescription.GetHashCode();
                    if (RmmDeviceAuditDeviceTypeID != null)
                    hashCode = hashCode * 59 + RmmDeviceAuditDeviceTypeID.GetHashCode();
                    if (RmmDeviceAuditDisplayAdaptorID != null)
                    hashCode = hashCode * 59 + RmmDeviceAuditDisplayAdaptorID.GetHashCode();
                    if (RmmDeviceAuditDomainID != null)
                    hashCode = hashCode * 59 + RmmDeviceAuditDomainID.GetHashCode();
                    if (RmmDeviceAuditExternalIPAddress != null)
                    hashCode = hashCode * 59 + RmmDeviceAuditExternalIPAddress.GetHashCode();
                    if (RmmDeviceAuditHostname != null)
                    hashCode = hashCode * 59 + RmmDeviceAuditHostname.GetHashCode();
                    if (RmmDeviceAuditIPAddress != null)
                    hashCode = hashCode * 59 + RmmDeviceAuditIPAddress.GetHashCode();
                    if (RmmDeviceAuditLastUser != null)
                    hashCode = hashCode * 59 + RmmDeviceAuditLastUser.GetHashCode();
                    if (RmmDeviceAuditMacAddress != null)
                    hashCode = hashCode * 59 + RmmDeviceAuditMacAddress.GetHashCode();
                    if (RmmDeviceAuditManufacturerID != null)
                    hashCode = hashCode * 59 + RmmDeviceAuditManufacturerID.GetHashCode();
                    if (RmmDeviceAuditMemoryBytes != null)
                    hashCode = hashCode * 59 + RmmDeviceAuditMemoryBytes.GetHashCode();
                    if (RmmDeviceAuditMissingPatchCount != null)
                    hashCode = hashCode * 59 + RmmDeviceAuditMissingPatchCount.GetHashCode();
                    if (RmmDeviceAuditMobileNetworkOperatorID != null)
                    hashCode = hashCode * 59 + RmmDeviceAuditMobileNetworkOperatorID.GetHashCode();
                    if (RmmDeviceAuditMobileNumber != null)
                    hashCode = hashCode * 59 + RmmDeviceAuditMobileNumber.GetHashCode();
                    if (RmmDeviceAuditModelID != null)
                    hashCode = hashCode * 59 + RmmDeviceAuditModelID.GetHashCode();
                    if (RmmDeviceAuditMotherboardID != null)
                    hashCode = hashCode * 59 + RmmDeviceAuditMotherboardID.GetHashCode();
                    if (RmmDeviceAuditOperatingSystemID != null)
                    hashCode = hashCode * 59 + RmmDeviceAuditOperatingSystemID.GetHashCode();
                    if (RmmDeviceAuditOperatingSystemNameID != null)
                    hashCode = hashCode * 59 + RmmDeviceAuditOperatingSystemNameID.GetHashCode();
                    if (RmmDeviceAuditOperatingSystemVersionID != null)
                    hashCode = hashCode * 59 + RmmDeviceAuditOperatingSystemVersionID.GetHashCode();
                    if (RmmDeviceAuditPatchStatusID != null)
                    hashCode = hashCode * 59 + RmmDeviceAuditPatchStatusID.GetHashCode();
                    if (RmmDeviceAuditProcessorID != null)
                    hashCode = hashCode * 59 + RmmDeviceAuditProcessorID.GetHashCode();
                    if (RmmDeviceAuditServicePackID != null)
                    hashCode = hashCode * 59 + RmmDeviceAuditServicePackID.GetHashCode();
                    if (RmmDeviceAuditSNMPContact != null)
                    hashCode = hashCode * 59 + RmmDeviceAuditSNMPContact.GetHashCode();
                    if (RmmDeviceAuditSNMPLocation != null)
                    hashCode = hashCode * 59 + RmmDeviceAuditSNMPLocation.GetHashCode();
                    if (RmmDeviceAuditSNMPName != null)
                    hashCode = hashCode * 59 + RmmDeviceAuditSNMPName.GetHashCode();
                    if (RmmDeviceAuditSoftwareStatusID != null)
                    hashCode = hashCode * 59 + RmmDeviceAuditSoftwareStatusID.GetHashCode();
                    if (RmmDeviceAuditStorageBytes != null)
                    hashCode = hashCode * 59 + RmmDeviceAuditStorageBytes.GetHashCode();
                    if (RmmDeviceID != null)
                    hashCode = hashCode * 59 + RmmDeviceID.GetHashCode();
                    if (RmmDeviceUID != null)
                    hashCode = hashCode * 59 + RmmDeviceUID.GetHashCode();
                    if (RmmOpenAlertCount != null)
                    hashCode = hashCode * 59 + RmmOpenAlertCount.GetHashCode();
                    if (SerialNumber != null)
                    hashCode = hashCode * 59 + SerialNumber.GetHashCode();
                    if (ServiceBundleID != null)
                    hashCode = hashCode * 59 + ServiceBundleID.GetHashCode();
                    if (ServiceID != null)
                    hashCode = hashCode * 59 + ServiceID.GetHashCode();
                    if (ServiceLevelAgreementID != null)
                    hashCode = hashCode * 59 + ServiceLevelAgreementID.GetHashCode();
                    if (SetupFee != null)
                    hashCode = hashCode * 59 + SetupFee.GetHashCode();
                    if (SourceChargeID != null)
                    hashCode = hashCode * 59 + SourceChargeID.GetHashCode();
                    if (SourceChargeType != null)
                    hashCode = hashCode * 59 + SourceChargeType.GetHashCode();
                    if (SslSource != null)
                    hashCode = hashCode * 59 + SslSource.GetHashCode();
                    if (SslCommonName != null)
                    hashCode = hashCode * 59 + SslCommonName.GetHashCode();
                    if (SslValidFromDateTime != null)
                    hashCode = hashCode * 59 + SslValidFromDateTime.GetHashCode();
                    if (SslValidUntilDateTime != null)
                    hashCode = hashCode * 59 + SslValidUntilDateTime.GetHashCode();
                    if (SslIssuedBy != null)
                    hashCode = hashCode * 59 + SslIssuedBy.GetHashCode();
                    if (SslOrganization != null)
                    hashCode = hashCode * 59 + SslOrganization.GetHashCode();
                    if (SslOrganizationUnit != null)
                    hashCode = hashCode * 59 + SslOrganizationUnit.GetHashCode();
                    if (SslLocation != null)
                    hashCode = hashCode * 59 + SslLocation.GetHashCode();
                    if (SslSerialNumber != null)
                    hashCode = hashCode * 59 + SslSerialNumber.GetHashCode();
                    if (SslSignatureAlgorithm != null)
                    hashCode = hashCode * 59 + SslSignatureAlgorithm.GetHashCode();
                    if (VendorID != null)
                    hashCode = hashCode * 59 + VendorID.GetHashCode();
                    if (WarrantyExpirationDate != null)
                    hashCode = hashCode * 59 + WarrantyExpirationDate.GetHashCode();
                    if (UserDefinedFields != null)
                    hashCode = hashCode * 59 + UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ConfigurationItemExtModel left, ConfigurationItemExtModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ConfigurationItemExtModel left, ConfigurationItemExtModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
