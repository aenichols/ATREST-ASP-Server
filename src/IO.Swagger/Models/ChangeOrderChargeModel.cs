/*
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ChangeOrderChargeModel : IEquatable<ChangeOrderChargeModel>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets BillableAmount
        /// </summary>
        [DataMember(Name="billableAmount")]
        public double? BillableAmount { get; set; }

        /// <summary>
        /// Gets or Sets BillingCodeID
        /// </summary>
        [DataMember(Name="billingCodeID")]
        public int? BillingCodeID { get; set; }

        /// <summary>
        /// Gets or Sets ChangeOrderHours
        /// </summary>
        [DataMember(Name="changeOrderHours")]
        public double? ChangeOrderHours { get; set; }

        /// <summary>
        /// Gets or Sets ChargeType
        /// </summary>
        [DataMember(Name="chargeType")]
        public int? ChargeType { get; set; }

        /// <summary>
        /// Gets or Sets ContractServiceBundleID
        /// </summary>
        [DataMember(Name="contractServiceBundleID")]
        public int? ContractServiceBundleID { get; set; }

        /// <summary>
        /// Gets or Sets ContractServiceID
        /// </summary>
        [DataMember(Name="contractServiceID")]
        public int? ContractServiceID { get; set; }

        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="createDate")]
        public DateTime? CreateDate { get; set; }

        /// <summary>
        /// Gets or Sets CreatorResourceID
        /// </summary>
        [DataMember(Name="creatorResourceID")]
        public int? CreatorResourceID { get; set; }

        /// <summary>
        /// Gets or Sets DatePurchased
        /// </summary>
        [DataMember(Name="datePurchased")]
        public DateTime? DatePurchased { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ExtendedCost
        /// </summary>
        [DataMember(Name="extendedCost")]
        public double? ExtendedCost { get; set; }

        /// <summary>
        /// Gets or Sets InternalCurrencyBillableAmount
        /// </summary>
        [DataMember(Name="internalCurrencyBillableAmount")]
        public double? InternalCurrencyBillableAmount { get; set; }

        /// <summary>
        /// Gets or Sets InternalCurrencyUnitPrice
        /// </summary>
        [DataMember(Name="internalCurrencyUnitPrice")]
        public double? InternalCurrencyUnitPrice { get; set; }

        /// <summary>
        /// Gets or Sets InternalPurchaseOrderNumber
        /// </summary>
        [DataMember(Name="internalPurchaseOrderNumber")]
        public string InternalPurchaseOrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets IsBillableToCompany
        /// </summary>
        [DataMember(Name="isBillableToCompany")]
        public bool? IsBillableToCompany { get; set; }

        /// <summary>
        /// Gets or Sets IsBilled
        /// </summary>
        [DataMember(Name="isBilled")]
        public bool? IsBilled { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name="notes")]
        public string Notes { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationalLevelAssociationID
        /// </summary>
        [DataMember(Name="organizationalLevelAssociationID")]
        public int? OrganizationalLevelAssociationID { get; set; }

        /// <summary>
        /// Gets or Sets ProductID
        /// </summary>
        [DataMember(Name="productID")]
        public int? ProductID { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseOrderNumber
        /// </summary>
        [DataMember(Name="purchaseOrderNumber")]
        public string PurchaseOrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status")]
        public int? Status { get; set; }

        /// <summary>
        /// Gets or Sets StatusLastModifiedBy
        /// </summary>
        [DataMember(Name="statusLastModifiedBy")]
        public int? StatusLastModifiedBy { get; set; }

        /// <summary>
        /// Gets or Sets StatusLastModifiedDate
        /// </summary>
        [DataMember(Name="statusLastModifiedDate")]
        public DateTime? StatusLastModifiedDate { get; set; }

        /// <summary>
        /// Gets or Sets TaskID
        /// </summary>
        [DataMember(Name="taskID")]
        public int? TaskID { get; set; }

        /// <summary>
        /// Gets or Sets UnitCost
        /// </summary>
        [DataMember(Name="unitCost")]
        public double? UnitCost { get; set; }

        /// <summary>
        /// Gets or Sets UnitPrice
        /// </summary>
        [DataMember(Name="unitPrice")]
        public double? UnitPrice { get; set; }

        /// <summary>
        /// Gets or Sets UnitQuantity
        /// </summary>
        [DataMember(Name="unitQuantity")]
        public double? UnitQuantity { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields")]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChangeOrderChargeModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BillableAmount: ").Append(BillableAmount).Append("\n");
            sb.Append("  BillingCodeID: ").Append(BillingCodeID).Append("\n");
            sb.Append("  ChangeOrderHours: ").Append(ChangeOrderHours).Append("\n");
            sb.Append("  ChargeType: ").Append(ChargeType).Append("\n");
            sb.Append("  ContractServiceBundleID: ").Append(ContractServiceBundleID).Append("\n");
            sb.Append("  ContractServiceID: ").Append(ContractServiceID).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  CreatorResourceID: ").Append(CreatorResourceID).Append("\n");
            sb.Append("  DatePurchased: ").Append(DatePurchased).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExtendedCost: ").Append(ExtendedCost).Append("\n");
            sb.Append("  InternalCurrencyBillableAmount: ").Append(InternalCurrencyBillableAmount).Append("\n");
            sb.Append("  InternalCurrencyUnitPrice: ").Append(InternalCurrencyUnitPrice).Append("\n");
            sb.Append("  InternalPurchaseOrderNumber: ").Append(InternalPurchaseOrderNumber).Append("\n");
            sb.Append("  IsBillableToCompany: ").Append(IsBillableToCompany).Append("\n");
            sb.Append("  IsBilled: ").Append(IsBilled).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  OrganizationalLevelAssociationID: ").Append(OrganizationalLevelAssociationID).Append("\n");
            sb.Append("  ProductID: ").Append(ProductID).Append("\n");
            sb.Append("  PurchaseOrderNumber: ").Append(PurchaseOrderNumber).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusLastModifiedBy: ").Append(StatusLastModifiedBy).Append("\n");
            sb.Append("  StatusLastModifiedDate: ").Append(StatusLastModifiedDate).Append("\n");
            sb.Append("  TaskID: ").Append(TaskID).Append("\n");
            sb.Append("  UnitCost: ").Append(UnitCost).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  UnitQuantity: ").Append(UnitQuantity).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ChangeOrderChargeModel)obj);
        }

        /// <summary>
        /// Returns true if ChangeOrderChargeModel instances are equal
        /// </summary>
        /// <param name="other">Instance of ChangeOrderChargeModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChangeOrderChargeModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    BillableAmount == other.BillableAmount ||
                    BillableAmount != null &&
                    BillableAmount.Equals(other.BillableAmount)
                ) && 
                (
                    BillingCodeID == other.BillingCodeID ||
                    BillingCodeID != null &&
                    BillingCodeID.Equals(other.BillingCodeID)
                ) && 
                (
                    ChangeOrderHours == other.ChangeOrderHours ||
                    ChangeOrderHours != null &&
                    ChangeOrderHours.Equals(other.ChangeOrderHours)
                ) && 
                (
                    ChargeType == other.ChargeType ||
                    ChargeType != null &&
                    ChargeType.Equals(other.ChargeType)
                ) && 
                (
                    ContractServiceBundleID == other.ContractServiceBundleID ||
                    ContractServiceBundleID != null &&
                    ContractServiceBundleID.Equals(other.ContractServiceBundleID)
                ) && 
                (
                    ContractServiceID == other.ContractServiceID ||
                    ContractServiceID != null &&
                    ContractServiceID.Equals(other.ContractServiceID)
                ) && 
                (
                    CreateDate == other.CreateDate ||
                    CreateDate != null &&
                    CreateDate.Equals(other.CreateDate)
                ) && 
                (
                    CreatorResourceID == other.CreatorResourceID ||
                    CreatorResourceID != null &&
                    CreatorResourceID.Equals(other.CreatorResourceID)
                ) && 
                (
                    DatePurchased == other.DatePurchased ||
                    DatePurchased != null &&
                    DatePurchased.Equals(other.DatePurchased)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    ExtendedCost == other.ExtendedCost ||
                    ExtendedCost != null &&
                    ExtendedCost.Equals(other.ExtendedCost)
                ) && 
                (
                    InternalCurrencyBillableAmount == other.InternalCurrencyBillableAmount ||
                    InternalCurrencyBillableAmount != null &&
                    InternalCurrencyBillableAmount.Equals(other.InternalCurrencyBillableAmount)
                ) && 
                (
                    InternalCurrencyUnitPrice == other.InternalCurrencyUnitPrice ||
                    InternalCurrencyUnitPrice != null &&
                    InternalCurrencyUnitPrice.Equals(other.InternalCurrencyUnitPrice)
                ) && 
                (
                    InternalPurchaseOrderNumber == other.InternalPurchaseOrderNumber ||
                    InternalPurchaseOrderNumber != null &&
                    InternalPurchaseOrderNumber.Equals(other.InternalPurchaseOrderNumber)
                ) && 
                (
                    IsBillableToCompany == other.IsBillableToCompany ||
                    IsBillableToCompany != null &&
                    IsBillableToCompany.Equals(other.IsBillableToCompany)
                ) && 
                (
                    IsBilled == other.IsBilled ||
                    IsBilled != null &&
                    IsBilled.Equals(other.IsBilled)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Notes == other.Notes ||
                    Notes != null &&
                    Notes.Equals(other.Notes)
                ) && 
                (
                    OrganizationalLevelAssociationID == other.OrganizationalLevelAssociationID ||
                    OrganizationalLevelAssociationID != null &&
                    OrganizationalLevelAssociationID.Equals(other.OrganizationalLevelAssociationID)
                ) && 
                (
                    ProductID == other.ProductID ||
                    ProductID != null &&
                    ProductID.Equals(other.ProductID)
                ) && 
                (
                    PurchaseOrderNumber == other.PurchaseOrderNumber ||
                    PurchaseOrderNumber != null &&
                    PurchaseOrderNumber.Equals(other.PurchaseOrderNumber)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    StatusLastModifiedBy == other.StatusLastModifiedBy ||
                    StatusLastModifiedBy != null &&
                    StatusLastModifiedBy.Equals(other.StatusLastModifiedBy)
                ) && 
                (
                    StatusLastModifiedDate == other.StatusLastModifiedDate ||
                    StatusLastModifiedDate != null &&
                    StatusLastModifiedDate.Equals(other.StatusLastModifiedDate)
                ) && 
                (
                    TaskID == other.TaskID ||
                    TaskID != null &&
                    TaskID.Equals(other.TaskID)
                ) && 
                (
                    UnitCost == other.UnitCost ||
                    UnitCost != null &&
                    UnitCost.Equals(other.UnitCost)
                ) && 
                (
                    UnitPrice == other.UnitPrice ||
                    UnitPrice != null &&
                    UnitPrice.Equals(other.UnitPrice)
                ) && 
                (
                    UnitQuantity == other.UnitQuantity ||
                    UnitQuantity != null &&
                    UnitQuantity.Equals(other.UnitQuantity)
                ) && 
                (
                    UserDefinedFields == other.UserDefinedFields ||
                    UserDefinedFields != null &&
                    UserDefinedFields.SequenceEqual(other.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (BillableAmount != null)
                    hashCode = hashCode * 59 + BillableAmount.GetHashCode();
                    if (BillingCodeID != null)
                    hashCode = hashCode * 59 + BillingCodeID.GetHashCode();
                    if (ChangeOrderHours != null)
                    hashCode = hashCode * 59 + ChangeOrderHours.GetHashCode();
                    if (ChargeType != null)
                    hashCode = hashCode * 59 + ChargeType.GetHashCode();
                    if (ContractServiceBundleID != null)
                    hashCode = hashCode * 59 + ContractServiceBundleID.GetHashCode();
                    if (ContractServiceID != null)
                    hashCode = hashCode * 59 + ContractServiceID.GetHashCode();
                    if (CreateDate != null)
                    hashCode = hashCode * 59 + CreateDate.GetHashCode();
                    if (CreatorResourceID != null)
                    hashCode = hashCode * 59 + CreatorResourceID.GetHashCode();
                    if (DatePurchased != null)
                    hashCode = hashCode * 59 + DatePurchased.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (ExtendedCost != null)
                    hashCode = hashCode * 59 + ExtendedCost.GetHashCode();
                    if (InternalCurrencyBillableAmount != null)
                    hashCode = hashCode * 59 + InternalCurrencyBillableAmount.GetHashCode();
                    if (InternalCurrencyUnitPrice != null)
                    hashCode = hashCode * 59 + InternalCurrencyUnitPrice.GetHashCode();
                    if (InternalPurchaseOrderNumber != null)
                    hashCode = hashCode * 59 + InternalPurchaseOrderNumber.GetHashCode();
                    if (IsBillableToCompany != null)
                    hashCode = hashCode * 59 + IsBillableToCompany.GetHashCode();
                    if (IsBilled != null)
                    hashCode = hashCode * 59 + IsBilled.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Notes != null)
                    hashCode = hashCode * 59 + Notes.GetHashCode();
                    if (OrganizationalLevelAssociationID != null)
                    hashCode = hashCode * 59 + OrganizationalLevelAssociationID.GetHashCode();
                    if (ProductID != null)
                    hashCode = hashCode * 59 + ProductID.GetHashCode();
                    if (PurchaseOrderNumber != null)
                    hashCode = hashCode * 59 + PurchaseOrderNumber.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (StatusLastModifiedBy != null)
                    hashCode = hashCode * 59 + StatusLastModifiedBy.GetHashCode();
                    if (StatusLastModifiedDate != null)
                    hashCode = hashCode * 59 + StatusLastModifiedDate.GetHashCode();
                    if (TaskID != null)
                    hashCode = hashCode * 59 + TaskID.GetHashCode();
                    if (UnitCost != null)
                    hashCode = hashCode * 59 + UnitCost.GetHashCode();
                    if (UnitPrice != null)
                    hashCode = hashCode * 59 + UnitPrice.GetHashCode();
                    if (UnitQuantity != null)
                    hashCode = hashCode * 59 + UnitQuantity.GetHashCode();
                    if (UserDefinedFields != null)
                    hashCode = hashCode * 59 + UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ChangeOrderChargeModel left, ChangeOrderChargeModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ChangeOrderChargeModel left, ChangeOrderChargeModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
