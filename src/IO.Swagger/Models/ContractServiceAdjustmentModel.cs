/*
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ContractServiceAdjustmentModel : IEquatable<ContractServiceAdjustmentModel>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets AdjustedUnitCost
        /// </summary>
        [DataMember(Name="adjustedUnitCost")]
        public double? AdjustedUnitCost { get; set; }

        /// <summary>
        /// Gets or Sets AdjustedUnitPrice
        /// </summary>
        [DataMember(Name="adjustedUnitPrice")]
        public double? AdjustedUnitPrice { get; set; }

        /// <summary>
        /// Gets or Sets AllowRepeatService
        /// </summary>
        [DataMember(Name="allowRepeatService")]
        public bool? AllowRepeatService { get; set; }

        /// <summary>
        /// Gets or Sets ContractID
        /// </summary>
        [DataMember(Name="contractID")]
        public int? ContractID { get; set; }

        /// <summary>
        /// Gets or Sets ContractServiceID
        /// </summary>
        [DataMember(Name="contractServiceID")]
        public int? ContractServiceID { get; set; }

        /// <summary>
        /// Gets or Sets EffectiveDate
        /// </summary>
        [DataMember(Name="effectiveDate")]
        public DateTime? EffectiveDate { get; set; }

        /// <summary>
        /// Gets or Sets QuoteItemID
        /// </summary>
        [DataMember(Name="quoteItemID")]
        public int? QuoteItemID { get; set; }

        /// <summary>
        /// Gets or Sets ServiceID
        /// </summary>
        [DataMember(Name="serviceID")]
        public int? ServiceID { get; set; }

        /// <summary>
        /// Gets or Sets UnitChange
        /// </summary>
        [DataMember(Name="unitChange")]
        public int? UnitChange { get; set; }

        /// <summary>
        /// Gets or Sets SoapParentPropertyId
        /// </summary>
        [DataMember(Name="soapParentPropertyId")]
        public ExpressionFuncContractServiceAdjustmentInt64 SoapParentPropertyId { get; private set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields")]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContractServiceAdjustmentModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AdjustedUnitCost: ").Append(AdjustedUnitCost).Append("\n");
            sb.Append("  AdjustedUnitPrice: ").Append(AdjustedUnitPrice).Append("\n");
            sb.Append("  AllowRepeatService: ").Append(AllowRepeatService).Append("\n");
            sb.Append("  ContractID: ").Append(ContractID).Append("\n");
            sb.Append("  ContractServiceID: ").Append(ContractServiceID).Append("\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  QuoteItemID: ").Append(QuoteItemID).Append("\n");
            sb.Append("  ServiceID: ").Append(ServiceID).Append("\n");
            sb.Append("  UnitChange: ").Append(UnitChange).Append("\n");
            sb.Append("  SoapParentPropertyId: ").Append(SoapParentPropertyId).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ContractServiceAdjustmentModel)obj);
        }

        /// <summary>
        /// Returns true if ContractServiceAdjustmentModel instances are equal
        /// </summary>
        /// <param name="other">Instance of ContractServiceAdjustmentModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContractServiceAdjustmentModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    AdjustedUnitCost == other.AdjustedUnitCost ||
                    AdjustedUnitCost != null &&
                    AdjustedUnitCost.Equals(other.AdjustedUnitCost)
                ) && 
                (
                    AdjustedUnitPrice == other.AdjustedUnitPrice ||
                    AdjustedUnitPrice != null &&
                    AdjustedUnitPrice.Equals(other.AdjustedUnitPrice)
                ) && 
                (
                    AllowRepeatService == other.AllowRepeatService ||
                    AllowRepeatService != null &&
                    AllowRepeatService.Equals(other.AllowRepeatService)
                ) && 
                (
                    ContractID == other.ContractID ||
                    ContractID != null &&
                    ContractID.Equals(other.ContractID)
                ) && 
                (
                    ContractServiceID == other.ContractServiceID ||
                    ContractServiceID != null &&
                    ContractServiceID.Equals(other.ContractServiceID)
                ) && 
                (
                    EffectiveDate == other.EffectiveDate ||
                    EffectiveDate != null &&
                    EffectiveDate.Equals(other.EffectiveDate)
                ) && 
                (
                    QuoteItemID == other.QuoteItemID ||
                    QuoteItemID != null &&
                    QuoteItemID.Equals(other.QuoteItemID)
                ) && 
                (
                    ServiceID == other.ServiceID ||
                    ServiceID != null &&
                    ServiceID.Equals(other.ServiceID)
                ) && 
                (
                    UnitChange == other.UnitChange ||
                    UnitChange != null &&
                    UnitChange.Equals(other.UnitChange)
                ) && 
                (
                    SoapParentPropertyId == other.SoapParentPropertyId ||
                    SoapParentPropertyId != null &&
                    SoapParentPropertyId.Equals(other.SoapParentPropertyId)
                ) && 
                (
                    UserDefinedFields == other.UserDefinedFields ||
                    UserDefinedFields != null &&
                    UserDefinedFields.SequenceEqual(other.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (AdjustedUnitCost != null)
                    hashCode = hashCode * 59 + AdjustedUnitCost.GetHashCode();
                    if (AdjustedUnitPrice != null)
                    hashCode = hashCode * 59 + AdjustedUnitPrice.GetHashCode();
                    if (AllowRepeatService != null)
                    hashCode = hashCode * 59 + AllowRepeatService.GetHashCode();
                    if (ContractID != null)
                    hashCode = hashCode * 59 + ContractID.GetHashCode();
                    if (ContractServiceID != null)
                    hashCode = hashCode * 59 + ContractServiceID.GetHashCode();
                    if (EffectiveDate != null)
                    hashCode = hashCode * 59 + EffectiveDate.GetHashCode();
                    if (QuoteItemID != null)
                    hashCode = hashCode * 59 + QuoteItemID.GetHashCode();
                    if (ServiceID != null)
                    hashCode = hashCode * 59 + ServiceID.GetHashCode();
                    if (UnitChange != null)
                    hashCode = hashCode * 59 + UnitChange.GetHashCode();
                    if (SoapParentPropertyId != null)
                    hashCode = hashCode * 59 + SoapParentPropertyId.GetHashCode();
                    if (UserDefinedFields != null)
                    hashCode = hashCode * 59 + UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ContractServiceAdjustmentModel left, ContractServiceAdjustmentModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ContractServiceAdjustmentModel left, ContractServiceAdjustmentModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
