/*
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SurveyResultsModel : IEquatable<SurveyResultsModel>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets CompanyID
        /// </summary>
        [DataMember(Name="companyID")]
        public int? CompanyID { get; set; }

        /// <summary>
        /// Gets or Sets CompanyRating
        /// </summary>
        [DataMember(Name="companyRating")]
        public double? CompanyRating { get; set; }

        /// <summary>
        /// Gets or Sets CompleteDate
        /// </summary>
        [DataMember(Name="completeDate")]
        public DateTime? CompleteDate { get; set; }

        /// <summary>
        /// Gets or Sets ContactID
        /// </summary>
        [DataMember(Name="contactID")]
        public int? ContactID { get; set; }

        /// <summary>
        /// Gets or Sets ContactRating
        /// </summary>
        [DataMember(Name="contactRating")]
        public double? ContactRating { get; set; }

        /// <summary>
        /// Gets or Sets ResourceRating
        /// </summary>
        [DataMember(Name="resourceRating")]
        public double? ResourceRating { get; set; }

        /// <summary>
        /// Gets or Sets SendDate
        /// </summary>
        [DataMember(Name="sendDate")]
        public DateTime? SendDate { get; set; }

        /// <summary>
        /// Gets or Sets SurveyID
        /// </summary>
        [DataMember(Name="surveyID")]
        public int? SurveyID { get; set; }

        /// <summary>
        /// Gets or Sets SurveyRating
        /// </summary>
        [DataMember(Name="surveyRating")]
        public double? SurveyRating { get; set; }

        /// <summary>
        /// Gets or Sets TicketID
        /// </summary>
        [DataMember(Name="ticketID")]
        public int? TicketID { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields")]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SurveyResultsModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CompanyID: ").Append(CompanyID).Append("\n");
            sb.Append("  CompanyRating: ").Append(CompanyRating).Append("\n");
            sb.Append("  CompleteDate: ").Append(CompleteDate).Append("\n");
            sb.Append("  ContactID: ").Append(ContactID).Append("\n");
            sb.Append("  ContactRating: ").Append(ContactRating).Append("\n");
            sb.Append("  ResourceRating: ").Append(ResourceRating).Append("\n");
            sb.Append("  SendDate: ").Append(SendDate).Append("\n");
            sb.Append("  SurveyID: ").Append(SurveyID).Append("\n");
            sb.Append("  SurveyRating: ").Append(SurveyRating).Append("\n");
            sb.Append("  TicketID: ").Append(TicketID).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SurveyResultsModel)obj);
        }

        /// <summary>
        /// Returns true if SurveyResultsModel instances are equal
        /// </summary>
        /// <param name="other">Instance of SurveyResultsModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SurveyResultsModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    CompanyID == other.CompanyID ||
                    CompanyID != null &&
                    CompanyID.Equals(other.CompanyID)
                ) && 
                (
                    CompanyRating == other.CompanyRating ||
                    CompanyRating != null &&
                    CompanyRating.Equals(other.CompanyRating)
                ) && 
                (
                    CompleteDate == other.CompleteDate ||
                    CompleteDate != null &&
                    CompleteDate.Equals(other.CompleteDate)
                ) && 
                (
                    ContactID == other.ContactID ||
                    ContactID != null &&
                    ContactID.Equals(other.ContactID)
                ) && 
                (
                    ContactRating == other.ContactRating ||
                    ContactRating != null &&
                    ContactRating.Equals(other.ContactRating)
                ) && 
                (
                    ResourceRating == other.ResourceRating ||
                    ResourceRating != null &&
                    ResourceRating.Equals(other.ResourceRating)
                ) && 
                (
                    SendDate == other.SendDate ||
                    SendDate != null &&
                    SendDate.Equals(other.SendDate)
                ) && 
                (
                    SurveyID == other.SurveyID ||
                    SurveyID != null &&
                    SurveyID.Equals(other.SurveyID)
                ) && 
                (
                    SurveyRating == other.SurveyRating ||
                    SurveyRating != null &&
                    SurveyRating.Equals(other.SurveyRating)
                ) && 
                (
                    TicketID == other.TicketID ||
                    TicketID != null &&
                    TicketID.Equals(other.TicketID)
                ) && 
                (
                    UserDefinedFields == other.UserDefinedFields ||
                    UserDefinedFields != null &&
                    UserDefinedFields.SequenceEqual(other.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (CompanyID != null)
                    hashCode = hashCode * 59 + CompanyID.GetHashCode();
                    if (CompanyRating != null)
                    hashCode = hashCode * 59 + CompanyRating.GetHashCode();
                    if (CompleteDate != null)
                    hashCode = hashCode * 59 + CompleteDate.GetHashCode();
                    if (ContactID != null)
                    hashCode = hashCode * 59 + ContactID.GetHashCode();
                    if (ContactRating != null)
                    hashCode = hashCode * 59 + ContactRating.GetHashCode();
                    if (ResourceRating != null)
                    hashCode = hashCode * 59 + ResourceRating.GetHashCode();
                    if (SendDate != null)
                    hashCode = hashCode * 59 + SendDate.GetHashCode();
                    if (SurveyID != null)
                    hashCode = hashCode * 59 + SurveyID.GetHashCode();
                    if (SurveyRating != null)
                    hashCode = hashCode * 59 + SurveyRating.GetHashCode();
                    if (TicketID != null)
                    hashCode = hashCode * 59 + TicketID.GetHashCode();
                    if (UserDefinedFields != null)
                    hashCode = hashCode * 59 + UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SurveyResultsModel left, SurveyResultsModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SurveyResultsModel left, SurveyResultsModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
