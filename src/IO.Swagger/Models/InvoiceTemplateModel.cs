/*
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InvoiceTemplateModel : IEquatable<InvoiceTemplateModel>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets CoveredByBlockRetainerContractLabel
        /// </summary>
        [DataMember(Name="coveredByBlockRetainerContractLabel")]
        public string CoveredByBlockRetainerContractLabel { get; set; }

        /// <summary>
        /// Gets or Sets CoveredByRecurringServiceFixedPricePerTicketContractLabel
        /// </summary>
        [DataMember(Name="coveredByRecurringServiceFixedPricePerTicketContractLabel")]
        public string CoveredByRecurringServiceFixedPricePerTicketContractLabel { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyNegativeFormat
        /// </summary>
        [DataMember(Name="currencyNegativeFormat")]
        public string CurrencyNegativeFormat { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyPositiveFormat
        /// </summary>
        [DataMember(Name="currencyPositiveFormat")]
        public string CurrencyPositiveFormat { get; set; }

        /// <summary>
        /// Gets or Sets DateFormat
        /// </summary>
        [DataMember(Name="dateFormat")]
        public int? DateFormat { get; set; }

        /// <summary>
        /// Gets or Sets DisplayFixedPriceContractLabor
        /// </summary>
        [DataMember(Name="displayFixedPriceContractLabor")]
        public bool? DisplayFixedPriceContractLabor { get; set; }

        /// <summary>
        /// Gets or Sets DisplayRecurringServiceContractLabor
        /// </summary>
        [DataMember(Name="displayRecurringServiceContractLabor")]
        public bool? DisplayRecurringServiceContractLabor { get; set; }

        /// <summary>
        /// Gets or Sets DisplaySeparateLineItemForEachTax
        /// </summary>
        [DataMember(Name="displaySeparateLineItemForEachTax")]
        public bool? DisplaySeparateLineItemForEachTax { get; set; }

        /// <summary>
        /// Gets or Sets DisplayTaxCategory
        /// </summary>
        [DataMember(Name="displayTaxCategory")]
        public bool? DisplayTaxCategory { get; set; }

        /// <summary>
        /// Gets or Sets DisplayTaxCategorySuperscripts
        /// </summary>
        [DataMember(Name="displayTaxCategorySuperscripts")]
        public bool? DisplayTaxCategorySuperscripts { get; set; }

        /// <summary>
        /// Gets or Sets DisplayZeroAmountRecurringServicesAndBundles
        /// </summary>
        [DataMember(Name="displayZeroAmountRecurringServicesAndBundles")]
        public bool? DisplayZeroAmountRecurringServicesAndBundles { get; set; }

        /// <summary>
        /// Gets or Sets GroupBy
        /// </summary>
        [DataMember(Name="groupBy")]
        public int? GroupBy { get; set; }

        /// <summary>
        /// Gets or Sets ItemizeItemsInEachGroup
        /// </summary>
        [DataMember(Name="itemizeItemsInEachGroup")]
        public int? ItemizeItemsInEachGroup { get; set; }

        /// <summary>
        /// Gets or Sets ItemizeServicesAndBundles
        /// </summary>
        [DataMember(Name="itemizeServicesAndBundles")]
        public bool? ItemizeServicesAndBundles { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets NonBillableLaborLabel
        /// </summary>
        [DataMember(Name="nonBillableLaborLabel")]
        public string NonBillableLaborLabel { get; set; }

        /// <summary>
        /// Gets or Sets NumberFormat
        /// </summary>
        [DataMember(Name="numberFormat")]
        public int? NumberFormat { get; set; }

        /// <summary>
        /// Gets or Sets PageLayout
        /// </summary>
        [DataMember(Name="pageLayout")]
        public int? PageLayout { get; set; }

        /// <summary>
        /// Gets or Sets PageNumberFormat
        /// </summary>
        [DataMember(Name="pageNumberFormat")]
        public int? PageNumberFormat { get; set; }

        /// <summary>
        /// Gets or Sets PaymentTerms
        /// </summary>
        [DataMember(Name="paymentTerms")]
        public int? PaymentTerms { get; set; }

        /// <summary>
        /// Gets or Sets RateCostExpression
        /// </summary>
        [DataMember(Name="rateCostExpression")]
        public string RateCostExpression { get; set; }

        /// <summary>
        /// Gets or Sets ShowGridHeader
        /// </summary>
        [DataMember(Name="showGridHeader")]
        public bool? ShowGridHeader { get; set; }

        /// <summary>
        /// Gets or Sets ShowVerticalGridLines
        /// </summary>
        [DataMember(Name="showVerticalGridLines")]
        public bool? ShowVerticalGridLines { get; set; }

        /// <summary>
        /// Gets or Sets SortBy
        /// </summary>
        [DataMember(Name="sortBy")]
        public int? SortBy { get; set; }

        /// <summary>
        /// Gets or Sets TimeFormat
        /// </summary>
        [DataMember(Name="timeFormat")]
        public int? TimeFormat { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields")]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InvoiceTemplateModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CoveredByBlockRetainerContractLabel: ").Append(CoveredByBlockRetainerContractLabel).Append("\n");
            sb.Append("  CoveredByRecurringServiceFixedPricePerTicketContractLabel: ").Append(CoveredByRecurringServiceFixedPricePerTicketContractLabel).Append("\n");
            sb.Append("  CurrencyNegativeFormat: ").Append(CurrencyNegativeFormat).Append("\n");
            sb.Append("  CurrencyPositiveFormat: ").Append(CurrencyPositiveFormat).Append("\n");
            sb.Append("  DateFormat: ").Append(DateFormat).Append("\n");
            sb.Append("  DisplayFixedPriceContractLabor: ").Append(DisplayFixedPriceContractLabor).Append("\n");
            sb.Append("  DisplayRecurringServiceContractLabor: ").Append(DisplayRecurringServiceContractLabor).Append("\n");
            sb.Append("  DisplaySeparateLineItemForEachTax: ").Append(DisplaySeparateLineItemForEachTax).Append("\n");
            sb.Append("  DisplayTaxCategory: ").Append(DisplayTaxCategory).Append("\n");
            sb.Append("  DisplayTaxCategorySuperscripts: ").Append(DisplayTaxCategorySuperscripts).Append("\n");
            sb.Append("  DisplayZeroAmountRecurringServicesAndBundles: ").Append(DisplayZeroAmountRecurringServicesAndBundles).Append("\n");
            sb.Append("  GroupBy: ").Append(GroupBy).Append("\n");
            sb.Append("  ItemizeItemsInEachGroup: ").Append(ItemizeItemsInEachGroup).Append("\n");
            sb.Append("  ItemizeServicesAndBundles: ").Append(ItemizeServicesAndBundles).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NonBillableLaborLabel: ").Append(NonBillableLaborLabel).Append("\n");
            sb.Append("  NumberFormat: ").Append(NumberFormat).Append("\n");
            sb.Append("  PageLayout: ").Append(PageLayout).Append("\n");
            sb.Append("  PageNumberFormat: ").Append(PageNumberFormat).Append("\n");
            sb.Append("  PaymentTerms: ").Append(PaymentTerms).Append("\n");
            sb.Append("  RateCostExpression: ").Append(RateCostExpression).Append("\n");
            sb.Append("  ShowGridHeader: ").Append(ShowGridHeader).Append("\n");
            sb.Append("  ShowVerticalGridLines: ").Append(ShowVerticalGridLines).Append("\n");
            sb.Append("  SortBy: ").Append(SortBy).Append("\n");
            sb.Append("  TimeFormat: ").Append(TimeFormat).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InvoiceTemplateModel)obj);
        }

        /// <summary>
        /// Returns true if InvoiceTemplateModel instances are equal
        /// </summary>
        /// <param name="other">Instance of InvoiceTemplateModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvoiceTemplateModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    CoveredByBlockRetainerContractLabel == other.CoveredByBlockRetainerContractLabel ||
                    CoveredByBlockRetainerContractLabel != null &&
                    CoveredByBlockRetainerContractLabel.Equals(other.CoveredByBlockRetainerContractLabel)
                ) && 
                (
                    CoveredByRecurringServiceFixedPricePerTicketContractLabel == other.CoveredByRecurringServiceFixedPricePerTicketContractLabel ||
                    CoveredByRecurringServiceFixedPricePerTicketContractLabel != null &&
                    CoveredByRecurringServiceFixedPricePerTicketContractLabel.Equals(other.CoveredByRecurringServiceFixedPricePerTicketContractLabel)
                ) && 
                (
                    CurrencyNegativeFormat == other.CurrencyNegativeFormat ||
                    CurrencyNegativeFormat != null &&
                    CurrencyNegativeFormat.Equals(other.CurrencyNegativeFormat)
                ) && 
                (
                    CurrencyPositiveFormat == other.CurrencyPositiveFormat ||
                    CurrencyPositiveFormat != null &&
                    CurrencyPositiveFormat.Equals(other.CurrencyPositiveFormat)
                ) && 
                (
                    DateFormat == other.DateFormat ||
                    DateFormat != null &&
                    DateFormat.Equals(other.DateFormat)
                ) && 
                (
                    DisplayFixedPriceContractLabor == other.DisplayFixedPriceContractLabor ||
                    DisplayFixedPriceContractLabor != null &&
                    DisplayFixedPriceContractLabor.Equals(other.DisplayFixedPriceContractLabor)
                ) && 
                (
                    DisplayRecurringServiceContractLabor == other.DisplayRecurringServiceContractLabor ||
                    DisplayRecurringServiceContractLabor != null &&
                    DisplayRecurringServiceContractLabor.Equals(other.DisplayRecurringServiceContractLabor)
                ) && 
                (
                    DisplaySeparateLineItemForEachTax == other.DisplaySeparateLineItemForEachTax ||
                    DisplaySeparateLineItemForEachTax != null &&
                    DisplaySeparateLineItemForEachTax.Equals(other.DisplaySeparateLineItemForEachTax)
                ) && 
                (
                    DisplayTaxCategory == other.DisplayTaxCategory ||
                    DisplayTaxCategory != null &&
                    DisplayTaxCategory.Equals(other.DisplayTaxCategory)
                ) && 
                (
                    DisplayTaxCategorySuperscripts == other.DisplayTaxCategorySuperscripts ||
                    DisplayTaxCategorySuperscripts != null &&
                    DisplayTaxCategorySuperscripts.Equals(other.DisplayTaxCategorySuperscripts)
                ) && 
                (
                    DisplayZeroAmountRecurringServicesAndBundles == other.DisplayZeroAmountRecurringServicesAndBundles ||
                    DisplayZeroAmountRecurringServicesAndBundles != null &&
                    DisplayZeroAmountRecurringServicesAndBundles.Equals(other.DisplayZeroAmountRecurringServicesAndBundles)
                ) && 
                (
                    GroupBy == other.GroupBy ||
                    GroupBy != null &&
                    GroupBy.Equals(other.GroupBy)
                ) && 
                (
                    ItemizeItemsInEachGroup == other.ItemizeItemsInEachGroup ||
                    ItemizeItemsInEachGroup != null &&
                    ItemizeItemsInEachGroup.Equals(other.ItemizeItemsInEachGroup)
                ) && 
                (
                    ItemizeServicesAndBundles == other.ItemizeServicesAndBundles ||
                    ItemizeServicesAndBundles != null &&
                    ItemizeServicesAndBundles.Equals(other.ItemizeServicesAndBundles)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    NonBillableLaborLabel == other.NonBillableLaborLabel ||
                    NonBillableLaborLabel != null &&
                    NonBillableLaborLabel.Equals(other.NonBillableLaborLabel)
                ) && 
                (
                    NumberFormat == other.NumberFormat ||
                    NumberFormat != null &&
                    NumberFormat.Equals(other.NumberFormat)
                ) && 
                (
                    PageLayout == other.PageLayout ||
                    PageLayout != null &&
                    PageLayout.Equals(other.PageLayout)
                ) && 
                (
                    PageNumberFormat == other.PageNumberFormat ||
                    PageNumberFormat != null &&
                    PageNumberFormat.Equals(other.PageNumberFormat)
                ) && 
                (
                    PaymentTerms == other.PaymentTerms ||
                    PaymentTerms != null &&
                    PaymentTerms.Equals(other.PaymentTerms)
                ) && 
                (
                    RateCostExpression == other.RateCostExpression ||
                    RateCostExpression != null &&
                    RateCostExpression.Equals(other.RateCostExpression)
                ) && 
                (
                    ShowGridHeader == other.ShowGridHeader ||
                    ShowGridHeader != null &&
                    ShowGridHeader.Equals(other.ShowGridHeader)
                ) && 
                (
                    ShowVerticalGridLines == other.ShowVerticalGridLines ||
                    ShowVerticalGridLines != null &&
                    ShowVerticalGridLines.Equals(other.ShowVerticalGridLines)
                ) && 
                (
                    SortBy == other.SortBy ||
                    SortBy != null &&
                    SortBy.Equals(other.SortBy)
                ) && 
                (
                    TimeFormat == other.TimeFormat ||
                    TimeFormat != null &&
                    TimeFormat.Equals(other.TimeFormat)
                ) && 
                (
                    UserDefinedFields == other.UserDefinedFields ||
                    UserDefinedFields != null &&
                    UserDefinedFields.SequenceEqual(other.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (CoveredByBlockRetainerContractLabel != null)
                    hashCode = hashCode * 59 + CoveredByBlockRetainerContractLabel.GetHashCode();
                    if (CoveredByRecurringServiceFixedPricePerTicketContractLabel != null)
                    hashCode = hashCode * 59 + CoveredByRecurringServiceFixedPricePerTicketContractLabel.GetHashCode();
                    if (CurrencyNegativeFormat != null)
                    hashCode = hashCode * 59 + CurrencyNegativeFormat.GetHashCode();
                    if (CurrencyPositiveFormat != null)
                    hashCode = hashCode * 59 + CurrencyPositiveFormat.GetHashCode();
                    if (DateFormat != null)
                    hashCode = hashCode * 59 + DateFormat.GetHashCode();
                    if (DisplayFixedPriceContractLabor != null)
                    hashCode = hashCode * 59 + DisplayFixedPriceContractLabor.GetHashCode();
                    if (DisplayRecurringServiceContractLabor != null)
                    hashCode = hashCode * 59 + DisplayRecurringServiceContractLabor.GetHashCode();
                    if (DisplaySeparateLineItemForEachTax != null)
                    hashCode = hashCode * 59 + DisplaySeparateLineItemForEachTax.GetHashCode();
                    if (DisplayTaxCategory != null)
                    hashCode = hashCode * 59 + DisplayTaxCategory.GetHashCode();
                    if (DisplayTaxCategorySuperscripts != null)
                    hashCode = hashCode * 59 + DisplayTaxCategorySuperscripts.GetHashCode();
                    if (DisplayZeroAmountRecurringServicesAndBundles != null)
                    hashCode = hashCode * 59 + DisplayZeroAmountRecurringServicesAndBundles.GetHashCode();
                    if (GroupBy != null)
                    hashCode = hashCode * 59 + GroupBy.GetHashCode();
                    if (ItemizeItemsInEachGroup != null)
                    hashCode = hashCode * 59 + ItemizeItemsInEachGroup.GetHashCode();
                    if (ItemizeServicesAndBundles != null)
                    hashCode = hashCode * 59 + ItemizeServicesAndBundles.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (NonBillableLaborLabel != null)
                    hashCode = hashCode * 59 + NonBillableLaborLabel.GetHashCode();
                    if (NumberFormat != null)
                    hashCode = hashCode * 59 + NumberFormat.GetHashCode();
                    if (PageLayout != null)
                    hashCode = hashCode * 59 + PageLayout.GetHashCode();
                    if (PageNumberFormat != null)
                    hashCode = hashCode * 59 + PageNumberFormat.GetHashCode();
                    if (PaymentTerms != null)
                    hashCode = hashCode * 59 + PaymentTerms.GetHashCode();
                    if (RateCostExpression != null)
                    hashCode = hashCode * 59 + RateCostExpression.GetHashCode();
                    if (ShowGridHeader != null)
                    hashCode = hashCode * 59 + ShowGridHeader.GetHashCode();
                    if (ShowVerticalGridLines != null)
                    hashCode = hashCode * 59 + ShowVerticalGridLines.GetHashCode();
                    if (SortBy != null)
                    hashCode = hashCode * 59 + SortBy.GetHashCode();
                    if (TimeFormat != null)
                    hashCode = hashCode * 59 + TimeFormat.GetHashCode();
                    if (UserDefinedFields != null)
                    hashCode = hashCode * 59 + UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InvoiceTemplateModel left, InvoiceTemplateModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InvoiceTemplateModel left, InvoiceTemplateModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
