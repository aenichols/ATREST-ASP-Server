/*
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ResourceModel : IEquatable<ResourceModel>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets AccountingReferenceID
        /// </summary>
        [DataMember(Name="accountingReferenceID")]
        public string AccountingReferenceID { get; set; }

        /// <summary>
        /// Gets or Sets DateFormat
        /// </summary>
        [DataMember(Name="dateFormat")]
        public string DateFormat { get; set; }

        /// <summary>
        /// Gets or Sets DefaultServiceDeskRoleID
        /// </summary>
        [DataMember(Name="defaultServiceDeskRoleID")]
        public long? DefaultServiceDeskRoleID { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Email2
        /// </summary>
        [DataMember(Name="email2")]
        public string Email2 { get; set; }

        /// <summary>
        /// Gets or Sets Email3
        /// </summary>
        [DataMember(Name="email3")]
        public string Email3 { get; set; }

        /// <summary>
        /// Gets or Sets EmailTypeCode
        /// </summary>
        [DataMember(Name="emailTypeCode")]
        public string EmailTypeCode { get; set; }

        /// <summary>
        /// Gets or Sets EmailTypeCode2
        /// </summary>
        [DataMember(Name="emailTypeCode2")]
        public string EmailTypeCode2 { get; set; }

        /// <summary>
        /// Gets or Sets EmailTypeCode3
        /// </summary>
        [DataMember(Name="emailTypeCode3")]
        public string EmailTypeCode3 { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets Gender
        /// </summary>
        [DataMember(Name="gender")]
        public string Gender { get; set; }

        /// <summary>
        /// Gets or Sets Greeting
        /// </summary>
        [DataMember(Name="greeting")]
        public int? Greeting { get; set; }

        /// <summary>
        /// Gets or Sets HireDate
        /// </summary>
        [DataMember(Name="hireDate")]
        public DateTime? HireDate { get; set; }

        /// <summary>
        /// Gets or Sets HomePhone
        /// </summary>
        [DataMember(Name="homePhone")]
        public string HomePhone { get; set; }

        /// <summary>
        /// Gets or Sets Initials
        /// </summary>
        [DataMember(Name="initials")]
        public string Initials { get; set; }

        /// <summary>
        /// Gets or Sets InternalCost
        /// </summary>
        [DataMember(Name="internalCost")]
        public double? InternalCost { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="isActive")]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name="lastName")]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets LicenseType
        /// </summary>
        [DataMember(Name="licenseType")]
        public int? LicenseType { get; set; }

        /// <summary>
        /// Gets or Sets LocationID
        /// </summary>
        [DataMember(Name="locationID")]
        public int? LocationID { get; set; }

        /// <summary>
        /// Gets or Sets MiddleName
        /// </summary>
        [DataMember(Name="middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// Gets or Sets MobilePhone
        /// </summary>
        [DataMember(Name="mobilePhone")]
        public string MobilePhone { get; set; }

        /// <summary>
        /// Gets or Sets NumberFormat
        /// </summary>
        [DataMember(Name="numberFormat")]
        public string NumberFormat { get; set; }

        /// <summary>
        /// Gets or Sets OfficeExtension
        /// </summary>
        [DataMember(Name="officeExtension")]
        public string OfficeExtension { get; set; }

        /// <summary>
        /// Gets or Sets OfficePhone
        /// </summary>
        [DataMember(Name="officePhone")]
        public string OfficePhone { get; set; }

        /// <summary>
        /// Gets or Sets PayrollType
        /// </summary>
        [DataMember(Name="payrollType")]
        public int? PayrollType { get; set; }

        /// <summary>
        /// Gets or Sets ResourceType
        /// </summary>
        [DataMember(Name="resourceType")]
        public string ResourceType { get; set; }

        /// <summary>
        /// Gets or Sets Suffix
        /// </summary>
        [DataMember(Name="suffix")]
        public int? Suffix { get; set; }

        /// <summary>
        /// Gets or Sets SurveyResourceRating
        /// </summary>
        [DataMember(Name="surveyResourceRating")]
        public double? SurveyResourceRating { get; set; }

        /// <summary>
        /// Gets or Sets TimeFormat
        /// </summary>
        [DataMember(Name="timeFormat")]
        public string TimeFormat { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title")]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets TravelAvailabilityPct
        /// </summary>
        [DataMember(Name="travelAvailabilityPct")]
        public string TravelAvailabilityPct { get; set; }

        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name="userName")]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or Sets UserType
        /// </summary>
        [DataMember(Name="userType")]
        public int? UserType { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields")]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResourceModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AccountingReferenceID: ").Append(AccountingReferenceID).Append("\n");
            sb.Append("  DateFormat: ").Append(DateFormat).Append("\n");
            sb.Append("  DefaultServiceDeskRoleID: ").Append(DefaultServiceDeskRoleID).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Email2: ").Append(Email2).Append("\n");
            sb.Append("  Email3: ").Append(Email3).Append("\n");
            sb.Append("  EmailTypeCode: ").Append(EmailTypeCode).Append("\n");
            sb.Append("  EmailTypeCode2: ").Append(EmailTypeCode2).Append("\n");
            sb.Append("  EmailTypeCode3: ").Append(EmailTypeCode3).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  Greeting: ").Append(Greeting).Append("\n");
            sb.Append("  HireDate: ").Append(HireDate).Append("\n");
            sb.Append("  HomePhone: ").Append(HomePhone).Append("\n");
            sb.Append("  Initials: ").Append(Initials).Append("\n");
            sb.Append("  InternalCost: ").Append(InternalCost).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  LicenseType: ").Append(LicenseType).Append("\n");
            sb.Append("  LocationID: ").Append(LocationID).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  MobilePhone: ").Append(MobilePhone).Append("\n");
            sb.Append("  NumberFormat: ").Append(NumberFormat).Append("\n");
            sb.Append("  OfficeExtension: ").Append(OfficeExtension).Append("\n");
            sb.Append("  OfficePhone: ").Append(OfficePhone).Append("\n");
            sb.Append("  PayrollType: ").Append(PayrollType).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  Suffix: ").Append(Suffix).Append("\n");
            sb.Append("  SurveyResourceRating: ").Append(SurveyResourceRating).Append("\n");
            sb.Append("  TimeFormat: ").Append(TimeFormat).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  TravelAvailabilityPct: ").Append(TravelAvailabilityPct).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  UserType: ").Append(UserType).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ResourceModel)obj);
        }

        /// <summary>
        /// Returns true if ResourceModel instances are equal
        /// </summary>
        /// <param name="other">Instance of ResourceModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResourceModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    AccountingReferenceID == other.AccountingReferenceID ||
                    AccountingReferenceID != null &&
                    AccountingReferenceID.Equals(other.AccountingReferenceID)
                ) && 
                (
                    DateFormat == other.DateFormat ||
                    DateFormat != null &&
                    DateFormat.Equals(other.DateFormat)
                ) && 
                (
                    DefaultServiceDeskRoleID == other.DefaultServiceDeskRoleID ||
                    DefaultServiceDeskRoleID != null &&
                    DefaultServiceDeskRoleID.Equals(other.DefaultServiceDeskRoleID)
                ) && 
                (
                    Email == other.Email ||
                    Email != null &&
                    Email.Equals(other.Email)
                ) && 
                (
                    Email2 == other.Email2 ||
                    Email2 != null &&
                    Email2.Equals(other.Email2)
                ) && 
                (
                    Email3 == other.Email3 ||
                    Email3 != null &&
                    Email3.Equals(other.Email3)
                ) && 
                (
                    EmailTypeCode == other.EmailTypeCode ||
                    EmailTypeCode != null &&
                    EmailTypeCode.Equals(other.EmailTypeCode)
                ) && 
                (
                    EmailTypeCode2 == other.EmailTypeCode2 ||
                    EmailTypeCode2 != null &&
                    EmailTypeCode2.Equals(other.EmailTypeCode2)
                ) && 
                (
                    EmailTypeCode3 == other.EmailTypeCode3 ||
                    EmailTypeCode3 != null &&
                    EmailTypeCode3.Equals(other.EmailTypeCode3)
                ) && 
                (
                    FirstName == other.FirstName ||
                    FirstName != null &&
                    FirstName.Equals(other.FirstName)
                ) && 
                (
                    Gender == other.Gender ||
                    Gender != null &&
                    Gender.Equals(other.Gender)
                ) && 
                (
                    Greeting == other.Greeting ||
                    Greeting != null &&
                    Greeting.Equals(other.Greeting)
                ) && 
                (
                    HireDate == other.HireDate ||
                    HireDate != null &&
                    HireDate.Equals(other.HireDate)
                ) && 
                (
                    HomePhone == other.HomePhone ||
                    HomePhone != null &&
                    HomePhone.Equals(other.HomePhone)
                ) && 
                (
                    Initials == other.Initials ||
                    Initials != null &&
                    Initials.Equals(other.Initials)
                ) && 
                (
                    InternalCost == other.InternalCost ||
                    InternalCost != null &&
                    InternalCost.Equals(other.InternalCost)
                ) && 
                (
                    IsActive == other.IsActive ||
                    IsActive != null &&
                    IsActive.Equals(other.IsActive)
                ) && 
                (
                    LastName == other.LastName ||
                    LastName != null &&
                    LastName.Equals(other.LastName)
                ) && 
                (
                    LicenseType == other.LicenseType ||
                    LicenseType != null &&
                    LicenseType.Equals(other.LicenseType)
                ) && 
                (
                    LocationID == other.LocationID ||
                    LocationID != null &&
                    LocationID.Equals(other.LocationID)
                ) && 
                (
                    MiddleName == other.MiddleName ||
                    MiddleName != null &&
                    MiddleName.Equals(other.MiddleName)
                ) && 
                (
                    MobilePhone == other.MobilePhone ||
                    MobilePhone != null &&
                    MobilePhone.Equals(other.MobilePhone)
                ) && 
                (
                    NumberFormat == other.NumberFormat ||
                    NumberFormat != null &&
                    NumberFormat.Equals(other.NumberFormat)
                ) && 
                (
                    OfficeExtension == other.OfficeExtension ||
                    OfficeExtension != null &&
                    OfficeExtension.Equals(other.OfficeExtension)
                ) && 
                (
                    OfficePhone == other.OfficePhone ||
                    OfficePhone != null &&
                    OfficePhone.Equals(other.OfficePhone)
                ) && 
                (
                    PayrollType == other.PayrollType ||
                    PayrollType != null &&
                    PayrollType.Equals(other.PayrollType)
                ) && 
                (
                    ResourceType == other.ResourceType ||
                    ResourceType != null &&
                    ResourceType.Equals(other.ResourceType)
                ) && 
                (
                    Suffix == other.Suffix ||
                    Suffix != null &&
                    Suffix.Equals(other.Suffix)
                ) && 
                (
                    SurveyResourceRating == other.SurveyResourceRating ||
                    SurveyResourceRating != null &&
                    SurveyResourceRating.Equals(other.SurveyResourceRating)
                ) && 
                (
                    TimeFormat == other.TimeFormat ||
                    TimeFormat != null &&
                    TimeFormat.Equals(other.TimeFormat)
                ) && 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                ) && 
                (
                    TravelAvailabilityPct == other.TravelAvailabilityPct ||
                    TravelAvailabilityPct != null &&
                    TravelAvailabilityPct.Equals(other.TravelAvailabilityPct)
                ) && 
                (
                    UserName == other.UserName ||
                    UserName != null &&
                    UserName.Equals(other.UserName)
                ) && 
                (
                    UserType == other.UserType ||
                    UserType != null &&
                    UserType.Equals(other.UserType)
                ) && 
                (
                    UserDefinedFields == other.UserDefinedFields ||
                    UserDefinedFields != null &&
                    UserDefinedFields.SequenceEqual(other.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (AccountingReferenceID != null)
                    hashCode = hashCode * 59 + AccountingReferenceID.GetHashCode();
                    if (DateFormat != null)
                    hashCode = hashCode * 59 + DateFormat.GetHashCode();
                    if (DefaultServiceDeskRoleID != null)
                    hashCode = hashCode * 59 + DefaultServiceDeskRoleID.GetHashCode();
                    if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                    if (Email2 != null)
                    hashCode = hashCode * 59 + Email2.GetHashCode();
                    if (Email3 != null)
                    hashCode = hashCode * 59 + Email3.GetHashCode();
                    if (EmailTypeCode != null)
                    hashCode = hashCode * 59 + EmailTypeCode.GetHashCode();
                    if (EmailTypeCode2 != null)
                    hashCode = hashCode * 59 + EmailTypeCode2.GetHashCode();
                    if (EmailTypeCode3 != null)
                    hashCode = hashCode * 59 + EmailTypeCode3.GetHashCode();
                    if (FirstName != null)
                    hashCode = hashCode * 59 + FirstName.GetHashCode();
                    if (Gender != null)
                    hashCode = hashCode * 59 + Gender.GetHashCode();
                    if (Greeting != null)
                    hashCode = hashCode * 59 + Greeting.GetHashCode();
                    if (HireDate != null)
                    hashCode = hashCode * 59 + HireDate.GetHashCode();
                    if (HomePhone != null)
                    hashCode = hashCode * 59 + HomePhone.GetHashCode();
                    if (Initials != null)
                    hashCode = hashCode * 59 + Initials.GetHashCode();
                    if (InternalCost != null)
                    hashCode = hashCode * 59 + InternalCost.GetHashCode();
                    if (IsActive != null)
                    hashCode = hashCode * 59 + IsActive.GetHashCode();
                    if (LastName != null)
                    hashCode = hashCode * 59 + LastName.GetHashCode();
                    if (LicenseType != null)
                    hashCode = hashCode * 59 + LicenseType.GetHashCode();
                    if (LocationID != null)
                    hashCode = hashCode * 59 + LocationID.GetHashCode();
                    if (MiddleName != null)
                    hashCode = hashCode * 59 + MiddleName.GetHashCode();
                    if (MobilePhone != null)
                    hashCode = hashCode * 59 + MobilePhone.GetHashCode();
                    if (NumberFormat != null)
                    hashCode = hashCode * 59 + NumberFormat.GetHashCode();
                    if (OfficeExtension != null)
                    hashCode = hashCode * 59 + OfficeExtension.GetHashCode();
                    if (OfficePhone != null)
                    hashCode = hashCode * 59 + OfficePhone.GetHashCode();
                    if (PayrollType != null)
                    hashCode = hashCode * 59 + PayrollType.GetHashCode();
                    if (ResourceType != null)
                    hashCode = hashCode * 59 + ResourceType.GetHashCode();
                    if (Suffix != null)
                    hashCode = hashCode * 59 + Suffix.GetHashCode();
                    if (SurveyResourceRating != null)
                    hashCode = hashCode * 59 + SurveyResourceRating.GetHashCode();
                    if (TimeFormat != null)
                    hashCode = hashCode * 59 + TimeFormat.GetHashCode();
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    if (TravelAvailabilityPct != null)
                    hashCode = hashCode * 59 + TravelAvailabilityPct.GetHashCode();
                    if (UserName != null)
                    hashCode = hashCode * 59 + UserName.GetHashCode();
                    if (UserType != null)
                    hashCode = hashCode * 59 + UserType.GetHashCode();
                    if (UserDefinedFields != null)
                    hashCode = hashCode * 59 + UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ResourceModel left, ResourceModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ResourceModel left, ResourceModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
