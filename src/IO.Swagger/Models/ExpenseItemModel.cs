/*
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ExpenseItemModel : IEquatable<ExpenseItemModel>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets CompanyID
        /// </summary>
        [DataMember(Name="companyID")]
        public int? CompanyID { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Destination
        /// </summary>
        [DataMember(Name="destination")]
        public string Destination { get; set; }

        /// <summary>
        /// Gets or Sets EntertainmentLocation
        /// </summary>
        [DataMember(Name="entertainmentLocation")]
        public string EntertainmentLocation { get; set; }

        /// <summary>
        /// Gets or Sets ExpenseCategory
        /// </summary>
        [DataMember(Name="expenseCategory")]
        public int? ExpenseCategory { get; set; }

        /// <summary>
        /// Gets or Sets ExpenseCurrencyExpenseAmount
        /// </summary>
        [DataMember(Name="expenseCurrencyExpenseAmount")]
        public double? ExpenseCurrencyExpenseAmount { get; set; }

        /// <summary>
        /// Gets or Sets ExpenseCurrencyID
        /// </summary>
        [DataMember(Name="expenseCurrencyID")]
        public int? ExpenseCurrencyID { get; set; }

        /// <summary>
        /// Gets or Sets ExpenseDate
        /// </summary>
        [DataMember(Name="expenseDate")]
        public DateTime? ExpenseDate { get; set; }

        /// <summary>
        /// Gets or Sets ExpenseReportID
        /// </summary>
        [DataMember(Name="expenseReportID")]
        public int? ExpenseReportID { get; set; }

        /// <summary>
        /// Gets or Sets GlCode
        /// </summary>
        [DataMember(Name="glCode")]
        public string GlCode { get; set; }

        /// <summary>
        /// Gets or Sets HaveReceipt
        /// </summary>
        [DataMember(Name="haveReceipt")]
        public bool? HaveReceipt { get; set; }

        /// <summary>
        /// Gets or Sets InternalCurrencyExpenseAmount
        /// </summary>
        [DataMember(Name="internalCurrencyExpenseAmount")]
        public double? InternalCurrencyExpenseAmount { get; set; }

        /// <summary>
        /// Gets or Sets InternalCurrencyReimbursementAmount
        /// </summary>
        [DataMember(Name="internalCurrencyReimbursementAmount")]
        public double? InternalCurrencyReimbursementAmount { get; set; }

        /// <summary>
        /// Gets or Sets IsBillableToCompany
        /// </summary>
        [DataMember(Name="isBillableToCompany")]
        public bool? IsBillableToCompany { get; set; }

        /// <summary>
        /// Gets or Sets IsReimbursable
        /// </summary>
        [DataMember(Name="isReimbursable")]
        public bool? IsReimbursable { get; set; }

        /// <summary>
        /// Gets or Sets IsRejected
        /// </summary>
        [DataMember(Name="isRejected")]
        public bool? IsRejected { get; set; }

        /// <summary>
        /// Gets or Sets Miles
        /// </summary>
        [DataMember(Name="miles")]
        public double? Miles { get; set; }

        /// <summary>
        /// Gets or Sets OdometerEnd
        /// </summary>
        [DataMember(Name="odometerEnd")]
        public double? OdometerEnd { get; set; }

        /// <summary>
        /// Gets or Sets OdometerStart
        /// </summary>
        [DataMember(Name="odometerStart")]
        public double? OdometerStart { get; set; }

        /// <summary>
        /// Gets or Sets Origin
        /// </summary>
        [DataMember(Name="origin")]
        public string Origin { get; set; }

        /// <summary>
        /// Gets or Sets PaymentType
        /// </summary>
        [DataMember(Name="paymentType")]
        public int? PaymentType { get; set; }

        /// <summary>
        /// Gets or Sets ProjectID
        /// </summary>
        [DataMember(Name="projectID")]
        public int? ProjectID { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseOrderNumber
        /// </summary>
        [DataMember(Name="purchaseOrderNumber")]
        public string PurchaseOrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets ReimbursementCurrencyReimbursementAmount
        /// </summary>
        [DataMember(Name="reimbursementCurrencyReimbursementAmount")]
        public double? ReimbursementCurrencyReimbursementAmount { get; set; }

        /// <summary>
        /// Gets or Sets TaskID
        /// </summary>
        [DataMember(Name="taskID")]
        public int? TaskID { get; set; }

        /// <summary>
        /// Gets or Sets TicketID
        /// </summary>
        [DataMember(Name="ticketID")]
        public int? TicketID { get; set; }

        /// <summary>
        /// Gets or Sets WorkType
        /// </summary>
        [DataMember(Name="workType")]
        public int? WorkType { get; set; }

        /// <summary>
        /// Gets or Sets SoapParentPropertyId
        /// </summary>
        [DataMember(Name="soapParentPropertyId")]
        public ExpressionFuncExpenseItemInt64 SoapParentPropertyId { get; private set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields")]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExpenseItemModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CompanyID: ").Append(CompanyID).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  EntertainmentLocation: ").Append(EntertainmentLocation).Append("\n");
            sb.Append("  ExpenseCategory: ").Append(ExpenseCategory).Append("\n");
            sb.Append("  ExpenseCurrencyExpenseAmount: ").Append(ExpenseCurrencyExpenseAmount).Append("\n");
            sb.Append("  ExpenseCurrencyID: ").Append(ExpenseCurrencyID).Append("\n");
            sb.Append("  ExpenseDate: ").Append(ExpenseDate).Append("\n");
            sb.Append("  ExpenseReportID: ").Append(ExpenseReportID).Append("\n");
            sb.Append("  GlCode: ").Append(GlCode).Append("\n");
            sb.Append("  HaveReceipt: ").Append(HaveReceipt).Append("\n");
            sb.Append("  InternalCurrencyExpenseAmount: ").Append(InternalCurrencyExpenseAmount).Append("\n");
            sb.Append("  InternalCurrencyReimbursementAmount: ").Append(InternalCurrencyReimbursementAmount).Append("\n");
            sb.Append("  IsBillableToCompany: ").Append(IsBillableToCompany).Append("\n");
            sb.Append("  IsReimbursable: ").Append(IsReimbursable).Append("\n");
            sb.Append("  IsRejected: ").Append(IsRejected).Append("\n");
            sb.Append("  Miles: ").Append(Miles).Append("\n");
            sb.Append("  OdometerEnd: ").Append(OdometerEnd).Append("\n");
            sb.Append("  OdometerStart: ").Append(OdometerStart).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  PaymentType: ").Append(PaymentType).Append("\n");
            sb.Append("  ProjectID: ").Append(ProjectID).Append("\n");
            sb.Append("  PurchaseOrderNumber: ").Append(PurchaseOrderNumber).Append("\n");
            sb.Append("  ReimbursementCurrencyReimbursementAmount: ").Append(ReimbursementCurrencyReimbursementAmount).Append("\n");
            sb.Append("  TaskID: ").Append(TaskID).Append("\n");
            sb.Append("  TicketID: ").Append(TicketID).Append("\n");
            sb.Append("  WorkType: ").Append(WorkType).Append("\n");
            sb.Append("  SoapParentPropertyId: ").Append(SoapParentPropertyId).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ExpenseItemModel)obj);
        }

        /// <summary>
        /// Returns true if ExpenseItemModel instances are equal
        /// </summary>
        /// <param name="other">Instance of ExpenseItemModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExpenseItemModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    CompanyID == other.CompanyID ||
                    CompanyID != null &&
                    CompanyID.Equals(other.CompanyID)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Destination == other.Destination ||
                    Destination != null &&
                    Destination.Equals(other.Destination)
                ) && 
                (
                    EntertainmentLocation == other.EntertainmentLocation ||
                    EntertainmentLocation != null &&
                    EntertainmentLocation.Equals(other.EntertainmentLocation)
                ) && 
                (
                    ExpenseCategory == other.ExpenseCategory ||
                    ExpenseCategory != null &&
                    ExpenseCategory.Equals(other.ExpenseCategory)
                ) && 
                (
                    ExpenseCurrencyExpenseAmount == other.ExpenseCurrencyExpenseAmount ||
                    ExpenseCurrencyExpenseAmount != null &&
                    ExpenseCurrencyExpenseAmount.Equals(other.ExpenseCurrencyExpenseAmount)
                ) && 
                (
                    ExpenseCurrencyID == other.ExpenseCurrencyID ||
                    ExpenseCurrencyID != null &&
                    ExpenseCurrencyID.Equals(other.ExpenseCurrencyID)
                ) && 
                (
                    ExpenseDate == other.ExpenseDate ||
                    ExpenseDate != null &&
                    ExpenseDate.Equals(other.ExpenseDate)
                ) && 
                (
                    ExpenseReportID == other.ExpenseReportID ||
                    ExpenseReportID != null &&
                    ExpenseReportID.Equals(other.ExpenseReportID)
                ) && 
                (
                    GlCode == other.GlCode ||
                    GlCode != null &&
                    GlCode.Equals(other.GlCode)
                ) && 
                (
                    HaveReceipt == other.HaveReceipt ||
                    HaveReceipt != null &&
                    HaveReceipt.Equals(other.HaveReceipt)
                ) && 
                (
                    InternalCurrencyExpenseAmount == other.InternalCurrencyExpenseAmount ||
                    InternalCurrencyExpenseAmount != null &&
                    InternalCurrencyExpenseAmount.Equals(other.InternalCurrencyExpenseAmount)
                ) && 
                (
                    InternalCurrencyReimbursementAmount == other.InternalCurrencyReimbursementAmount ||
                    InternalCurrencyReimbursementAmount != null &&
                    InternalCurrencyReimbursementAmount.Equals(other.InternalCurrencyReimbursementAmount)
                ) && 
                (
                    IsBillableToCompany == other.IsBillableToCompany ||
                    IsBillableToCompany != null &&
                    IsBillableToCompany.Equals(other.IsBillableToCompany)
                ) && 
                (
                    IsReimbursable == other.IsReimbursable ||
                    IsReimbursable != null &&
                    IsReimbursable.Equals(other.IsReimbursable)
                ) && 
                (
                    IsRejected == other.IsRejected ||
                    IsRejected != null &&
                    IsRejected.Equals(other.IsRejected)
                ) && 
                (
                    Miles == other.Miles ||
                    Miles != null &&
                    Miles.Equals(other.Miles)
                ) && 
                (
                    OdometerEnd == other.OdometerEnd ||
                    OdometerEnd != null &&
                    OdometerEnd.Equals(other.OdometerEnd)
                ) && 
                (
                    OdometerStart == other.OdometerStart ||
                    OdometerStart != null &&
                    OdometerStart.Equals(other.OdometerStart)
                ) && 
                (
                    Origin == other.Origin ||
                    Origin != null &&
                    Origin.Equals(other.Origin)
                ) && 
                (
                    PaymentType == other.PaymentType ||
                    PaymentType != null &&
                    PaymentType.Equals(other.PaymentType)
                ) && 
                (
                    ProjectID == other.ProjectID ||
                    ProjectID != null &&
                    ProjectID.Equals(other.ProjectID)
                ) && 
                (
                    PurchaseOrderNumber == other.PurchaseOrderNumber ||
                    PurchaseOrderNumber != null &&
                    PurchaseOrderNumber.Equals(other.PurchaseOrderNumber)
                ) && 
                (
                    ReimbursementCurrencyReimbursementAmount == other.ReimbursementCurrencyReimbursementAmount ||
                    ReimbursementCurrencyReimbursementAmount != null &&
                    ReimbursementCurrencyReimbursementAmount.Equals(other.ReimbursementCurrencyReimbursementAmount)
                ) && 
                (
                    TaskID == other.TaskID ||
                    TaskID != null &&
                    TaskID.Equals(other.TaskID)
                ) && 
                (
                    TicketID == other.TicketID ||
                    TicketID != null &&
                    TicketID.Equals(other.TicketID)
                ) && 
                (
                    WorkType == other.WorkType ||
                    WorkType != null &&
                    WorkType.Equals(other.WorkType)
                ) && 
                (
                    SoapParentPropertyId == other.SoapParentPropertyId ||
                    SoapParentPropertyId != null &&
                    SoapParentPropertyId.Equals(other.SoapParentPropertyId)
                ) && 
                (
                    UserDefinedFields == other.UserDefinedFields ||
                    UserDefinedFields != null &&
                    UserDefinedFields.SequenceEqual(other.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (CompanyID != null)
                    hashCode = hashCode * 59 + CompanyID.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Destination != null)
                    hashCode = hashCode * 59 + Destination.GetHashCode();
                    if (EntertainmentLocation != null)
                    hashCode = hashCode * 59 + EntertainmentLocation.GetHashCode();
                    if (ExpenseCategory != null)
                    hashCode = hashCode * 59 + ExpenseCategory.GetHashCode();
                    if (ExpenseCurrencyExpenseAmount != null)
                    hashCode = hashCode * 59 + ExpenseCurrencyExpenseAmount.GetHashCode();
                    if (ExpenseCurrencyID != null)
                    hashCode = hashCode * 59 + ExpenseCurrencyID.GetHashCode();
                    if (ExpenseDate != null)
                    hashCode = hashCode * 59 + ExpenseDate.GetHashCode();
                    if (ExpenseReportID != null)
                    hashCode = hashCode * 59 + ExpenseReportID.GetHashCode();
                    if (GlCode != null)
                    hashCode = hashCode * 59 + GlCode.GetHashCode();
                    if (HaveReceipt != null)
                    hashCode = hashCode * 59 + HaveReceipt.GetHashCode();
                    if (InternalCurrencyExpenseAmount != null)
                    hashCode = hashCode * 59 + InternalCurrencyExpenseAmount.GetHashCode();
                    if (InternalCurrencyReimbursementAmount != null)
                    hashCode = hashCode * 59 + InternalCurrencyReimbursementAmount.GetHashCode();
                    if (IsBillableToCompany != null)
                    hashCode = hashCode * 59 + IsBillableToCompany.GetHashCode();
                    if (IsReimbursable != null)
                    hashCode = hashCode * 59 + IsReimbursable.GetHashCode();
                    if (IsRejected != null)
                    hashCode = hashCode * 59 + IsRejected.GetHashCode();
                    if (Miles != null)
                    hashCode = hashCode * 59 + Miles.GetHashCode();
                    if (OdometerEnd != null)
                    hashCode = hashCode * 59 + OdometerEnd.GetHashCode();
                    if (OdometerStart != null)
                    hashCode = hashCode * 59 + OdometerStart.GetHashCode();
                    if (Origin != null)
                    hashCode = hashCode * 59 + Origin.GetHashCode();
                    if (PaymentType != null)
                    hashCode = hashCode * 59 + PaymentType.GetHashCode();
                    if (ProjectID != null)
                    hashCode = hashCode * 59 + ProjectID.GetHashCode();
                    if (PurchaseOrderNumber != null)
                    hashCode = hashCode * 59 + PurchaseOrderNumber.GetHashCode();
                    if (ReimbursementCurrencyReimbursementAmount != null)
                    hashCode = hashCode * 59 + ReimbursementCurrencyReimbursementAmount.GetHashCode();
                    if (TaskID != null)
                    hashCode = hashCode * 59 + TaskID.GetHashCode();
                    if (TicketID != null)
                    hashCode = hashCode * 59 + TicketID.GetHashCode();
                    if (WorkType != null)
                    hashCode = hashCode * 59 + WorkType.GetHashCode();
                    if (SoapParentPropertyId != null)
                    hashCode = hashCode * 59 + SoapParentPropertyId.GetHashCode();
                    if (UserDefinedFields != null)
                    hashCode = hashCode * 59 + UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ExpenseItemModel left, ExpenseItemModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ExpenseItemModel left, ExpenseItemModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
