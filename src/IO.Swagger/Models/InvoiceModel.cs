/*
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InvoiceModel : IEquatable<InvoiceModel>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets BatchID
        /// </summary>
        [DataMember(Name="batchID")]
        public int? BatchID { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name="comments")]
        public string Comments { get; set; }

        /// <summary>
        /// Gets or Sets CompanyID
        /// </summary>
        [DataMember(Name="companyID")]
        public int? CompanyID { get; set; }

        /// <summary>
        /// Gets or Sets CreateDateTime
        /// </summary>
        [DataMember(Name="createDateTime")]
        public DateTime? CreateDateTime { get; set; }

        /// <summary>
        /// Gets or Sets CreatorResourceID
        /// </summary>
        [DataMember(Name="creatorResourceID")]
        public int? CreatorResourceID { get; set; }

        /// <summary>
        /// Gets or Sets DueDate
        /// </summary>
        [DataMember(Name="dueDate")]
        public DateTime? DueDate { get; set; }

        /// <summary>
        /// Gets or Sets FromDate
        /// </summary>
        [DataMember(Name="fromDate")]
        public DateTime? FromDate { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceDateTime
        /// </summary>
        [DataMember(Name="invoiceDateTime")]
        public DateTime? InvoiceDateTime { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceEditorTemplateID
        /// </summary>
        [DataMember(Name="invoiceEditorTemplateID")]
        public int? InvoiceEditorTemplateID { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceNumber
        /// </summary>
        [DataMember(Name="invoiceNumber")]
        public string InvoiceNumber { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceTotal
        /// </summary>
        [DataMember(Name="invoiceTotal")]
        public double? InvoiceTotal { get; set; }

        /// <summary>
        /// Gets or Sets IsVoided
        /// </summary>
        [DataMember(Name="isVoided")]
        public bool? IsVoided { get; set; }

        /// <summary>
        /// Gets or Sets OrderNumber
        /// </summary>
        [DataMember(Name="orderNumber")]
        public string OrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets PaidDate
        /// </summary>
        [DataMember(Name="paidDate")]
        public DateTime? PaidDate { get; set; }

        /// <summary>
        /// Gets or Sets PaymentTerm
        /// </summary>
        [DataMember(Name="paymentTerm")]
        public int? PaymentTerm { get; set; }

        /// <summary>
        /// Gets or Sets TaxGroup
        /// </summary>
        [DataMember(Name="taxGroup")]
        public int? TaxGroup { get; set; }

        /// <summary>
        /// Gets or Sets TaxRegionName
        /// </summary>
        [DataMember(Name="taxRegionName")]
        public string TaxRegionName { get; set; }

        /// <summary>
        /// Gets or Sets ToDate
        /// </summary>
        [DataMember(Name="toDate")]
        public DateTime? ToDate { get; set; }

        /// <summary>
        /// Gets or Sets TotalTaxValue
        /// </summary>
        [DataMember(Name="totalTaxValue")]
        public double? TotalTaxValue { get; set; }

        /// <summary>
        /// Gets or Sets VoidedByResourceID
        /// </summary>
        [DataMember(Name="voidedByResourceID")]
        public int? VoidedByResourceID { get; set; }

        /// <summary>
        /// Gets or Sets VoidedDate
        /// </summary>
        [DataMember(Name="voidedDate")]
        public DateTime? VoidedDate { get; set; }

        /// <summary>
        /// Gets or Sets WebServiceDate
        /// </summary>
        [DataMember(Name="webServiceDate")]
        public DateTime? WebServiceDate { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields")]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InvoiceModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BatchID: ").Append(BatchID).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  CompanyID: ").Append(CompanyID).Append("\n");
            sb.Append("  CreateDateTime: ").Append(CreateDateTime).Append("\n");
            sb.Append("  CreatorResourceID: ").Append(CreatorResourceID).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  FromDate: ").Append(FromDate).Append("\n");
            sb.Append("  InvoiceDateTime: ").Append(InvoiceDateTime).Append("\n");
            sb.Append("  InvoiceEditorTemplateID: ").Append(InvoiceEditorTemplateID).Append("\n");
            sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            sb.Append("  InvoiceTotal: ").Append(InvoiceTotal).Append("\n");
            sb.Append("  IsVoided: ").Append(IsVoided).Append("\n");
            sb.Append("  OrderNumber: ").Append(OrderNumber).Append("\n");
            sb.Append("  PaidDate: ").Append(PaidDate).Append("\n");
            sb.Append("  PaymentTerm: ").Append(PaymentTerm).Append("\n");
            sb.Append("  TaxGroup: ").Append(TaxGroup).Append("\n");
            sb.Append("  TaxRegionName: ").Append(TaxRegionName).Append("\n");
            sb.Append("  ToDate: ").Append(ToDate).Append("\n");
            sb.Append("  TotalTaxValue: ").Append(TotalTaxValue).Append("\n");
            sb.Append("  VoidedByResourceID: ").Append(VoidedByResourceID).Append("\n");
            sb.Append("  VoidedDate: ").Append(VoidedDate).Append("\n");
            sb.Append("  WebServiceDate: ").Append(WebServiceDate).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InvoiceModel)obj);
        }

        /// <summary>
        /// Returns true if InvoiceModel instances are equal
        /// </summary>
        /// <param name="other">Instance of InvoiceModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvoiceModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    BatchID == other.BatchID ||
                    BatchID != null &&
                    BatchID.Equals(other.BatchID)
                ) && 
                (
                    Comments == other.Comments ||
                    Comments != null &&
                    Comments.Equals(other.Comments)
                ) && 
                (
                    CompanyID == other.CompanyID ||
                    CompanyID != null &&
                    CompanyID.Equals(other.CompanyID)
                ) && 
                (
                    CreateDateTime == other.CreateDateTime ||
                    CreateDateTime != null &&
                    CreateDateTime.Equals(other.CreateDateTime)
                ) && 
                (
                    CreatorResourceID == other.CreatorResourceID ||
                    CreatorResourceID != null &&
                    CreatorResourceID.Equals(other.CreatorResourceID)
                ) && 
                (
                    DueDate == other.DueDate ||
                    DueDate != null &&
                    DueDate.Equals(other.DueDate)
                ) && 
                (
                    FromDate == other.FromDate ||
                    FromDate != null &&
                    FromDate.Equals(other.FromDate)
                ) && 
                (
                    InvoiceDateTime == other.InvoiceDateTime ||
                    InvoiceDateTime != null &&
                    InvoiceDateTime.Equals(other.InvoiceDateTime)
                ) && 
                (
                    InvoiceEditorTemplateID == other.InvoiceEditorTemplateID ||
                    InvoiceEditorTemplateID != null &&
                    InvoiceEditorTemplateID.Equals(other.InvoiceEditorTemplateID)
                ) && 
                (
                    InvoiceNumber == other.InvoiceNumber ||
                    InvoiceNumber != null &&
                    InvoiceNumber.Equals(other.InvoiceNumber)
                ) && 
                (
                    InvoiceTotal == other.InvoiceTotal ||
                    InvoiceTotal != null &&
                    InvoiceTotal.Equals(other.InvoiceTotal)
                ) && 
                (
                    IsVoided == other.IsVoided ||
                    IsVoided != null &&
                    IsVoided.Equals(other.IsVoided)
                ) && 
                (
                    OrderNumber == other.OrderNumber ||
                    OrderNumber != null &&
                    OrderNumber.Equals(other.OrderNumber)
                ) && 
                (
                    PaidDate == other.PaidDate ||
                    PaidDate != null &&
                    PaidDate.Equals(other.PaidDate)
                ) && 
                (
                    PaymentTerm == other.PaymentTerm ||
                    PaymentTerm != null &&
                    PaymentTerm.Equals(other.PaymentTerm)
                ) && 
                (
                    TaxGroup == other.TaxGroup ||
                    TaxGroup != null &&
                    TaxGroup.Equals(other.TaxGroup)
                ) && 
                (
                    TaxRegionName == other.TaxRegionName ||
                    TaxRegionName != null &&
                    TaxRegionName.Equals(other.TaxRegionName)
                ) && 
                (
                    ToDate == other.ToDate ||
                    ToDate != null &&
                    ToDate.Equals(other.ToDate)
                ) && 
                (
                    TotalTaxValue == other.TotalTaxValue ||
                    TotalTaxValue != null &&
                    TotalTaxValue.Equals(other.TotalTaxValue)
                ) && 
                (
                    VoidedByResourceID == other.VoidedByResourceID ||
                    VoidedByResourceID != null &&
                    VoidedByResourceID.Equals(other.VoidedByResourceID)
                ) && 
                (
                    VoidedDate == other.VoidedDate ||
                    VoidedDate != null &&
                    VoidedDate.Equals(other.VoidedDate)
                ) && 
                (
                    WebServiceDate == other.WebServiceDate ||
                    WebServiceDate != null &&
                    WebServiceDate.Equals(other.WebServiceDate)
                ) && 
                (
                    UserDefinedFields == other.UserDefinedFields ||
                    UserDefinedFields != null &&
                    UserDefinedFields.SequenceEqual(other.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (BatchID != null)
                    hashCode = hashCode * 59 + BatchID.GetHashCode();
                    if (Comments != null)
                    hashCode = hashCode * 59 + Comments.GetHashCode();
                    if (CompanyID != null)
                    hashCode = hashCode * 59 + CompanyID.GetHashCode();
                    if (CreateDateTime != null)
                    hashCode = hashCode * 59 + CreateDateTime.GetHashCode();
                    if (CreatorResourceID != null)
                    hashCode = hashCode * 59 + CreatorResourceID.GetHashCode();
                    if (DueDate != null)
                    hashCode = hashCode * 59 + DueDate.GetHashCode();
                    if (FromDate != null)
                    hashCode = hashCode * 59 + FromDate.GetHashCode();
                    if (InvoiceDateTime != null)
                    hashCode = hashCode * 59 + InvoiceDateTime.GetHashCode();
                    if (InvoiceEditorTemplateID != null)
                    hashCode = hashCode * 59 + InvoiceEditorTemplateID.GetHashCode();
                    if (InvoiceNumber != null)
                    hashCode = hashCode * 59 + InvoiceNumber.GetHashCode();
                    if (InvoiceTotal != null)
                    hashCode = hashCode * 59 + InvoiceTotal.GetHashCode();
                    if (IsVoided != null)
                    hashCode = hashCode * 59 + IsVoided.GetHashCode();
                    if (OrderNumber != null)
                    hashCode = hashCode * 59 + OrderNumber.GetHashCode();
                    if (PaidDate != null)
                    hashCode = hashCode * 59 + PaidDate.GetHashCode();
                    if (PaymentTerm != null)
                    hashCode = hashCode * 59 + PaymentTerm.GetHashCode();
                    if (TaxGroup != null)
                    hashCode = hashCode * 59 + TaxGroup.GetHashCode();
                    if (TaxRegionName != null)
                    hashCode = hashCode * 59 + TaxRegionName.GetHashCode();
                    if (ToDate != null)
                    hashCode = hashCode * 59 + ToDate.GetHashCode();
                    if (TotalTaxValue != null)
                    hashCode = hashCode * 59 + TotalTaxValue.GetHashCode();
                    if (VoidedByResourceID != null)
                    hashCode = hashCode * 59 + VoidedByResourceID.GetHashCode();
                    if (VoidedDate != null)
                    hashCode = hashCode * 59 + VoidedDate.GetHashCode();
                    if (WebServiceDate != null)
                    hashCode = hashCode * 59 + WebServiceDate.GetHashCode();
                    if (UserDefinedFields != null)
                    hashCode = hashCode * 59 + UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InvoiceModel left, InvoiceModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InvoiceModel left, InvoiceModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
