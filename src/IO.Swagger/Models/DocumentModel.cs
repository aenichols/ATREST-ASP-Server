/*
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DocumentModel : IEquatable<DocumentModel>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets CompanyID
        /// </summary>
        [DataMember(Name="companyID")]
        public int? CompanyID { get; set; }

        /// <summary>
        /// Gets or Sets CreatedByResourceID
        /// </summary>
        [DataMember(Name="createdByResourceID")]
        public int? CreatedByResourceID { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDateTime
        /// </summary>
        [DataMember(Name="createdDateTime")]
        public DateTime? CreatedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets DocumentCategoryID
        /// </summary>
        [DataMember(Name="documentCategoryID")]
        public int? DocumentCategoryID { get; set; }

        /// <summary>
        /// Gets or Sets ErrorCodes
        /// </summary>
        [DataMember(Name="errorCodes")]
        public string ErrorCodes { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="isActive")]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets Keywords
        /// </summary>
        [DataMember(Name="keywords")]
        public string Keywords { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedByResourceID
        /// </summary>
        [DataMember(Name="lastModifiedByResourceID")]
        public int? LastModifiedByResourceID { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedDateTime
        /// </summary>
        [DataMember(Name="lastModifiedDateTime")]
        public DateTime? LastModifiedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets Publish
        /// </summary>
        [DataMember(Name="publish")]
        public int? Publish { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceLink
        /// </summary>
        [DataMember(Name="referenceLink")]
        public string ReferenceLink { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title")]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets SoapParentPropertyId
        /// </summary>
        [DataMember(Name="soapParentPropertyId")]
        public ExpressionFuncDocumentInt64 SoapParentPropertyId { get; private set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields")]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CompanyID: ").Append(CompanyID).Append("\n");
            sb.Append("  CreatedByResourceID: ").Append(CreatedByResourceID).Append("\n");
            sb.Append("  CreatedDateTime: ").Append(CreatedDateTime).Append("\n");
            sb.Append("  DocumentCategoryID: ").Append(DocumentCategoryID).Append("\n");
            sb.Append("  ErrorCodes: ").Append(ErrorCodes).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  Keywords: ").Append(Keywords).Append("\n");
            sb.Append("  LastModifiedByResourceID: ").Append(LastModifiedByResourceID).Append("\n");
            sb.Append("  LastModifiedDateTime: ").Append(LastModifiedDateTime).Append("\n");
            sb.Append("  Publish: ").Append(Publish).Append("\n");
            sb.Append("  ReferenceLink: ").Append(ReferenceLink).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  SoapParentPropertyId: ").Append(SoapParentPropertyId).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DocumentModel)obj);
        }

        /// <summary>
        /// Returns true if DocumentModel instances are equal
        /// </summary>
        /// <param name="other">Instance of DocumentModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    CompanyID == other.CompanyID ||
                    CompanyID != null &&
                    CompanyID.Equals(other.CompanyID)
                ) && 
                (
                    CreatedByResourceID == other.CreatedByResourceID ||
                    CreatedByResourceID != null &&
                    CreatedByResourceID.Equals(other.CreatedByResourceID)
                ) && 
                (
                    CreatedDateTime == other.CreatedDateTime ||
                    CreatedDateTime != null &&
                    CreatedDateTime.Equals(other.CreatedDateTime)
                ) && 
                (
                    DocumentCategoryID == other.DocumentCategoryID ||
                    DocumentCategoryID != null &&
                    DocumentCategoryID.Equals(other.DocumentCategoryID)
                ) && 
                (
                    ErrorCodes == other.ErrorCodes ||
                    ErrorCodes != null &&
                    ErrorCodes.Equals(other.ErrorCodes)
                ) && 
                (
                    IsActive == other.IsActive ||
                    IsActive != null &&
                    IsActive.Equals(other.IsActive)
                ) && 
                (
                    Keywords == other.Keywords ||
                    Keywords != null &&
                    Keywords.Equals(other.Keywords)
                ) && 
                (
                    LastModifiedByResourceID == other.LastModifiedByResourceID ||
                    LastModifiedByResourceID != null &&
                    LastModifiedByResourceID.Equals(other.LastModifiedByResourceID)
                ) && 
                (
                    LastModifiedDateTime == other.LastModifiedDateTime ||
                    LastModifiedDateTime != null &&
                    LastModifiedDateTime.Equals(other.LastModifiedDateTime)
                ) && 
                (
                    Publish == other.Publish ||
                    Publish != null &&
                    Publish.Equals(other.Publish)
                ) && 
                (
                    ReferenceLink == other.ReferenceLink ||
                    ReferenceLink != null &&
                    ReferenceLink.Equals(other.ReferenceLink)
                ) && 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                ) && 
                (
                    SoapParentPropertyId == other.SoapParentPropertyId ||
                    SoapParentPropertyId != null &&
                    SoapParentPropertyId.Equals(other.SoapParentPropertyId)
                ) && 
                (
                    UserDefinedFields == other.UserDefinedFields ||
                    UserDefinedFields != null &&
                    UserDefinedFields.SequenceEqual(other.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (CompanyID != null)
                    hashCode = hashCode * 59 + CompanyID.GetHashCode();
                    if (CreatedByResourceID != null)
                    hashCode = hashCode * 59 + CreatedByResourceID.GetHashCode();
                    if (CreatedDateTime != null)
                    hashCode = hashCode * 59 + CreatedDateTime.GetHashCode();
                    if (DocumentCategoryID != null)
                    hashCode = hashCode * 59 + DocumentCategoryID.GetHashCode();
                    if (ErrorCodes != null)
                    hashCode = hashCode * 59 + ErrorCodes.GetHashCode();
                    if (IsActive != null)
                    hashCode = hashCode * 59 + IsActive.GetHashCode();
                    if (Keywords != null)
                    hashCode = hashCode * 59 + Keywords.GetHashCode();
                    if (LastModifiedByResourceID != null)
                    hashCode = hashCode * 59 + LastModifiedByResourceID.GetHashCode();
                    if (LastModifiedDateTime != null)
                    hashCode = hashCode * 59 + LastModifiedDateTime.GetHashCode();
                    if (Publish != null)
                    hashCode = hashCode * 59 + Publish.GetHashCode();
                    if (ReferenceLink != null)
                    hashCode = hashCode * 59 + ReferenceLink.GetHashCode();
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    if (SoapParentPropertyId != null)
                    hashCode = hashCode * 59 + SoapParentPropertyId.GetHashCode();
                    if (UserDefinedFields != null)
                    hashCode = hashCode * 59 + UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DocumentModel left, DocumentModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DocumentModel left, DocumentModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
