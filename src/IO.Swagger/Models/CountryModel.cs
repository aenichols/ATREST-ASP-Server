/*
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CountryModel : IEquatable<CountryModel>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets AddressFormatID
        /// </summary>
        [DataMember(Name="addressFormatID")]
        public long? AddressFormatID { get; set; }

        /// <summary>
        /// Gets or Sets CountryCode
        /// </summary>
        [DataMember(Name="countryCode")]
        public string CountryCode { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceTemplateID
        /// </summary>
        [DataMember(Name="invoiceTemplateID")]
        public int? InvoiceTemplateID { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="isActive")]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets IsDefaultCountry
        /// </summary>
        [DataMember(Name="isDefaultCountry")]
        public bool? IsDefaultCountry { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseOrderTemplateID
        /// </summary>
        [DataMember(Name="purchaseOrderTemplateID")]
        public int? PurchaseOrderTemplateID { get; set; }

        /// <summary>
        /// Gets or Sets QuoteTemplateID
        /// </summary>
        [DataMember(Name="quoteTemplateID")]
        public int? QuoteTemplateID { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields")]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CountryModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AddressFormatID: ").Append(AddressFormatID).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  InvoiceTemplateID: ").Append(InvoiceTemplateID).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsDefaultCountry: ").Append(IsDefaultCountry).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PurchaseOrderTemplateID: ").Append(PurchaseOrderTemplateID).Append("\n");
            sb.Append("  QuoteTemplateID: ").Append(QuoteTemplateID).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CountryModel)obj);
        }

        /// <summary>
        /// Returns true if CountryModel instances are equal
        /// </summary>
        /// <param name="other">Instance of CountryModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CountryModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    AddressFormatID == other.AddressFormatID ||
                    AddressFormatID != null &&
                    AddressFormatID.Equals(other.AddressFormatID)
                ) && 
                (
                    CountryCode == other.CountryCode ||
                    CountryCode != null &&
                    CountryCode.Equals(other.CountryCode)
                ) && 
                (
                    DisplayName == other.DisplayName ||
                    DisplayName != null &&
                    DisplayName.Equals(other.DisplayName)
                ) && 
                (
                    InvoiceTemplateID == other.InvoiceTemplateID ||
                    InvoiceTemplateID != null &&
                    InvoiceTemplateID.Equals(other.InvoiceTemplateID)
                ) && 
                (
                    IsActive == other.IsActive ||
                    IsActive != null &&
                    IsActive.Equals(other.IsActive)
                ) && 
                (
                    IsDefaultCountry == other.IsDefaultCountry ||
                    IsDefaultCountry != null &&
                    IsDefaultCountry.Equals(other.IsDefaultCountry)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    PurchaseOrderTemplateID == other.PurchaseOrderTemplateID ||
                    PurchaseOrderTemplateID != null &&
                    PurchaseOrderTemplateID.Equals(other.PurchaseOrderTemplateID)
                ) && 
                (
                    QuoteTemplateID == other.QuoteTemplateID ||
                    QuoteTemplateID != null &&
                    QuoteTemplateID.Equals(other.QuoteTemplateID)
                ) && 
                (
                    UserDefinedFields == other.UserDefinedFields ||
                    UserDefinedFields != null &&
                    UserDefinedFields.SequenceEqual(other.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (AddressFormatID != null)
                    hashCode = hashCode * 59 + AddressFormatID.GetHashCode();
                    if (CountryCode != null)
                    hashCode = hashCode * 59 + CountryCode.GetHashCode();
                    if (DisplayName != null)
                    hashCode = hashCode * 59 + DisplayName.GetHashCode();
                    if (InvoiceTemplateID != null)
                    hashCode = hashCode * 59 + InvoiceTemplateID.GetHashCode();
                    if (IsActive != null)
                    hashCode = hashCode * 59 + IsActive.GetHashCode();
                    if (IsDefaultCountry != null)
                    hashCode = hashCode * 59 + IsDefaultCountry.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (PurchaseOrderTemplateID != null)
                    hashCode = hashCode * 59 + PurchaseOrderTemplateID.GetHashCode();
                    if (QuoteTemplateID != null)
                    hashCode = hashCode * 59 + QuoteTemplateID.GetHashCode();
                    if (UserDefinedFields != null)
                    hashCode = hashCode * 59 + UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CountryModel left, CountryModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CountryModel left, CountryModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
