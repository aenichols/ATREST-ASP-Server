/*
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class BillingCodeModel : IEquatable<BillingCodeModel>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets AfterHoursWorkType
        /// </summary>
        [DataMember(Name="afterHoursWorkType")]
        public int? AfterHoursWorkType { get; set; }

        /// <summary>
        /// Gets or Sets BillingCodeType
        /// </summary>
        [DataMember(Name="billingCodeType")]
        public int? BillingCodeType { get; set; }

        /// <summary>
        /// Gets or Sets Department
        /// </summary>
        [DataMember(Name="department")]
        public int? Department { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ExternalNumber
        /// </summary>
        [DataMember(Name="externalNumber")]
        public string ExternalNumber { get; set; }

        /// <summary>
        /// Gets or Sets GeneralLedgerAccount
        /// </summary>
        [DataMember(Name="generalLedgerAccount")]
        public int? GeneralLedgerAccount { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="isActive")]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets IsExcludedFromNewContracts
        /// </summary>
        [DataMember(Name="isExcludedFromNewContracts")]
        public bool? IsExcludedFromNewContracts { get; set; }

        /// <summary>
        /// Gets or Sets MarkupRate
        /// </summary>
        [DataMember(Name="markupRate")]
        public double? MarkupRate { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets TaxCategoryID
        /// </summary>
        [DataMember(Name="taxCategoryID")]
        public int? TaxCategoryID { get; set; }

        /// <summary>
        /// Gets or Sets UnitCost
        /// </summary>
        [DataMember(Name="unitCost")]
        public double? UnitCost { get; set; }

        /// <summary>
        /// Gets or Sets UnitPrice
        /// </summary>
        [DataMember(Name="unitPrice")]
        public double? UnitPrice { get; set; }

        /// <summary>
        /// Gets or Sets UseType
        /// </summary>
        [DataMember(Name="useType")]
        public int? UseType { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields")]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BillingCodeModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AfterHoursWorkType: ").Append(AfterHoursWorkType).Append("\n");
            sb.Append("  BillingCodeType: ").Append(BillingCodeType).Append("\n");
            sb.Append("  Department: ").Append(Department).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExternalNumber: ").Append(ExternalNumber).Append("\n");
            sb.Append("  GeneralLedgerAccount: ").Append(GeneralLedgerAccount).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsExcludedFromNewContracts: ").Append(IsExcludedFromNewContracts).Append("\n");
            sb.Append("  MarkupRate: ").Append(MarkupRate).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TaxCategoryID: ").Append(TaxCategoryID).Append("\n");
            sb.Append("  UnitCost: ").Append(UnitCost).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  UseType: ").Append(UseType).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BillingCodeModel)obj);
        }

        /// <summary>
        /// Returns true if BillingCodeModel instances are equal
        /// </summary>
        /// <param name="other">Instance of BillingCodeModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BillingCodeModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    AfterHoursWorkType == other.AfterHoursWorkType ||
                    AfterHoursWorkType != null &&
                    AfterHoursWorkType.Equals(other.AfterHoursWorkType)
                ) && 
                (
                    BillingCodeType == other.BillingCodeType ||
                    BillingCodeType != null &&
                    BillingCodeType.Equals(other.BillingCodeType)
                ) && 
                (
                    Department == other.Department ||
                    Department != null &&
                    Department.Equals(other.Department)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    ExternalNumber == other.ExternalNumber ||
                    ExternalNumber != null &&
                    ExternalNumber.Equals(other.ExternalNumber)
                ) && 
                (
                    GeneralLedgerAccount == other.GeneralLedgerAccount ||
                    GeneralLedgerAccount != null &&
                    GeneralLedgerAccount.Equals(other.GeneralLedgerAccount)
                ) && 
                (
                    IsActive == other.IsActive ||
                    IsActive != null &&
                    IsActive.Equals(other.IsActive)
                ) && 
                (
                    IsExcludedFromNewContracts == other.IsExcludedFromNewContracts ||
                    IsExcludedFromNewContracts != null &&
                    IsExcludedFromNewContracts.Equals(other.IsExcludedFromNewContracts)
                ) && 
                (
                    MarkupRate == other.MarkupRate ||
                    MarkupRate != null &&
                    MarkupRate.Equals(other.MarkupRate)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    TaxCategoryID == other.TaxCategoryID ||
                    TaxCategoryID != null &&
                    TaxCategoryID.Equals(other.TaxCategoryID)
                ) && 
                (
                    UnitCost == other.UnitCost ||
                    UnitCost != null &&
                    UnitCost.Equals(other.UnitCost)
                ) && 
                (
                    UnitPrice == other.UnitPrice ||
                    UnitPrice != null &&
                    UnitPrice.Equals(other.UnitPrice)
                ) && 
                (
                    UseType == other.UseType ||
                    UseType != null &&
                    UseType.Equals(other.UseType)
                ) && 
                (
                    UserDefinedFields == other.UserDefinedFields ||
                    UserDefinedFields != null &&
                    UserDefinedFields.SequenceEqual(other.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (AfterHoursWorkType != null)
                    hashCode = hashCode * 59 + AfterHoursWorkType.GetHashCode();
                    if (BillingCodeType != null)
                    hashCode = hashCode * 59 + BillingCodeType.GetHashCode();
                    if (Department != null)
                    hashCode = hashCode * 59 + Department.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (ExternalNumber != null)
                    hashCode = hashCode * 59 + ExternalNumber.GetHashCode();
                    if (GeneralLedgerAccount != null)
                    hashCode = hashCode * 59 + GeneralLedgerAccount.GetHashCode();
                    if (IsActive != null)
                    hashCode = hashCode * 59 + IsActive.GetHashCode();
                    if (IsExcludedFromNewContracts != null)
                    hashCode = hashCode * 59 + IsExcludedFromNewContracts.GetHashCode();
                    if (MarkupRate != null)
                    hashCode = hashCode * 59 + MarkupRate.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (TaxCategoryID != null)
                    hashCode = hashCode * 59 + TaxCategoryID.GetHashCode();
                    if (UnitCost != null)
                    hashCode = hashCode * 59 + UnitCost.GetHashCode();
                    if (UnitPrice != null)
                    hashCode = hashCode * 59 + UnitPrice.GetHashCode();
                    if (UseType != null)
                    hashCode = hashCode * 59 + UseType.GetHashCode();
                    if (UserDefinedFields != null)
                    hashCode = hashCode * 59 + UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BillingCodeModel left, BillingCodeModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BillingCodeModel left, BillingCodeModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
