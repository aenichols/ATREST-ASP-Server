/*
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AdditionalInvoiceFieldValueModel : IEquatable<AdditionalInvoiceFieldValueModel>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalInvoiceFieldID
        /// </summary>
        [DataMember(Name="additionalInvoiceFieldID")]
        public long? AdditionalInvoiceFieldID { get; set; }

        /// <summary>
        /// Gets or Sets FieldValue
        /// </summary>
        [DataMember(Name="fieldValue")]
        public string FieldValue { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceBatchID
        /// </summary>
        [DataMember(Name="invoiceBatchID")]
        public long? InvoiceBatchID { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields")]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdditionalInvoiceFieldValueModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AdditionalInvoiceFieldID: ").Append(AdditionalInvoiceFieldID).Append("\n");
            sb.Append("  FieldValue: ").Append(FieldValue).Append("\n");
            sb.Append("  InvoiceBatchID: ").Append(InvoiceBatchID).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AdditionalInvoiceFieldValueModel)obj);
        }

        /// <summary>
        /// Returns true if AdditionalInvoiceFieldValueModel instances are equal
        /// </summary>
        /// <param name="other">Instance of AdditionalInvoiceFieldValueModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdditionalInvoiceFieldValueModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    AdditionalInvoiceFieldID == other.AdditionalInvoiceFieldID ||
                    AdditionalInvoiceFieldID != null &&
                    AdditionalInvoiceFieldID.Equals(other.AdditionalInvoiceFieldID)
                ) && 
                (
                    FieldValue == other.FieldValue ||
                    FieldValue != null &&
                    FieldValue.Equals(other.FieldValue)
                ) && 
                (
                    InvoiceBatchID == other.InvoiceBatchID ||
                    InvoiceBatchID != null &&
                    InvoiceBatchID.Equals(other.InvoiceBatchID)
                ) && 
                (
                    UserDefinedFields == other.UserDefinedFields ||
                    UserDefinedFields != null &&
                    UserDefinedFields.SequenceEqual(other.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (AdditionalInvoiceFieldID != null)
                    hashCode = hashCode * 59 + AdditionalInvoiceFieldID.GetHashCode();
                    if (FieldValue != null)
                    hashCode = hashCode * 59 + FieldValue.GetHashCode();
                    if (InvoiceBatchID != null)
                    hashCode = hashCode * 59 + InvoiceBatchID.GetHashCode();
                    if (UserDefinedFields != null)
                    hashCode = hashCode * 59 + UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AdditionalInvoiceFieldValueModel left, AdditionalInvoiceFieldValueModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AdditionalInvoiceFieldValueModel left, AdditionalInvoiceFieldValueModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
