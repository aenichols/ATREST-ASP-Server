/*
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Field : IEquatable<Field>
    { 
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name="label")]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Length
        /// </summary>
        [DataMember(Name="length")]
        public int? Length { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets IsRequired
        /// </summary>
        [DataMember(Name="isRequired")]
        public bool? IsRequired { get; set; }

        /// <summary>
        /// Gets or Sets IsReadOnly
        /// </summary>
        [DataMember(Name="isReadOnly")]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Gets or Sets IsQueryable
        /// </summary>
        [DataMember(Name="isQueryable")]
        public bool? IsQueryable { get; set; }

        /// <summary>
        /// Gets or Sets IsReference
        /// </summary>
        [DataMember(Name="isReference")]
        public bool? IsReference { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceEntityType
        /// </summary>
        [DataMember(Name="referenceEntityType")]
        public string ReferenceEntityType { get; set; }

        /// <summary>
        /// Gets or Sets IsPickList
        /// </summary>
        [DataMember(Name="isPickList")]
        public bool? IsPickList { get; set; }

        /// <summary>
        /// Gets or Sets PicklistValues
        /// </summary>
        [DataMember(Name="picklistValues")]
        public List<PickListValue> PicklistValues { get; set; }

        /// <summary>
        /// Gets or Sets PicklistParentValueField
        /// </summary>
        [DataMember(Name="picklistParentValueField")]
        public string PicklistParentValueField { get; set; }

        /// <summary>
        /// Gets or Sets DefaultValue
        /// </summary>
        [DataMember(Name="defaultValue")]
        public string DefaultValue { get; set; }

        /// <summary>
        /// Gets or Sets IsSupportedWebhookField
        /// </summary>
        [DataMember(Name="isSupportedWebhookField")]
        public Object IsSupportedWebhookField { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Field {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IsRequired: ").Append(IsRequired).Append("\n");
            sb.Append("  IsReadOnly: ").Append(IsReadOnly).Append("\n");
            sb.Append("  IsQueryable: ").Append(IsQueryable).Append("\n");
            sb.Append("  IsReference: ").Append(IsReference).Append("\n");
            sb.Append("  ReferenceEntityType: ").Append(ReferenceEntityType).Append("\n");
            sb.Append("  IsPickList: ").Append(IsPickList).Append("\n");
            sb.Append("  PicklistValues: ").Append(PicklistValues).Append("\n");
            sb.Append("  PicklistParentValueField: ").Append(PicklistParentValueField).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  IsSupportedWebhookField: ").Append(IsSupportedWebhookField).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Field)obj);
        }

        /// <summary>
        /// Returns true if Field instances are equal
        /// </summary>
        /// <param name="other">Instance of Field to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Field other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Label == other.Label ||
                    Label != null &&
                    Label.Equals(other.Label)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    Length == other.Length ||
                    Length != null &&
                    Length.Equals(other.Length)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    IsRequired == other.IsRequired ||
                    IsRequired != null &&
                    IsRequired.Equals(other.IsRequired)
                ) && 
                (
                    IsReadOnly == other.IsReadOnly ||
                    IsReadOnly != null &&
                    IsReadOnly.Equals(other.IsReadOnly)
                ) && 
                (
                    IsQueryable == other.IsQueryable ||
                    IsQueryable != null &&
                    IsQueryable.Equals(other.IsQueryable)
                ) && 
                (
                    IsReference == other.IsReference ||
                    IsReference != null &&
                    IsReference.Equals(other.IsReference)
                ) && 
                (
                    ReferenceEntityType == other.ReferenceEntityType ||
                    ReferenceEntityType != null &&
                    ReferenceEntityType.Equals(other.ReferenceEntityType)
                ) && 
                (
                    IsPickList == other.IsPickList ||
                    IsPickList != null &&
                    IsPickList.Equals(other.IsPickList)
                ) && 
                (
                    PicklistValues == other.PicklistValues ||
                    PicklistValues != null &&
                    PicklistValues.SequenceEqual(other.PicklistValues)
                ) && 
                (
                    PicklistParentValueField == other.PicklistParentValueField ||
                    PicklistParentValueField != null &&
                    PicklistParentValueField.Equals(other.PicklistParentValueField)
                ) && 
                (
                    DefaultValue == other.DefaultValue ||
                    DefaultValue != null &&
                    DefaultValue.Equals(other.DefaultValue)
                ) && 
                (
                    IsSupportedWebhookField == other.IsSupportedWebhookField ||
                    IsSupportedWebhookField != null &&
                    IsSupportedWebhookField.Equals(other.IsSupportedWebhookField)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Label != null)
                    hashCode = hashCode * 59 + Label.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Length != null)
                    hashCode = hashCode * 59 + Length.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (IsRequired != null)
                    hashCode = hashCode * 59 + IsRequired.GetHashCode();
                    if (IsReadOnly != null)
                    hashCode = hashCode * 59 + IsReadOnly.GetHashCode();
                    if (IsQueryable != null)
                    hashCode = hashCode * 59 + IsQueryable.GetHashCode();
                    if (IsReference != null)
                    hashCode = hashCode * 59 + IsReference.GetHashCode();
                    if (ReferenceEntityType != null)
                    hashCode = hashCode * 59 + ReferenceEntityType.GetHashCode();
                    if (IsPickList != null)
                    hashCode = hashCode * 59 + IsPickList.GetHashCode();
                    if (PicklistValues != null)
                    hashCode = hashCode * 59 + PicklistValues.GetHashCode();
                    if (PicklistParentValueField != null)
                    hashCode = hashCode * 59 + PicklistParentValueField.GetHashCode();
                    if (DefaultValue != null)
                    hashCode = hashCode * 59 + DefaultValue.GetHashCode();
                    if (IsSupportedWebhookField != null)
                    hashCode = hashCode * 59 + IsSupportedWebhookField.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Field left, Field right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Field left, Field right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
