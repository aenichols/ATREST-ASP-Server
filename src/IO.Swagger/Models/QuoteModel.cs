/*
 * Datto|Autotask PSA Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class QuoteModel : IEquatable<QuoteModel>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets ApprovalStatus
        /// </summary>
        [DataMember(Name="approvalStatus")]
        public int? ApprovalStatus { get; set; }

        /// <summary>
        /// Gets or Sets ApprovalStatusChangedByResourceID
        /// </summary>
        [DataMember(Name="approvalStatusChangedByResourceID")]
        public int? ApprovalStatusChangedByResourceID { get; set; }

        /// <summary>
        /// Gets or Sets ApprovalStatusChangedDate
        /// </summary>
        [DataMember(Name="approvalStatusChangedDate")]
        public DateTime? ApprovalStatusChangedDate { get; set; }

        /// <summary>
        /// Gets or Sets BillToLocationID
        /// </summary>
        [DataMember(Name="billToLocationID")]
        public int? BillToLocationID { get; set; }

        /// <summary>
        /// Gets or Sets CalculateTaxSeparately
        /// </summary>
        [DataMember(Name="calculateTaxSeparately")]
        public bool? CalculateTaxSeparately { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name="comment")]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets CompanyID
        /// </summary>
        [DataMember(Name="companyID")]
        public int? CompanyID { get; set; }

        /// <summary>
        /// Gets or Sets ContactID
        /// </summary>
        [DataMember(Name="contactID")]
        public int? ContactID { get; set; }

        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="createDate")]
        public DateTime? CreateDate { get; set; }

        /// <summary>
        /// Gets or Sets CreatorResourceID
        /// </summary>
        [DataMember(Name="creatorResourceID")]
        public int? CreatorResourceID { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets EffectiveDate
        /// </summary>
        [DataMember(Name="effectiveDate")]
        public DateTime? EffectiveDate { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationDate
        /// </summary>
        [DataMember(Name="expirationDate")]
        public DateTime? ExpirationDate { get; set; }

        /// <summary>
        /// Gets or Sets ExtApprovalContactResponse
        /// </summary>
        [DataMember(Name="extApprovalContactResponse")]
        public int? ExtApprovalContactResponse { get; set; }

        /// <summary>
        /// Gets or Sets ExtApprovalResponseDate
        /// </summary>
        [DataMember(Name="extApprovalResponseDate")]
        public DateTime? ExtApprovalResponseDate { get; set; }

        /// <summary>
        /// Gets or Sets ExtApprovalResponseSignature
        /// </summary>
        [DataMember(Name="extApprovalResponseSignature")]
        public string ExtApprovalResponseSignature { get; set; }

        /// <summary>
        /// Gets or Sets ExternalQuoteNumber
        /// </summary>
        [DataMember(Name="externalQuoteNumber")]
        public string ExternalQuoteNumber { get; set; }

        /// <summary>
        /// Gets or Sets GroupByID
        /// </summary>
        [DataMember(Name="groupByID")]
        public int? GroupByID { get; set; }

        /// <summary>
        /// Gets or Sets ImpersonatorCreatorResourceID
        /// </summary>
        [DataMember(Name="impersonatorCreatorResourceID")]
        public int? ImpersonatorCreatorResourceID { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="isActive")]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets LastActivityDate
        /// </summary>
        [DataMember(Name="lastActivityDate")]
        public DateTime? LastActivityDate { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedBy
        /// </summary>
        [DataMember(Name="lastModifiedBy")]
        public int? LastModifiedBy { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets OpportunityID
        /// </summary>
        [DataMember(Name="opportunityID")]
        public int? OpportunityID { get; set; }

        /// <summary>
        /// Gets or Sets PaymentTerm
        /// </summary>
        [DataMember(Name="paymentTerm")]
        public int? PaymentTerm { get; set; }

        /// <summary>
        /// Gets or Sets PaymentType
        /// </summary>
        [DataMember(Name="paymentType")]
        public int? PaymentType { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryQuote
        /// </summary>
        [DataMember(Name="primaryQuote")]
        public bool? PrimaryQuote { get; set; }

        /// <summary>
        /// Gets or Sets ProposalProjectID
        /// </summary>
        [DataMember(Name="proposalProjectID")]
        public int? ProposalProjectID { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseOrderNumber
        /// </summary>
        [DataMember(Name="purchaseOrderNumber")]
        public string PurchaseOrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets QuoteNumber
        /// </summary>
        [DataMember(Name="quoteNumber")]
        public int? QuoteNumber { get; set; }

        /// <summary>
        /// Gets or Sets QuoteTemplateID
        /// </summary>
        [DataMember(Name="quoteTemplateID")]
        public int? QuoteTemplateID { get; set; }

        /// <summary>
        /// Gets or Sets ShippingType
        /// </summary>
        [DataMember(Name="shippingType")]
        public int? ShippingType { get; set; }

        /// <summary>
        /// Gets or Sets ShipToLocationID
        /// </summary>
        [DataMember(Name="shipToLocationID")]
        public int? ShipToLocationID { get; set; }

        /// <summary>
        /// Gets or Sets ShowEachTaxInGroup
        /// </summary>
        [DataMember(Name="showEachTaxInGroup")]
        public bool? ShowEachTaxInGroup { get; set; }

        /// <summary>
        /// Gets or Sets ShowTaxCategory
        /// </summary>
        [DataMember(Name="showTaxCategory")]
        public bool? ShowTaxCategory { get; set; }

        /// <summary>
        /// Gets or Sets SoldToLocationID
        /// </summary>
        [DataMember(Name="soldToLocationID")]
        public int? SoldToLocationID { get; set; }

        /// <summary>
        /// Gets or Sets TaxRegionID
        /// </summary>
        [DataMember(Name="taxRegionID")]
        public int? TaxRegionID { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedFields
        /// </summary>
        [DataMember(Name="userDefinedFields")]
        public List<UserDefinedField> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QuoteModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ApprovalStatus: ").Append(ApprovalStatus).Append("\n");
            sb.Append("  ApprovalStatusChangedByResourceID: ").Append(ApprovalStatusChangedByResourceID).Append("\n");
            sb.Append("  ApprovalStatusChangedDate: ").Append(ApprovalStatusChangedDate).Append("\n");
            sb.Append("  BillToLocationID: ").Append(BillToLocationID).Append("\n");
            sb.Append("  CalculateTaxSeparately: ").Append(CalculateTaxSeparately).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  CompanyID: ").Append(CompanyID).Append("\n");
            sb.Append("  ContactID: ").Append(ContactID).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  CreatorResourceID: ").Append(CreatorResourceID).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  ExtApprovalContactResponse: ").Append(ExtApprovalContactResponse).Append("\n");
            sb.Append("  ExtApprovalResponseDate: ").Append(ExtApprovalResponseDate).Append("\n");
            sb.Append("  ExtApprovalResponseSignature: ").Append(ExtApprovalResponseSignature).Append("\n");
            sb.Append("  ExternalQuoteNumber: ").Append(ExternalQuoteNumber).Append("\n");
            sb.Append("  GroupByID: ").Append(GroupByID).Append("\n");
            sb.Append("  ImpersonatorCreatorResourceID: ").Append(ImpersonatorCreatorResourceID).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  LastActivityDate: ").Append(LastActivityDate).Append("\n");
            sb.Append("  LastModifiedBy: ").Append(LastModifiedBy).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OpportunityID: ").Append(OpportunityID).Append("\n");
            sb.Append("  PaymentTerm: ").Append(PaymentTerm).Append("\n");
            sb.Append("  PaymentType: ").Append(PaymentType).Append("\n");
            sb.Append("  PrimaryQuote: ").Append(PrimaryQuote).Append("\n");
            sb.Append("  ProposalProjectID: ").Append(ProposalProjectID).Append("\n");
            sb.Append("  PurchaseOrderNumber: ").Append(PurchaseOrderNumber).Append("\n");
            sb.Append("  QuoteNumber: ").Append(QuoteNumber).Append("\n");
            sb.Append("  QuoteTemplateID: ").Append(QuoteTemplateID).Append("\n");
            sb.Append("  ShippingType: ").Append(ShippingType).Append("\n");
            sb.Append("  ShipToLocationID: ").Append(ShipToLocationID).Append("\n");
            sb.Append("  ShowEachTaxInGroup: ").Append(ShowEachTaxInGroup).Append("\n");
            sb.Append("  ShowTaxCategory: ").Append(ShowTaxCategory).Append("\n");
            sb.Append("  SoldToLocationID: ").Append(SoldToLocationID).Append("\n");
            sb.Append("  TaxRegionID: ").Append(TaxRegionID).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((QuoteModel)obj);
        }

        /// <summary>
        /// Returns true if QuoteModel instances are equal
        /// </summary>
        /// <param name="other">Instance of QuoteModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuoteModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    ApprovalStatus == other.ApprovalStatus ||
                    ApprovalStatus != null &&
                    ApprovalStatus.Equals(other.ApprovalStatus)
                ) && 
                (
                    ApprovalStatusChangedByResourceID == other.ApprovalStatusChangedByResourceID ||
                    ApprovalStatusChangedByResourceID != null &&
                    ApprovalStatusChangedByResourceID.Equals(other.ApprovalStatusChangedByResourceID)
                ) && 
                (
                    ApprovalStatusChangedDate == other.ApprovalStatusChangedDate ||
                    ApprovalStatusChangedDate != null &&
                    ApprovalStatusChangedDate.Equals(other.ApprovalStatusChangedDate)
                ) && 
                (
                    BillToLocationID == other.BillToLocationID ||
                    BillToLocationID != null &&
                    BillToLocationID.Equals(other.BillToLocationID)
                ) && 
                (
                    CalculateTaxSeparately == other.CalculateTaxSeparately ||
                    CalculateTaxSeparately != null &&
                    CalculateTaxSeparately.Equals(other.CalculateTaxSeparately)
                ) && 
                (
                    Comment == other.Comment ||
                    Comment != null &&
                    Comment.Equals(other.Comment)
                ) && 
                (
                    CompanyID == other.CompanyID ||
                    CompanyID != null &&
                    CompanyID.Equals(other.CompanyID)
                ) && 
                (
                    ContactID == other.ContactID ||
                    ContactID != null &&
                    ContactID.Equals(other.ContactID)
                ) && 
                (
                    CreateDate == other.CreateDate ||
                    CreateDate != null &&
                    CreateDate.Equals(other.CreateDate)
                ) && 
                (
                    CreatorResourceID == other.CreatorResourceID ||
                    CreatorResourceID != null &&
                    CreatorResourceID.Equals(other.CreatorResourceID)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    EffectiveDate == other.EffectiveDate ||
                    EffectiveDate != null &&
                    EffectiveDate.Equals(other.EffectiveDate)
                ) && 
                (
                    ExpirationDate == other.ExpirationDate ||
                    ExpirationDate != null &&
                    ExpirationDate.Equals(other.ExpirationDate)
                ) && 
                (
                    ExtApprovalContactResponse == other.ExtApprovalContactResponse ||
                    ExtApprovalContactResponse != null &&
                    ExtApprovalContactResponse.Equals(other.ExtApprovalContactResponse)
                ) && 
                (
                    ExtApprovalResponseDate == other.ExtApprovalResponseDate ||
                    ExtApprovalResponseDate != null &&
                    ExtApprovalResponseDate.Equals(other.ExtApprovalResponseDate)
                ) && 
                (
                    ExtApprovalResponseSignature == other.ExtApprovalResponseSignature ||
                    ExtApprovalResponseSignature != null &&
                    ExtApprovalResponseSignature.Equals(other.ExtApprovalResponseSignature)
                ) && 
                (
                    ExternalQuoteNumber == other.ExternalQuoteNumber ||
                    ExternalQuoteNumber != null &&
                    ExternalQuoteNumber.Equals(other.ExternalQuoteNumber)
                ) && 
                (
                    GroupByID == other.GroupByID ||
                    GroupByID != null &&
                    GroupByID.Equals(other.GroupByID)
                ) && 
                (
                    ImpersonatorCreatorResourceID == other.ImpersonatorCreatorResourceID ||
                    ImpersonatorCreatorResourceID != null &&
                    ImpersonatorCreatorResourceID.Equals(other.ImpersonatorCreatorResourceID)
                ) && 
                (
                    IsActive == other.IsActive ||
                    IsActive != null &&
                    IsActive.Equals(other.IsActive)
                ) && 
                (
                    LastActivityDate == other.LastActivityDate ||
                    LastActivityDate != null &&
                    LastActivityDate.Equals(other.LastActivityDate)
                ) && 
                (
                    LastModifiedBy == other.LastModifiedBy ||
                    LastModifiedBy != null &&
                    LastModifiedBy.Equals(other.LastModifiedBy)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    OpportunityID == other.OpportunityID ||
                    OpportunityID != null &&
                    OpportunityID.Equals(other.OpportunityID)
                ) && 
                (
                    PaymentTerm == other.PaymentTerm ||
                    PaymentTerm != null &&
                    PaymentTerm.Equals(other.PaymentTerm)
                ) && 
                (
                    PaymentType == other.PaymentType ||
                    PaymentType != null &&
                    PaymentType.Equals(other.PaymentType)
                ) && 
                (
                    PrimaryQuote == other.PrimaryQuote ||
                    PrimaryQuote != null &&
                    PrimaryQuote.Equals(other.PrimaryQuote)
                ) && 
                (
                    ProposalProjectID == other.ProposalProjectID ||
                    ProposalProjectID != null &&
                    ProposalProjectID.Equals(other.ProposalProjectID)
                ) && 
                (
                    PurchaseOrderNumber == other.PurchaseOrderNumber ||
                    PurchaseOrderNumber != null &&
                    PurchaseOrderNumber.Equals(other.PurchaseOrderNumber)
                ) && 
                (
                    QuoteNumber == other.QuoteNumber ||
                    QuoteNumber != null &&
                    QuoteNumber.Equals(other.QuoteNumber)
                ) && 
                (
                    QuoteTemplateID == other.QuoteTemplateID ||
                    QuoteTemplateID != null &&
                    QuoteTemplateID.Equals(other.QuoteTemplateID)
                ) && 
                (
                    ShippingType == other.ShippingType ||
                    ShippingType != null &&
                    ShippingType.Equals(other.ShippingType)
                ) && 
                (
                    ShipToLocationID == other.ShipToLocationID ||
                    ShipToLocationID != null &&
                    ShipToLocationID.Equals(other.ShipToLocationID)
                ) && 
                (
                    ShowEachTaxInGroup == other.ShowEachTaxInGroup ||
                    ShowEachTaxInGroup != null &&
                    ShowEachTaxInGroup.Equals(other.ShowEachTaxInGroup)
                ) && 
                (
                    ShowTaxCategory == other.ShowTaxCategory ||
                    ShowTaxCategory != null &&
                    ShowTaxCategory.Equals(other.ShowTaxCategory)
                ) && 
                (
                    SoldToLocationID == other.SoldToLocationID ||
                    SoldToLocationID != null &&
                    SoldToLocationID.Equals(other.SoldToLocationID)
                ) && 
                (
                    TaxRegionID == other.TaxRegionID ||
                    TaxRegionID != null &&
                    TaxRegionID.Equals(other.TaxRegionID)
                ) && 
                (
                    UserDefinedFields == other.UserDefinedFields ||
                    UserDefinedFields != null &&
                    UserDefinedFields.SequenceEqual(other.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (ApprovalStatus != null)
                    hashCode = hashCode * 59 + ApprovalStatus.GetHashCode();
                    if (ApprovalStatusChangedByResourceID != null)
                    hashCode = hashCode * 59 + ApprovalStatusChangedByResourceID.GetHashCode();
                    if (ApprovalStatusChangedDate != null)
                    hashCode = hashCode * 59 + ApprovalStatusChangedDate.GetHashCode();
                    if (BillToLocationID != null)
                    hashCode = hashCode * 59 + BillToLocationID.GetHashCode();
                    if (CalculateTaxSeparately != null)
                    hashCode = hashCode * 59 + CalculateTaxSeparately.GetHashCode();
                    if (Comment != null)
                    hashCode = hashCode * 59 + Comment.GetHashCode();
                    if (CompanyID != null)
                    hashCode = hashCode * 59 + CompanyID.GetHashCode();
                    if (ContactID != null)
                    hashCode = hashCode * 59 + ContactID.GetHashCode();
                    if (CreateDate != null)
                    hashCode = hashCode * 59 + CreateDate.GetHashCode();
                    if (CreatorResourceID != null)
                    hashCode = hashCode * 59 + CreatorResourceID.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (EffectiveDate != null)
                    hashCode = hashCode * 59 + EffectiveDate.GetHashCode();
                    if (ExpirationDate != null)
                    hashCode = hashCode * 59 + ExpirationDate.GetHashCode();
                    if (ExtApprovalContactResponse != null)
                    hashCode = hashCode * 59 + ExtApprovalContactResponse.GetHashCode();
                    if (ExtApprovalResponseDate != null)
                    hashCode = hashCode * 59 + ExtApprovalResponseDate.GetHashCode();
                    if (ExtApprovalResponseSignature != null)
                    hashCode = hashCode * 59 + ExtApprovalResponseSignature.GetHashCode();
                    if (ExternalQuoteNumber != null)
                    hashCode = hashCode * 59 + ExternalQuoteNumber.GetHashCode();
                    if (GroupByID != null)
                    hashCode = hashCode * 59 + GroupByID.GetHashCode();
                    if (ImpersonatorCreatorResourceID != null)
                    hashCode = hashCode * 59 + ImpersonatorCreatorResourceID.GetHashCode();
                    if (IsActive != null)
                    hashCode = hashCode * 59 + IsActive.GetHashCode();
                    if (LastActivityDate != null)
                    hashCode = hashCode * 59 + LastActivityDate.GetHashCode();
                    if (LastModifiedBy != null)
                    hashCode = hashCode * 59 + LastModifiedBy.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (OpportunityID != null)
                    hashCode = hashCode * 59 + OpportunityID.GetHashCode();
                    if (PaymentTerm != null)
                    hashCode = hashCode * 59 + PaymentTerm.GetHashCode();
                    if (PaymentType != null)
                    hashCode = hashCode * 59 + PaymentType.GetHashCode();
                    if (PrimaryQuote != null)
                    hashCode = hashCode * 59 + PrimaryQuote.GetHashCode();
                    if (ProposalProjectID != null)
                    hashCode = hashCode * 59 + ProposalProjectID.GetHashCode();
                    if (PurchaseOrderNumber != null)
                    hashCode = hashCode * 59 + PurchaseOrderNumber.GetHashCode();
                    if (QuoteNumber != null)
                    hashCode = hashCode * 59 + QuoteNumber.GetHashCode();
                    if (QuoteTemplateID != null)
                    hashCode = hashCode * 59 + QuoteTemplateID.GetHashCode();
                    if (ShippingType != null)
                    hashCode = hashCode * 59 + ShippingType.GetHashCode();
                    if (ShipToLocationID != null)
                    hashCode = hashCode * 59 + ShipToLocationID.GetHashCode();
                    if (ShowEachTaxInGroup != null)
                    hashCode = hashCode * 59 + ShowEachTaxInGroup.GetHashCode();
                    if (ShowTaxCategory != null)
                    hashCode = hashCode * 59 + ShowTaxCategory.GetHashCode();
                    if (SoldToLocationID != null)
                    hashCode = hashCode * 59 + SoldToLocationID.GetHashCode();
                    if (TaxRegionID != null)
                    hashCode = hashCode * 59 + TaxRegionID.GetHashCode();
                    if (UserDefinedFields != null)
                    hashCode = hashCode * 59 + UserDefinedFields.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(QuoteModel left, QuoteModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(QuoteModel left, QuoteModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
